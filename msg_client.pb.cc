// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_client.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_client.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace suyin {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* UM_Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_BindAccout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_BindAccout_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_ReqVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_ReqVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_Version_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_Version_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_ReqShowMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_ReqShowMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_ShoMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_ShoMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_ReqActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_ReqActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_Activity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_Activity_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_Activities_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_Activities_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_ReqReconncet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_ReqReconncet_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_Reconnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_Reconnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_ReqTeamFight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_ReqTeamFight_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_ReadyFight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_ReadyFight_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_TeamFight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_TeamFight_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_ReqCancelFight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_ReqCancelFight_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_CancelFight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_CancelFight_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_Logout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_Logout_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_EnterGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_EnterGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_SyncRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_SyncRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_BuyItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_BuyItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_UseItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_UseItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_ItemUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_ItemUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_UnequipItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_UnequipItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_EquipUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_EquipUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_ReqShop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_ReqShop_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_Shop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_Shop_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_HeroLevelup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_HeroLevelup_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_Hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_Hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_ReqServerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_ReqServerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_ServerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_ServerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_ReqLoginFight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_ReqLoginFight_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_LoginFightKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_LoginFightKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_ExitFight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_ExitFight_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_Gm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_Gm_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_SetFocus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_SetFocus_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_ReqRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_ReqRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_RoleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_RoleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_ReqFans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_ReqFans_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_Fans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_Fans_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_ReqRanks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_ReqRanks_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_Ranks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_Ranks_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_FightLikes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_FightLikes_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_GetTopMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_GetTopMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_GetMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_GetMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_SendMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_SendMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_LikeMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_LikeMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_TopMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_TopMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_MsgList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_MsgList_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_GetFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_GetFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_Friends_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_Friends_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_ResponseInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_ResponseInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_AddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_AddFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_InviteFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_InviteFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_AddInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_AddInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_DelInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_DelInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_ToBlack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_ToBlack_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_AddBlack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_AddBlack_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_ReqSeasonRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_ReqSeasonRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_SeasonRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_SeasonRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_ReqGameRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_ReqGameRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_GameRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_GameRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_SetPhoto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_SetPhoto_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_ReqPhotos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_ReqPhotos_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_Photos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_Photos_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_SetName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_SetName_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_SetSex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_SetSex_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_SetDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_SetDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_SetGeo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_SetGeo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_SetIcon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_SetIcon_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_GetTicket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_GetTicket_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_ReqIcons_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_ReqIcons_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_Icons_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_Icons_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_Sign_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_Sign_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_Award_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_Award_reflection_ = NULL;
const ::google::protobuf::Descriptor* UM_AwardList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UM_AwardList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* IDUM_CLI_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5fclient_2eproto() {
  protobuf_AddDesc_msg_5fclient_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_client.proto");
  GOOGLE_CHECK(file != NULL);
  UM_Login_descriptor_ = file->message_type(0);
  static const int UM_Login_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Login, acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Login, passwd_),
  };
  UM_Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_Login_descriptor_,
      UM_Login::default_instance_,
      UM_Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_Login));
  UM_BindAccout_descriptor_ = file->message_type(1);
  static const int UM_BindAccout_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_BindAccout, acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_BindAccout, passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_BindAccout, mail_),
  };
  UM_BindAccout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_BindAccout_descriptor_,
      UM_BindAccout::default_instance_,
      UM_BindAccout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_BindAccout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_BindAccout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_BindAccout));
  UM_ReqVersion_descriptor_ = file->message_type(2);
  static const int UM_ReqVersion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqVersion, type_),
  };
  UM_ReqVersion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_ReqVersion_descriptor_,
      UM_ReqVersion::default_instance_,
      UM_ReqVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqVersion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_ReqVersion));
  UM_Version_descriptor_ = file->message_type(3);
  static const int UM_Version_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Version, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Version, url_),
  };
  UM_Version_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_Version_descriptor_,
      UM_Version::default_instance_,
      UM_Version_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Version, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Version, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_Version));
  UM_ReqShowMsg_descriptor_ = file->message_type(4);
  static const int UM_ReqShowMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqShowMsg, version_),
  };
  UM_ReqShowMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_ReqShowMsg_descriptor_,
      UM_ReqShowMsg::default_instance_,
      UM_ReqShowMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqShowMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqShowMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_ReqShowMsg));
  UM_ShoMsg_descriptor_ = file->message_type(5);
  static const int UM_ShoMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ShoMsg, activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ShoMsg, chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ShoMsg, pvp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ShoMsg, sybtn_),
  };
  UM_ShoMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_ShoMsg_descriptor_,
      UM_ShoMsg::default_instance_,
      UM_ShoMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ShoMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ShoMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_ShoMsg));
  UM_ReqActivity_descriptor_ = file->message_type(6);
  static const int UM_ReqActivity_offsets_[1] = {
  };
  UM_ReqActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_ReqActivity_descriptor_,
      UM_ReqActivity::default_instance_,
      UM_ReqActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_ReqActivity));
  UM_Activity_descriptor_ = file->message_type(7);
  static const int UM_Activity_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Activity, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Activity, url_),
  };
  UM_Activity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_Activity_descriptor_,
      UM_Activity::default_instance_,
      UM_Activity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Activity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Activity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_Activity));
  UM_Activities_descriptor_ = file->message_type(8);
  static const int UM_Activities_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Activities, activites_),
  };
  UM_Activities_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_Activities_descriptor_,
      UM_Activities::default_instance_,
      UM_Activities_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Activities, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Activities, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_Activities));
  UM_ReqReconncet_descriptor_ = file->message_type(9);
  static const int UM_ReqReconncet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqReconncet, playerid_),
  };
  UM_ReqReconncet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_ReqReconncet_descriptor_,
      UM_ReqReconncet::default_instance_,
      UM_ReqReconncet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqReconncet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqReconncet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_ReqReconncet));
  UM_Reconnect_descriptor_ = file->message_type(10);
  static const int UM_Reconnect_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Reconnect, connect_),
  };
  UM_Reconnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_Reconnect_descriptor_,
      UM_Reconnect::default_instance_,
      UM_Reconnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Reconnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Reconnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_Reconnect));
  UM_ReqTeamFight_descriptor_ = file->message_type(11);
  static const int UM_ReqTeamFight_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqTeamFight, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqTeamFight, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqTeamFight, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqTeamFight, ticket_count_),
  };
  UM_ReqTeamFight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_ReqTeamFight_descriptor_,
      UM_ReqTeamFight::default_instance_,
      UM_ReqTeamFight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqTeamFight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqTeamFight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_ReqTeamFight));
  UM_ReadyFight_descriptor_ = file->message_type(12);
  static const int UM_ReadyFight_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReadyFight, time_),
  };
  UM_ReadyFight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_ReadyFight_descriptor_,
      UM_ReadyFight::default_instance_,
      UM_ReadyFight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReadyFight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReadyFight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_ReadyFight));
  UM_TeamFight_descriptor_ = file->message_type(13);
  static const int UM_TeamFight_offsets_[1] = {
  };
  UM_TeamFight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_TeamFight_descriptor_,
      UM_TeamFight::default_instance_,
      UM_TeamFight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_TeamFight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_TeamFight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_TeamFight));
  UM_ReqCancelFight_descriptor_ = file->message_type(14);
  static const int UM_ReqCancelFight_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqCancelFight, playerid_),
  };
  UM_ReqCancelFight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_ReqCancelFight_descriptor_,
      UM_ReqCancelFight::default_instance_,
      UM_ReqCancelFight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqCancelFight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqCancelFight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_ReqCancelFight));
  UM_CancelFight_descriptor_ = file->message_type(15);
  static const int UM_CancelFight_offsets_[1] = {
  };
  UM_CancelFight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_CancelFight_descriptor_,
      UM_CancelFight::default_instance_,
      UM_CancelFight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_CancelFight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_CancelFight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_CancelFight));
  UM_Logout_descriptor_ = file->message_type(16);
  static const int UM_Logout_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Logout, err_),
  };
  UM_Logout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_Logout_descriptor_,
      UM_Logout::default_instance_,
      UM_Logout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Logout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Logout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_Logout));
  UM_EnterGame_descriptor_ = file->message_type(17);
  static const int UM_EnterGame_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_EnterGame, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_EnterGame, servertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_EnterGame, fighting_),
  };
  UM_EnterGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_EnterGame_descriptor_,
      UM_EnterGame::default_instance_,
      UM_EnterGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_EnterGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_EnterGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_EnterGame));
  UM_SyncRole_descriptor_ = file->message_type(18);
  static const int UM_SyncRole_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SyncRole, info_),
  };
  UM_SyncRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_SyncRole_descriptor_,
      UM_SyncRole::default_instance_,
      UM_SyncRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SyncRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SyncRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_SyncRole));
  UM_BuyItem_descriptor_ = file->message_type(19);
  static const int UM_BuyItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_BuyItem, id_),
  };
  UM_BuyItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_BuyItem_descriptor_,
      UM_BuyItem::default_instance_,
      UM_BuyItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_BuyItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_BuyItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_BuyItem));
  UM_UseItem_descriptor_ = file->message_type(20);
  static const int UM_UseItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_UseItem, id_),
  };
  UM_UseItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_UseItem_descriptor_,
      UM_UseItem::default_instance_,
      UM_UseItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_UseItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_UseItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_UseItem));
  UM_ItemUpdate_descriptor_ = file->message_type(21);
  static const int UM_ItemUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ItemUpdate, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ItemUpdate, type_),
  };
  UM_ItemUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_ItemUpdate_descriptor_,
      UM_ItemUpdate::default_instance_,
      UM_ItemUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ItemUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ItemUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_ItemUpdate));
  UM_UnequipItem_descriptor_ = file->message_type(22);
  static const int UM_UnequipItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_UnequipItem, itemtype_),
  };
  UM_UnequipItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_UnequipItem_descriptor_,
      UM_UnequipItem::default_instance_,
      UM_UnequipItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_UnequipItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_UnequipItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_UnequipItem));
  UM_EquipUpdate_descriptor_ = file->message_type(23);
  static const int UM_EquipUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_EquipUpdate, itemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_EquipUpdate, id_),
  };
  UM_EquipUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_EquipUpdate_descriptor_,
      UM_EquipUpdate::default_instance_,
      UM_EquipUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_EquipUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_EquipUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_EquipUpdate));
  UM_ReqShop_descriptor_ = file->message_type(24);
  static const int UM_ReqShop_offsets_[1] = {
  };
  UM_ReqShop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_ReqShop_descriptor_,
      UM_ReqShop::default_instance_,
      UM_ReqShop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqShop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqShop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_ReqShop));
  UM_Shop_descriptor_ = file->message_type(25);
  static const int UM_Shop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Shop, list_),
  };
  UM_Shop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_Shop_descriptor_,
      UM_Shop::default_instance_,
      UM_Shop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Shop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Shop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_Shop));
  UM_HeroLevelup_descriptor_ = file->message_type(26);
  static const int UM_HeroLevelup_offsets_[1] = {
  };
  UM_HeroLevelup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_HeroLevelup_descriptor_,
      UM_HeroLevelup::default_instance_,
      UM_HeroLevelup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_HeroLevelup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_HeroLevelup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_HeroLevelup));
  UM_Hero_descriptor_ = file->message_type(27);
  static const int UM_Hero_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Hero, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Hero, herolevel_),
  };
  UM_Hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_Hero_descriptor_,
      UM_Hero::default_instance_,
      UM_Hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_Hero));
  UM_ReqServerList_descriptor_ = file->message_type(28);
  static const int UM_ReqServerList_offsets_[1] = {
  };
  UM_ReqServerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_ReqServerList_descriptor_,
      UM_ReqServerList::default_instance_,
      UM_ReqServerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqServerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqServerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_ReqServerList));
  UM_ServerList_descriptor_ = file->message_type(29);
  static const int UM_ServerList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ServerList, list_),
  };
  UM_ServerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_ServerList_descriptor_,
      UM_ServerList::default_instance_,
      UM_ServerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ServerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ServerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_ServerList));
  UM_ReqLoginFight_descriptor_ = file->message_type(30);
  static const int UM_ReqLoginFight_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqLoginFight, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqLoginFight, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqLoginFight, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqLoginFight, ticket_count_),
  };
  UM_ReqLoginFight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_ReqLoginFight_descriptor_,
      UM_ReqLoginFight::default_instance_,
      UM_ReqLoginFight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqLoginFight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqLoginFight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_ReqLoginFight));
  UM_LoginFightKey_descriptor_ = file->message_type(31);
  static const int UM_LoginFightKey_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_LoginFightKey, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_LoginFightKey, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_LoginFightKey, roomid_),
  };
  UM_LoginFightKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_LoginFightKey_descriptor_,
      UM_LoginFightKey::default_instance_,
      UM_LoginFightKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_LoginFightKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_LoginFightKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_LoginFightKey));
  UM_ExitFight_descriptor_ = file->message_type(32);
  static const int UM_ExitFight_offsets_[1] = {
  };
  UM_ExitFight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_ExitFight_descriptor_,
      UM_ExitFight::default_instance_,
      UM_ExitFight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ExitFight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ExitFight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_ExitFight));
  UM_Gm_descriptor_ = file->message_type(33);
  static const int UM_Gm_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Gm, command_),
  };
  UM_Gm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_Gm_descriptor_,
      UM_Gm::default_instance_,
      UM_Gm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Gm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Gm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_Gm));
  UM_Response_descriptor_ = file->message_type(34);
  static const int UM_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Response, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Response, err_),
  };
  UM_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_Response_descriptor_,
      UM_Response::default_instance_,
      UM_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_Response));
  UM_SetFocus_descriptor_ = file->message_type(35);
  static const int UM_SetFocus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SetFocus, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SetFocus, set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SetFocus, roleid_),
  };
  UM_SetFocus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_SetFocus_descriptor_,
      UM_SetFocus::default_instance_,
      UM_SetFocus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SetFocus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SetFocus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_SetFocus));
  UM_ReqRole_descriptor_ = file->message_type(36);
  static const int UM_ReqRole_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqRole, roleid_),
  };
  UM_ReqRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_ReqRole_descriptor_,
      UM_ReqRole::default_instance_,
      UM_ReqRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_ReqRole));
  UM_RoleInfo_descriptor_ = file->message_type(37);
  static const int UM_RoleInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_RoleInfo, info_),
  };
  UM_RoleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_RoleInfo_descriptor_,
      UM_RoleInfo::default_instance_,
      UM_RoleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_RoleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_RoleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_RoleInfo));
  UM_ReqFans_descriptor_ = file->message_type(38);
  static const int UM_ReqFans_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqFans, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqFans, range1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqFans, range2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqFans, roleid_),
  };
  UM_ReqFans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_ReqFans_descriptor_,
      UM_ReqFans::default_instance_,
      UM_ReqFans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqFans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqFans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_ReqFans));
  UM_Fans_descriptor_ = file->message_type(39);
  static const int UM_Fans_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Fans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Fans, range1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Fans, range2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Fans, roleid_),
  };
  UM_Fans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_Fans_descriptor_,
      UM_Fans::default_instance_,
      UM_Fans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Fans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Fans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_Fans));
  UM_ReqRanks_descriptor_ = file->message_type(40);
  static const int UM_ReqRanks_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqRanks, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqRanks, subtype_),
  };
  UM_ReqRanks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_ReqRanks_descriptor_,
      UM_ReqRanks::default_instance_,
      UM_ReqRanks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqRanks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqRanks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_ReqRanks));
  UM_Ranks_descriptor_ = file->message_type(41);
  static const int UM_Ranks_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Ranks, list_),
  };
  UM_Ranks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_Ranks_descriptor_,
      UM_Ranks::default_instance_,
      UM_Ranks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Ranks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Ranks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_Ranks));
  UM_FightLikes_descriptor_ = file->message_type(42);
  static const int UM_FightLikes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_FightLikes, attentions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_FightLikes, likes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_FightLikes, roles_),
  };
  UM_FightLikes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_FightLikes_descriptor_,
      UM_FightLikes::default_instance_,
      UM_FightLikes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_FightLikes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_FightLikes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_FightLikes));
  UM_GetTopMsg_descriptor_ = file->message_type(43);
  static const int UM_GetTopMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_GetTopMsg, roleid_),
  };
  UM_GetTopMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_GetTopMsg_descriptor_,
      UM_GetTopMsg::default_instance_,
      UM_GetTopMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_GetTopMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_GetTopMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_GetTopMsg));
  UM_GetMsg_descriptor_ = file->message_type(44);
  static const int UM_GetMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_GetMsg, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_GetMsg, range1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_GetMsg, range2_),
  };
  UM_GetMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_GetMsg_descriptor_,
      UM_GetMsg::default_instance_,
      UM_GetMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_GetMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_GetMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_GetMsg));
  UM_SendMsg_descriptor_ = file->message_type(45);
  static const int UM_SendMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SendMsg, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SendMsg, content_),
  };
  UM_SendMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_SendMsg_descriptor_,
      UM_SendMsg::default_instance_,
      UM_SendMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SendMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SendMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_SendMsg));
  UM_LikeMsg_descriptor_ = file->message_type(46);
  static const int UM_LikeMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_LikeMsg, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_LikeMsg, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_LikeMsg, set_),
  };
  UM_LikeMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_LikeMsg_descriptor_,
      UM_LikeMsg::default_instance_,
      UM_LikeMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_LikeMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_LikeMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_LikeMsg));
  UM_TopMsg_descriptor_ = file->message_type(47);
  static const int UM_TopMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_TopMsg, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_TopMsg, list_),
  };
  UM_TopMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_TopMsg_descriptor_,
      UM_TopMsg::default_instance_,
      UM_TopMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_TopMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_TopMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_TopMsg));
  UM_MsgList_descriptor_ = file->message_type(48);
  static const int UM_MsgList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_MsgList, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_MsgList, range1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_MsgList, range2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_MsgList, list_),
  };
  UM_MsgList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_MsgList_descriptor_,
      UM_MsgList::default_instance_,
      UM_MsgList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_MsgList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_MsgList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_MsgList));
  UM_GetFriend_descriptor_ = file->message_type(49);
  static const int UM_GetFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_GetFriend, type_),
  };
  UM_GetFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_GetFriend_descriptor_,
      UM_GetFriend::default_instance_,
      UM_GetFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_GetFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_GetFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_GetFriend));
  UM_Friends_descriptor_ = file->message_type(50);
  static const int UM_Friends_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Friends, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Friends, type_),
  };
  UM_Friends_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_Friends_descriptor_,
      UM_Friends::default_instance_,
      UM_Friends_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Friends, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Friends, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_Friends));
  UM_ResponseInvite_descriptor_ = file->message_type(51);
  static const int UM_ResponseInvite_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ResponseInvite, ok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ResponseInvite, roleid_),
  };
  UM_ResponseInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_ResponseInvite_descriptor_,
      UM_ResponseInvite::default_instance_,
      UM_ResponseInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ResponseInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ResponseInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_ResponseInvite));
  UM_AddFriend_descriptor_ = file->message_type(52);
  static const int UM_AddFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_AddFriend, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_AddFriend, info_),
  };
  UM_AddFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_AddFriend_descriptor_,
      UM_AddFriend::default_instance_,
      UM_AddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_AddFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_AddFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_AddFriend));
  UM_InviteFriend_descriptor_ = file->message_type(53);
  static const int UM_InviteFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_InviteFriend, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_InviteFriend, name_),
  };
  UM_InviteFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_InviteFriend_descriptor_,
      UM_InviteFriend::default_instance_,
      UM_InviteFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_InviteFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_InviteFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_InviteFriend));
  UM_AddInvite_descriptor_ = file->message_type(54);
  static const int UM_AddInvite_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_AddInvite, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_AddInvite, info_),
  };
  UM_AddInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_AddInvite_descriptor_,
      UM_AddInvite::default_instance_,
      UM_AddInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_AddInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_AddInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_AddInvite));
  UM_DelInvite_descriptor_ = file->message_type(55);
  static const int UM_DelInvite_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_DelInvite, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_DelInvite, info_),
  };
  UM_DelInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_DelInvite_descriptor_,
      UM_DelInvite::default_instance_,
      UM_DelInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_DelInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_DelInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_DelInvite));
  UM_ToBlack_descriptor_ = file->message_type(56);
  static const int UM_ToBlack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ToBlack, roleid_),
  };
  UM_ToBlack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_ToBlack_descriptor_,
      UM_ToBlack::default_instance_,
      UM_ToBlack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ToBlack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ToBlack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_ToBlack));
  UM_AddBlack_descriptor_ = file->message_type(57);
  static const int UM_AddBlack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_AddBlack, info_),
  };
  UM_AddBlack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_AddBlack_descriptor_,
      UM_AddBlack::default_instance_,
      UM_AddBlack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_AddBlack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_AddBlack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_AddBlack));
  UM_ReqSeasonRank_descriptor_ = file->message_type(58);
  static const int UM_ReqSeasonRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqSeasonRank, roleid_),
  };
  UM_ReqSeasonRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_ReqSeasonRank_descriptor_,
      UM_ReqSeasonRank::default_instance_,
      UM_ReqSeasonRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqSeasonRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqSeasonRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_ReqSeasonRank));
  UM_SeasonRank_descriptor_ = file->message_type(59);
  static const int UM_SeasonRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SeasonRank, list_),
  };
  UM_SeasonRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_SeasonRank_descriptor_,
      UM_SeasonRank::default_instance_,
      UM_SeasonRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SeasonRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SeasonRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_SeasonRank));
  UM_ReqGameRecord_descriptor_ = file->message_type(60);
  static const int UM_ReqGameRecord_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqGameRecord, roleid_),
  };
  UM_ReqGameRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_ReqGameRecord_descriptor_,
      UM_ReqGameRecord::default_instance_,
      UM_ReqGameRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqGameRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqGameRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_ReqGameRecord));
  UM_GameRecord_descriptor_ = file->message_type(61);
  static const int UM_GameRecord_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_GameRecord, list_),
  };
  UM_GameRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_GameRecord_descriptor_,
      UM_GameRecord::default_instance_,
      UM_GameRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_GameRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_GameRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_GameRecord));
  UM_SetPhoto_descriptor_ = file->message_type(62);
  static const int UM_SetPhoto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SetPhoto, data_),
  };
  UM_SetPhoto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_SetPhoto_descriptor_,
      UM_SetPhoto::default_instance_,
      UM_SetPhoto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SetPhoto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SetPhoto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_SetPhoto));
  UM_ReqPhotos_descriptor_ = file->message_type(63);
  static const int UM_ReqPhotos_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqPhotos, roleid_),
  };
  UM_ReqPhotos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_ReqPhotos_descriptor_,
      UM_ReqPhotos::default_instance_,
      UM_ReqPhotos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqPhotos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqPhotos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_ReqPhotos));
  UM_Photos_descriptor_ = file->message_type(64);
  static const int UM_Photos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Photos, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Photos, roleid_),
  };
  UM_Photos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_Photos_descriptor_,
      UM_Photos::default_instance_,
      UM_Photos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Photos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Photos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_Photos));
  UM_SetName_descriptor_ = file->message_type(65);
  static const int UM_SetName_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SetName, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SetName, passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SetName, sex_),
  };
  UM_SetName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_SetName_descriptor_,
      UM_SetName::default_instance_,
      UM_SetName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SetName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SetName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_SetName));
  UM_SetSex_descriptor_ = file->message_type(66);
  static const int UM_SetSex_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SetSex, sex_),
  };
  UM_SetSex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_SetSex_descriptor_,
      UM_SetSex::default_instance_,
      UM_SetSex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SetSex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SetSex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_SetSex));
  UM_SetDesc_descriptor_ = file->message_type(67);
  static const int UM_SetDesc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SetDesc, desc_),
  };
  UM_SetDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_SetDesc_descriptor_,
      UM_SetDesc::default_instance_,
      UM_SetDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SetDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SetDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_SetDesc));
  UM_SetGeo_descriptor_ = file->message_type(68);
  static const int UM_SetGeo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SetGeo, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SetGeo, city_),
  };
  UM_SetGeo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_SetGeo_descriptor_,
      UM_SetGeo::default_instance_,
      UM_SetGeo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SetGeo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SetGeo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_SetGeo));
  UM_SetIcon_descriptor_ = file->message_type(69);
  static const int UM_SetIcon_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SetIcon, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SetIcon, data_),
  };
  UM_SetIcon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_SetIcon_descriptor_,
      UM_SetIcon::default_instance_,
      UM_SetIcon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SetIcon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_SetIcon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_SetIcon));
  UM_GetTicket_descriptor_ = file->message_type(70);
  static const int UM_GetTicket_offsets_[1] = {
  };
  UM_GetTicket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_GetTicket_descriptor_,
      UM_GetTicket::default_instance_,
      UM_GetTicket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_GetTicket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_GetTicket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_GetTicket));
  UM_ReqIcons_descriptor_ = file->message_type(71);
  static const int UM_ReqIcons_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqIcons, list_),
  };
  UM_ReqIcons_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_ReqIcons_descriptor_,
      UM_ReqIcons::default_instance_,
      UM_ReqIcons_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqIcons, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_ReqIcons, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_ReqIcons));
  UM_Icons_descriptor_ = file->message_type(72);
  static const int UM_Icons_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Icons, list_),
  };
  UM_Icons_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_Icons_descriptor_,
      UM_Icons::default_instance_,
      UM_Icons_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Icons, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Icons, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_Icons));
  UM_Sign_descriptor_ = file->message_type(73);
  static const int UM_Sign_offsets_[1] = {
  };
  UM_Sign_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_Sign_descriptor_,
      UM_Sign::default_instance_,
      UM_Sign_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Sign, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Sign, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_Sign));
  UM_Award_descriptor_ = file->message_type(74);
  static const int UM_Award_offsets_[1] = {
  };
  UM_Award_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_Award_descriptor_,
      UM_Award::default_instance_,
      UM_Award_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Award, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_Award, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_Award));
  UM_AwardList_descriptor_ = file->message_type(75);
  static const int UM_AwardList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_AwardList, list_),
  };
  UM_AwardList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UM_AwardList_descriptor_,
      UM_AwardList::default_instance_,
      UM_AwardList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_AwardList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UM_AwardList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UM_AwardList));
  IDUM_CLI_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5fclient_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_Login_descriptor_, &UM_Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_BindAccout_descriptor_, &UM_BindAccout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_ReqVersion_descriptor_, &UM_ReqVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_Version_descriptor_, &UM_Version::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_ReqShowMsg_descriptor_, &UM_ReqShowMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_ShoMsg_descriptor_, &UM_ShoMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_ReqActivity_descriptor_, &UM_ReqActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_Activity_descriptor_, &UM_Activity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_Activities_descriptor_, &UM_Activities::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_ReqReconncet_descriptor_, &UM_ReqReconncet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_Reconnect_descriptor_, &UM_Reconnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_ReqTeamFight_descriptor_, &UM_ReqTeamFight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_ReadyFight_descriptor_, &UM_ReadyFight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_TeamFight_descriptor_, &UM_TeamFight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_ReqCancelFight_descriptor_, &UM_ReqCancelFight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_CancelFight_descriptor_, &UM_CancelFight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_Logout_descriptor_, &UM_Logout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_EnterGame_descriptor_, &UM_EnterGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_SyncRole_descriptor_, &UM_SyncRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_BuyItem_descriptor_, &UM_BuyItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_UseItem_descriptor_, &UM_UseItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_ItemUpdate_descriptor_, &UM_ItemUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_UnequipItem_descriptor_, &UM_UnequipItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_EquipUpdate_descriptor_, &UM_EquipUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_ReqShop_descriptor_, &UM_ReqShop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_Shop_descriptor_, &UM_Shop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_HeroLevelup_descriptor_, &UM_HeroLevelup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_Hero_descriptor_, &UM_Hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_ReqServerList_descriptor_, &UM_ReqServerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_ServerList_descriptor_, &UM_ServerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_ReqLoginFight_descriptor_, &UM_ReqLoginFight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_LoginFightKey_descriptor_, &UM_LoginFightKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_ExitFight_descriptor_, &UM_ExitFight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_Gm_descriptor_, &UM_Gm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_Response_descriptor_, &UM_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_SetFocus_descriptor_, &UM_SetFocus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_ReqRole_descriptor_, &UM_ReqRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_RoleInfo_descriptor_, &UM_RoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_ReqFans_descriptor_, &UM_ReqFans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_Fans_descriptor_, &UM_Fans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_ReqRanks_descriptor_, &UM_ReqRanks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_Ranks_descriptor_, &UM_Ranks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_FightLikes_descriptor_, &UM_FightLikes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_GetTopMsg_descriptor_, &UM_GetTopMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_GetMsg_descriptor_, &UM_GetMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_SendMsg_descriptor_, &UM_SendMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_LikeMsg_descriptor_, &UM_LikeMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_TopMsg_descriptor_, &UM_TopMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_MsgList_descriptor_, &UM_MsgList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_GetFriend_descriptor_, &UM_GetFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_Friends_descriptor_, &UM_Friends::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_ResponseInvite_descriptor_, &UM_ResponseInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_AddFriend_descriptor_, &UM_AddFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_InviteFriend_descriptor_, &UM_InviteFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_AddInvite_descriptor_, &UM_AddInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_DelInvite_descriptor_, &UM_DelInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_ToBlack_descriptor_, &UM_ToBlack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_AddBlack_descriptor_, &UM_AddBlack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_ReqSeasonRank_descriptor_, &UM_ReqSeasonRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_SeasonRank_descriptor_, &UM_SeasonRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_ReqGameRecord_descriptor_, &UM_ReqGameRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_GameRecord_descriptor_, &UM_GameRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_SetPhoto_descriptor_, &UM_SetPhoto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_ReqPhotos_descriptor_, &UM_ReqPhotos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_Photos_descriptor_, &UM_Photos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_SetName_descriptor_, &UM_SetName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_SetSex_descriptor_, &UM_SetSex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_SetDesc_descriptor_, &UM_SetDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_SetGeo_descriptor_, &UM_SetGeo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_SetIcon_descriptor_, &UM_SetIcon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_GetTicket_descriptor_, &UM_GetTicket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_ReqIcons_descriptor_, &UM_ReqIcons::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_Icons_descriptor_, &UM_Icons::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_Sign_descriptor_, &UM_Sign::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_Award_descriptor_, &UM_Award::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UM_AwardList_descriptor_, &UM_AwardList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5fclient_2eproto() {
  delete UM_Login::default_instance_;
  delete UM_Login_reflection_;
  delete UM_BindAccout::default_instance_;
  delete UM_BindAccout_reflection_;
  delete UM_ReqVersion::default_instance_;
  delete UM_ReqVersion_reflection_;
  delete UM_Version::default_instance_;
  delete UM_Version_reflection_;
  delete UM_ReqShowMsg::default_instance_;
  delete UM_ReqShowMsg_reflection_;
  delete UM_ShoMsg::default_instance_;
  delete UM_ShoMsg_reflection_;
  delete UM_ReqActivity::default_instance_;
  delete UM_ReqActivity_reflection_;
  delete UM_Activity::default_instance_;
  delete UM_Activity_reflection_;
  delete UM_Activities::default_instance_;
  delete UM_Activities_reflection_;
  delete UM_ReqReconncet::default_instance_;
  delete UM_ReqReconncet_reflection_;
  delete UM_Reconnect::default_instance_;
  delete UM_Reconnect_reflection_;
  delete UM_ReqTeamFight::default_instance_;
  delete UM_ReqTeamFight_reflection_;
  delete UM_ReadyFight::default_instance_;
  delete UM_ReadyFight_reflection_;
  delete UM_TeamFight::default_instance_;
  delete UM_TeamFight_reflection_;
  delete UM_ReqCancelFight::default_instance_;
  delete UM_ReqCancelFight_reflection_;
  delete UM_CancelFight::default_instance_;
  delete UM_CancelFight_reflection_;
  delete UM_Logout::default_instance_;
  delete UM_Logout_reflection_;
  delete UM_EnterGame::default_instance_;
  delete UM_EnterGame_reflection_;
  delete UM_SyncRole::default_instance_;
  delete UM_SyncRole_reflection_;
  delete UM_BuyItem::default_instance_;
  delete UM_BuyItem_reflection_;
  delete UM_UseItem::default_instance_;
  delete UM_UseItem_reflection_;
  delete UM_ItemUpdate::default_instance_;
  delete UM_ItemUpdate_reflection_;
  delete UM_UnequipItem::default_instance_;
  delete UM_UnequipItem_reflection_;
  delete UM_EquipUpdate::default_instance_;
  delete UM_EquipUpdate_reflection_;
  delete UM_ReqShop::default_instance_;
  delete UM_ReqShop_reflection_;
  delete UM_Shop::default_instance_;
  delete UM_Shop_reflection_;
  delete UM_HeroLevelup::default_instance_;
  delete UM_HeroLevelup_reflection_;
  delete UM_Hero::default_instance_;
  delete UM_Hero_reflection_;
  delete UM_ReqServerList::default_instance_;
  delete UM_ReqServerList_reflection_;
  delete UM_ServerList::default_instance_;
  delete UM_ServerList_reflection_;
  delete UM_ReqLoginFight::default_instance_;
  delete UM_ReqLoginFight_reflection_;
  delete UM_LoginFightKey::default_instance_;
  delete UM_LoginFightKey_reflection_;
  delete UM_ExitFight::default_instance_;
  delete UM_ExitFight_reflection_;
  delete UM_Gm::default_instance_;
  delete UM_Gm_reflection_;
  delete UM_Response::default_instance_;
  delete UM_Response_reflection_;
  delete UM_SetFocus::default_instance_;
  delete UM_SetFocus_reflection_;
  delete UM_ReqRole::default_instance_;
  delete UM_ReqRole_reflection_;
  delete UM_RoleInfo::default_instance_;
  delete UM_RoleInfo_reflection_;
  delete UM_ReqFans::default_instance_;
  delete UM_ReqFans_reflection_;
  delete UM_Fans::default_instance_;
  delete UM_Fans_reflection_;
  delete UM_ReqRanks::default_instance_;
  delete UM_ReqRanks_reflection_;
  delete UM_Ranks::default_instance_;
  delete UM_Ranks_reflection_;
  delete UM_FightLikes::default_instance_;
  delete UM_FightLikes_reflection_;
  delete UM_GetTopMsg::default_instance_;
  delete UM_GetTopMsg_reflection_;
  delete UM_GetMsg::default_instance_;
  delete UM_GetMsg_reflection_;
  delete UM_SendMsg::default_instance_;
  delete UM_SendMsg_reflection_;
  delete UM_LikeMsg::default_instance_;
  delete UM_LikeMsg_reflection_;
  delete UM_TopMsg::default_instance_;
  delete UM_TopMsg_reflection_;
  delete UM_MsgList::default_instance_;
  delete UM_MsgList_reflection_;
  delete UM_GetFriend::default_instance_;
  delete UM_GetFriend_reflection_;
  delete UM_Friends::default_instance_;
  delete UM_Friends_reflection_;
  delete UM_ResponseInvite::default_instance_;
  delete UM_ResponseInvite_reflection_;
  delete UM_AddFriend::default_instance_;
  delete UM_AddFriend_reflection_;
  delete UM_InviteFriend::default_instance_;
  delete UM_InviteFriend_reflection_;
  delete UM_AddInvite::default_instance_;
  delete UM_AddInvite_reflection_;
  delete UM_DelInvite::default_instance_;
  delete UM_DelInvite_reflection_;
  delete UM_ToBlack::default_instance_;
  delete UM_ToBlack_reflection_;
  delete UM_AddBlack::default_instance_;
  delete UM_AddBlack_reflection_;
  delete UM_ReqSeasonRank::default_instance_;
  delete UM_ReqSeasonRank_reflection_;
  delete UM_SeasonRank::default_instance_;
  delete UM_SeasonRank_reflection_;
  delete UM_ReqGameRecord::default_instance_;
  delete UM_ReqGameRecord_reflection_;
  delete UM_GameRecord::default_instance_;
  delete UM_GameRecord_reflection_;
  delete UM_SetPhoto::default_instance_;
  delete UM_SetPhoto_reflection_;
  delete UM_ReqPhotos::default_instance_;
  delete UM_ReqPhotos_reflection_;
  delete UM_Photos::default_instance_;
  delete UM_Photos_reflection_;
  delete UM_SetName::default_instance_;
  delete UM_SetName_reflection_;
  delete UM_SetSex::default_instance_;
  delete UM_SetSex_reflection_;
  delete UM_SetDesc::default_instance_;
  delete UM_SetDesc_reflection_;
  delete UM_SetGeo::default_instance_;
  delete UM_SetGeo_reflection_;
  delete UM_SetIcon::default_instance_;
  delete UM_SetIcon_reflection_;
  delete UM_GetTicket::default_instance_;
  delete UM_GetTicket_reflection_;
  delete UM_ReqIcons::default_instance_;
  delete UM_ReqIcons_reflection_;
  delete UM_Icons::default_instance_;
  delete UM_Icons_reflection_;
  delete UM_Sign::default_instance_;
  delete UM_Sign_reflection_;
  delete UM_Award::default_instance_;
  delete UM_Award_reflection_;
  delete UM_AwardList::default_instance_;
  delete UM_AwardList_reflection_;
}

void protobuf_AddDesc_msg_5fclient_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::com::suyin::proto::protobuf_AddDesc_enum_2eproto();
  ::com::suyin::proto::protobuf_AddDesc_struct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020msg_client.proto\022\017com.suyin.proto\032\nenu"
    "m.proto\032\014struct.proto\"\'\n\010UM_Login\022\013\n\003acc"
    "\030\001 \001(\t\022\016\n\006passwd\030\002 \001(\t\":\n\rUM_BindAccout\022"
    "\013\n\003acc\030\001 \002(\t\022\016\n\006passwd\030\002 \002(\t\022\014\n\004mail\030\003 \002"
    "(\t\"\035\n\rUM_ReqVersion\022\014\n\004type\030\001 \002(\t\"*\n\nUM_"
    "Version\022\017\n\007version\030\001 \002(\t\022\013\n\003url\030\002 \002(\t\" \n"
    "\rUM_ReqShowMsg\022\017\n\007version\030\001 \002(\t\"G\n\tUM_Sh"
    "oMsg\022\020\n\010activity\030\001 \001(\010\022\014\n\004chat\030\002 \001(\010\022\013\n\003"
    "pvp\030\003 \001(\010\022\r\n\005sybtn\030\004 \001(\010\"\020\n\016UM_ReqActivi"
    "ty\"&\n\013UM_Activity\022\n\n\002id\030\001 \002(\005\022\013\n\003url\030\002 \002"
    "(\t\"@\n\rUM_Activities\022/\n\tactivites\030\001 \003(\0132\034"
    ".com.suyin.proto.UM_Activity\"#\n\017UM_ReqRe"
    "conncet\022\020\n\010playerid\030\001 \002(\t\"\037\n\014UM_Reconnec"
    "t\022\017\n\007connect\030\001 \002(\010\"Y\n\017UM_ReqTeamFight\022\020\n"
    "\010playerid\030\001 \002(\t\022\020\n\010serverid\030\002 \001(\r\022\014\n\004mod"
    "e\030\003 \001(\005\022\024\n\014ticket_count\030\004 \001(\r\"\035\n\rUM_Read"
    "yFight\022\014\n\004time\030\001 \001(\r\"\016\n\014UM_TeamFight\"%\n\021"
    "UM_ReqCancelFight\022\020\n\010playerid\030\001 \002(\t\"\020\n\016U"
    "M_CancelFight\"\030\n\tUM_Logout\022\013\n\003err\030\001 \001(\005\""
    "^\n\014UM_EnterGame\022(\n\004info\030\001 \001(\0132\032.com.suyi"
    "n.proto.role_info\022\022\n\nservertime\030\002 \001(\r\022\020\n"
    "\010fighting\030\003 \001(\010\"7\n\013UM_SyncRole\022(\n\004info\030\001"
    " \001(\0132\032.com.suyin.proto.role_info\"\030\n\nUM_B"
    "uyItem\022\n\n\002id\030\001 \001(\r\"\030\n\nUM_UseItem\022\n\n\002id\030\001"
    " \001(\r\"G\n\rUM_ItemUpdate\022(\n\004list\030\001 \003(\0132\032.co"
    "m.suyin.proto.item_info\022\014\n\004type\030\002 \001(\005\"\"\n"
    "\016UM_UnequipItem\022\020\n\010itemtype\030\001 \001(\005\".\n\016UM_"
    "EquipUpdate\022\020\n\010itemtype\030\001 \001(\005\022\n\n\002id\030\002 \001("
    "\r\"\014\n\nUM_ReqShop\"3\n\007UM_Shop\022(\n\004list\030\001 \003(\013"
    "2\032.com.suyin.proto.shop_item\"\020\n\016UM_HeroL"
    "evelup\",\n\007UM_Hero\022\016\n\006heroid\030\001 \001(\r\022\021\n\ther"
    "olevel\030\002 \001(\r\"\022\n\020UM_ReqServerList\";\n\rUM_S"
    "erverList\022*\n\004list\030\001 \003(\0132\034.com.suyin.prot"
    "o.server_info\"Z\n\020UM_ReqLoginFight\022\020\n\010pla"
    "yerid\030\001 \002(\t\022\020\n\010serverid\030\002 \001(\r\022\014\n\004mode\030\003 "
    "\001(\005\022\024\n\014ticket_count\030\004 \001(\r\"A\n\020UM_LoginFig"
    "htKey\022\020\n\010serverid\030\001 \001(\r\022\013\n\003key\030\002 \001(\r\022\016\n\006"
    "roomid\030\003 \001(\r\"\016\n\014UM_ExitFight\"\030\n\005UM_Gm\022\017\n"
    "\007command\030\001 \001(\t\")\n\013UM_Response\022\r\n\005msgid\030\001"
    " \001(\r\022\013\n\003err\030\002 \001(\005\"8\n\013UM_SetFocus\022\014\n\004type"
    "\030\001 \001(\r\022\013\n\003set\030\002 \001(\r\022\016\n\006roleid\030\003 \001(\r\"\034\n\nU"
    "M_ReqRole\022\016\n\006roleid\030\001 \001(\r\"7\n\013UM_RoleInfo"
    "\022(\n\004info\030\001 \001(\0132\032.com.suyin.proto.role_in"
    "fo\"J\n\nUM_ReqFans\022\014\n\004type\030\001 \001(\005\022\016\n\006range1"
    "\030\002 \001(\r\022\016\n\006range2\030\003 \001(\r\022\016\n\006roleid\030\004 \001(\r\"c"
    "\n\007UM_Fans\022(\n\004list\030\001 \003(\0132\032.com.suyin.prot"
    "o.fans_info\022\016\n\006range1\030\002 \001(\r\022\016\n\006range2\030\003 "
    "\001(\r\022\016\n\006roleid\030\004 \001(\r\",\n\013UM_ReqRanks\022\014\n\004ty"
    "pe\030\001 \001(\005\022\017\n\007subtype\030\002 \001(\005\"4\n\010UM_Ranks\022(\n"
    "\004list\030\001 \003(\0132\032.com.suyin.proto.rank_info\""
    "A\n\rUM_FightLikes\022\022\n\nattentions\030\001 \003(\010\022\r\n\005"
    "likes\030\002 \003(\010\022\r\n\005roles\030\003 \003(\r\"\036\n\014UM_GetTopM"
    "sg\022\016\n\006roleid\030\001 \001(\r\";\n\tUM_GetMsg\022\016\n\006rolei"
    "d\030\001 \001(\r\022\016\n\006range1\030\002 \001(\r\022\016\n\006range2\030\003 \001(\r\""
    "-\n\nUM_SendMsg\022\016\n\006roleid\030\001 \001(\r\022\017\n\007content"
    "\030\002 \001(\t\"8\n\nUM_LikeMsg\022\016\n\006roleid\030\001 \001(\r\022\r\n\005"
    "msgid\030\002 \001(\r\022\013\n\003set\030\003 \001(\005\"D\n\tUM_TopMsg\022\016\n"
    "\006roleid\030\001 \001(\r\022\'\n\004list\030\002 \003(\0132\031.com.suyin."
    "proto.msg_info\"e\n\nUM_MsgList\022\016\n\006roleid\030\001"
    " \001(\r\022\016\n\006range1\030\002 \001(\r\022\016\n\006range2\030\003 \001(\r\022\'\n\004"
    "list\030\004 \003(\0132\031.com.suyin.proto.msg_info\"\034\n"
    "\014UM_GetFriend\022\014\n\004type\030\001 \001(\005\"F\n\nUM_Friend"
    "s\022*\n\004list\030\001 \003(\0132\034.com.suyin.proto.friend"
    "_info\022\014\n\004type\030\003 \001(\005\"/\n\021UM_ResponseInvite"
    "\022\n\n\002ok\030\001 \001(\005\022\016\n\006roleid\030\002 \001(\r\"H\n\014UM_AddFr"
    "iend\022\014\n\004type\030\001 \001(\005\022*\n\004info\030\002 \001(\0132\034.com.s"
    "uyin.proto.friend_info\"/\n\017UM_InviteFrien"
    "d\022\016\n\006roleid\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\"H\n\014UM_Ad"
    "dInvite\022\014\n\004type\030\001 \001(\005\022*\n\004info\030\002 \001(\0132\034.co"
    "m.suyin.proto.friend_info\"H\n\014UM_DelInvit"
    "e\022\014\n\004type\030\001 \001(\005\022*\n\004info\030\002 \001(\0132\034.com.suyi"
    "n.proto.friend_info\"\034\n\nUM_ToBlack\022\016\n\006rol"
    "eid\030\001 \001(\r\"9\n\013UM_AddBlack\022*\n\004info\030\001 \001(\0132\034"
    ".com.suyin.proto.friend_info\"\"\n\020UM_ReqSe"
    "asonRank\022\016\n\006roleid\030\001 \001(\r\";\n\rUM_SeasonRan"
    "k\022*\n\004list\030\001 \003(\0132\034.com.suyin.proto.season"
    "_rank\"\"\n\020UM_ReqGameRecord\022\016\n\006roleid\030\001 \001("
    "\r\";\n\rUM_GameRecord\022*\n\004list\030\001 \003(\0132\034.com.s"
    "uyin.proto.game_record\"8\n\013UM_SetPhoto\022)\n"
    "\004data\030\001 \001(\0132\033.com.suyin.proto.photo_data"
    "\"\036\n\014UM_ReqPhotos\022\016\n\006roleid\030\001 \001(\r\"F\n\tUM_P"
    "hotos\022)\n\004list\030\001 \003(\0132\033.com.suyin.proto.ph"
    "oto_data\022\016\n\006roleid\030\002 \001(\r\"7\n\nUM_SetName\022\014"
    "\n\004name\030\001 \001(\t\022\016\n\006passwd\030\002 \001(\t\022\013\n\003sex\030\003 \001("
    "\r\"\030\n\tUM_SetSex\022\013\n\003sex\030\001 \001(\r\"\032\n\nUM_SetDes"
    "c\022\014\n\004desc\030\001 \001(\t\"+\n\tUM_SetGeo\022\020\n\010province"
    "\030\001 \001(\r\022\014\n\004city\030\002 \001(\r\"(\n\nUM_SetIcon\022\014\n\004ic"
    "on\030\001 \001(\r\022\014\n\004data\030\002 \001(\t\"\016\n\014UM_GetTicket\"\033"
    "\n\013UM_ReqIcons\022\014\n\004list\030\001 \003(\r\"4\n\010UM_Icons\022"
    "(\n\004list\030\001 \003(\0132\032.com.suyin.proto.icon_dat"
    "a\"\t\n\007UM_Sign\"\n\n\010UM_Award\"9\n\014UM_AwardList"
    "\022)\n\004list\030\001 \003(\0132\033.com.suyin.proto.award_i"
    "nfo*\241\014\n\010IDUM_CLI\022\016\n\nIDUM_GATEB\020\000\022\013\n\007IDUM"
    "_Gm\020\001\022\016\n\nIDUM_Login\020\n\022\020\n\014IDUM_BuyItem\020\024\022"
    "\020\n\014IDUM_UseItem\020\025\022\020\n\014IDUM_ReqShop\020\026\022\024\n\020I"
    "DUM_UnequipItem\020\027\022\024\n\020IDUM_HeroLevelup\020\036\022"
    "\026\n\022IDUM_ReqServerList\0202\022\026\n\022IDUM_ReqLogin"
    "Fight\0203\022\022\n\016IDUM_ExitFight\0204\022\021\n\rIDUM_SetF"
    "ocus\020<\022\020\n\014IDUM_ReqRole\020>\022\020\n\014IDUM_ReqFans"
    "\020\?\022\021\n\rIDUM_ReqRanks\020F\022\022\n\016IDUM_GetTopMsg\020"
    "P\022\017\n\013IDUM_GetMsg\020Q\022\020\n\014IDUM_SendMsg\020R\022\020\n\014"
    "IDUM_LikeMsg\020S\022\022\n\016IDUM_GetFriend\020Z\022\025\n\021ID"
    "UM_InviteFriend\020[\022\027\n\023IDUM_ResponseInvite"
    "\020\\\022\020\n\014IDUM_ToBlack\020_\022\026\n\022IDUM_ReqSeasonRa"
    "nk\020d\022\026\n\022IDUM_ReqGameRecord\020e\022\021\n\rIDUM_Set"
    "Photo\020f\022\022\n\016IDUM_ReqPhotos\020g\022\020\n\014IDUM_SetN"
    "ame\020n\022\017\n\013IDUM_SetSex\020o\022\020\n\014IDUM_SetDesc\020p"
    "\022\017\n\013IDUM_SetGeo\020q\022\020\n\014IDUM_SetIcon\020r\022\022\n\016I"
    "DUM_GetTicket\020s\022\r\n\tIDUM_Sign\020t\022\016\n\nIDUM_A"
    "ward\020u\022\021\n\rIDUM_ReqIcons\020x\022\023\n\017IDUM_BindAc"
    "cout\020y\022\023\n\017IDUM_ReqVersion\020z\022\023\n\017IDUM_ReqS"
    "howMsg\020{\022\024\n\020IDUM_ReqActivity\020|\022\026\n\021IDUM_R"
    "eqReconnect\020\202\001\022\026\n\021IDUM_ReqTeamFight\020\203\001\022\030"
    "\n\023IDUM_ReqCancelFight\020\204\001\022\017\n\nIDUM_GATEE\020\347"
    "\007\022\016\n\tIDUM_CLIB\020\350\007\022\022\n\rIDUM_Response\020\351\007\022\020\n"
    "\013IDUM_Logout\020\362\007\022\023\n\016IDUM_EnterGame\020\363\007\022\022\n\r"
    "IDUM_SyncRole\020\364\007\022\024\n\017IDUM_ItemUpdate\020\374\007\022\016"
    "\n\tIDUM_Shop\020\376\007\022\025\n\020IDUM_EquipUpdate\020\377\007\022\016\n"
    "\tIDUM_Hero\020\206\010\022\024\n\017IDUM_ServerList\020\232\010\022\027\n\022I"
    "DUM_LoginFightKey\020\233\010\022\022\n\rIDUM_RoleInfo\020\246\010"
    "\022\016\n\tIDUM_Fans\020\247\010\022\017\n\nIDUM_Ranks\020\256\010\022\024\n\017IDU"
    "M_FightLikes\020\257\010\022\020\n\013IDUM_TopMsg\020\270\010\022\021\n\014IDU"
    "M_MsgList\020\271\010\022\021\n\014IDUM_Friends\020\302\010\022\023\n\016IDUM_"
    "AddFriend\020\303\010\022\023\n\016IDUM_AddInvite\020\304\010\022\023\n\016IDU"
    "M_DelInvite\020\305\010\022\022\n\rIDUM_AddBlack\020\307\010\022\024\n\017ID"
    "UM_SeasonRank\020\314\010\022\024\n\017IDUM_GameRecord\020\315\010\022\020"
    "\n\013IDUM_Photos\020\317\010\022\023\n\016IDUM_AwardList\020\335\010\022\017\n"
    "\nIDUM_Icons\020\340\010\022\021\n\014IDUM_Version\020\342\010\022\021\n\014IDU"
    "M_ShowMsg\020\343\010\022\022\n\rIDUM_Activity\020\344\010\022\023\n\016IDUM"
    "_Reconnect\020\352\010\022\023\n\016IDUM_TeamFight\020\353\010\022\025\n\020ID"
    "UM_CancelFight\020\354\010\022\024\n\017IDUM_ReadyFight\020\357\010\022"
    "\016\n\tIDUM_CLIE\020\317\017", 5255);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_client.proto", &protobuf_RegisterTypes);
  UM_Login::default_instance_ = new UM_Login();
  UM_BindAccout::default_instance_ = new UM_BindAccout();
  UM_ReqVersion::default_instance_ = new UM_ReqVersion();
  UM_Version::default_instance_ = new UM_Version();
  UM_ReqShowMsg::default_instance_ = new UM_ReqShowMsg();
  UM_ShoMsg::default_instance_ = new UM_ShoMsg();
  UM_ReqActivity::default_instance_ = new UM_ReqActivity();
  UM_Activity::default_instance_ = new UM_Activity();
  UM_Activities::default_instance_ = new UM_Activities();
  UM_ReqReconncet::default_instance_ = new UM_ReqReconncet();
  UM_Reconnect::default_instance_ = new UM_Reconnect();
  UM_ReqTeamFight::default_instance_ = new UM_ReqTeamFight();
  UM_ReadyFight::default_instance_ = new UM_ReadyFight();
  UM_TeamFight::default_instance_ = new UM_TeamFight();
  UM_ReqCancelFight::default_instance_ = new UM_ReqCancelFight();
  UM_CancelFight::default_instance_ = new UM_CancelFight();
  UM_Logout::default_instance_ = new UM_Logout();
  UM_EnterGame::default_instance_ = new UM_EnterGame();
  UM_SyncRole::default_instance_ = new UM_SyncRole();
  UM_BuyItem::default_instance_ = new UM_BuyItem();
  UM_UseItem::default_instance_ = new UM_UseItem();
  UM_ItemUpdate::default_instance_ = new UM_ItemUpdate();
  UM_UnequipItem::default_instance_ = new UM_UnequipItem();
  UM_EquipUpdate::default_instance_ = new UM_EquipUpdate();
  UM_ReqShop::default_instance_ = new UM_ReqShop();
  UM_Shop::default_instance_ = new UM_Shop();
  UM_HeroLevelup::default_instance_ = new UM_HeroLevelup();
  UM_Hero::default_instance_ = new UM_Hero();
  UM_ReqServerList::default_instance_ = new UM_ReqServerList();
  UM_ServerList::default_instance_ = new UM_ServerList();
  UM_ReqLoginFight::default_instance_ = new UM_ReqLoginFight();
  UM_LoginFightKey::default_instance_ = new UM_LoginFightKey();
  UM_ExitFight::default_instance_ = new UM_ExitFight();
  UM_Gm::default_instance_ = new UM_Gm();
  UM_Response::default_instance_ = new UM_Response();
  UM_SetFocus::default_instance_ = new UM_SetFocus();
  UM_ReqRole::default_instance_ = new UM_ReqRole();
  UM_RoleInfo::default_instance_ = new UM_RoleInfo();
  UM_ReqFans::default_instance_ = new UM_ReqFans();
  UM_Fans::default_instance_ = new UM_Fans();
  UM_ReqRanks::default_instance_ = new UM_ReqRanks();
  UM_Ranks::default_instance_ = new UM_Ranks();
  UM_FightLikes::default_instance_ = new UM_FightLikes();
  UM_GetTopMsg::default_instance_ = new UM_GetTopMsg();
  UM_GetMsg::default_instance_ = new UM_GetMsg();
  UM_SendMsg::default_instance_ = new UM_SendMsg();
  UM_LikeMsg::default_instance_ = new UM_LikeMsg();
  UM_TopMsg::default_instance_ = new UM_TopMsg();
  UM_MsgList::default_instance_ = new UM_MsgList();
  UM_GetFriend::default_instance_ = new UM_GetFriend();
  UM_Friends::default_instance_ = new UM_Friends();
  UM_ResponseInvite::default_instance_ = new UM_ResponseInvite();
  UM_AddFriend::default_instance_ = new UM_AddFriend();
  UM_InviteFriend::default_instance_ = new UM_InviteFriend();
  UM_AddInvite::default_instance_ = new UM_AddInvite();
  UM_DelInvite::default_instance_ = new UM_DelInvite();
  UM_ToBlack::default_instance_ = new UM_ToBlack();
  UM_AddBlack::default_instance_ = new UM_AddBlack();
  UM_ReqSeasonRank::default_instance_ = new UM_ReqSeasonRank();
  UM_SeasonRank::default_instance_ = new UM_SeasonRank();
  UM_ReqGameRecord::default_instance_ = new UM_ReqGameRecord();
  UM_GameRecord::default_instance_ = new UM_GameRecord();
  UM_SetPhoto::default_instance_ = new UM_SetPhoto();
  UM_ReqPhotos::default_instance_ = new UM_ReqPhotos();
  UM_Photos::default_instance_ = new UM_Photos();
  UM_SetName::default_instance_ = new UM_SetName();
  UM_SetSex::default_instance_ = new UM_SetSex();
  UM_SetDesc::default_instance_ = new UM_SetDesc();
  UM_SetGeo::default_instance_ = new UM_SetGeo();
  UM_SetIcon::default_instance_ = new UM_SetIcon();
  UM_GetTicket::default_instance_ = new UM_GetTicket();
  UM_ReqIcons::default_instance_ = new UM_ReqIcons();
  UM_Icons::default_instance_ = new UM_Icons();
  UM_Sign::default_instance_ = new UM_Sign();
  UM_Award::default_instance_ = new UM_Award();
  UM_AwardList::default_instance_ = new UM_AwardList();
  UM_Login::default_instance_->InitAsDefaultInstance();
  UM_BindAccout::default_instance_->InitAsDefaultInstance();
  UM_ReqVersion::default_instance_->InitAsDefaultInstance();
  UM_Version::default_instance_->InitAsDefaultInstance();
  UM_ReqShowMsg::default_instance_->InitAsDefaultInstance();
  UM_ShoMsg::default_instance_->InitAsDefaultInstance();
  UM_ReqActivity::default_instance_->InitAsDefaultInstance();
  UM_Activity::default_instance_->InitAsDefaultInstance();
  UM_Activities::default_instance_->InitAsDefaultInstance();
  UM_ReqReconncet::default_instance_->InitAsDefaultInstance();
  UM_Reconnect::default_instance_->InitAsDefaultInstance();
  UM_ReqTeamFight::default_instance_->InitAsDefaultInstance();
  UM_ReadyFight::default_instance_->InitAsDefaultInstance();
  UM_TeamFight::default_instance_->InitAsDefaultInstance();
  UM_ReqCancelFight::default_instance_->InitAsDefaultInstance();
  UM_CancelFight::default_instance_->InitAsDefaultInstance();
  UM_Logout::default_instance_->InitAsDefaultInstance();
  UM_EnterGame::default_instance_->InitAsDefaultInstance();
  UM_SyncRole::default_instance_->InitAsDefaultInstance();
  UM_BuyItem::default_instance_->InitAsDefaultInstance();
  UM_UseItem::default_instance_->InitAsDefaultInstance();
  UM_ItemUpdate::default_instance_->InitAsDefaultInstance();
  UM_UnequipItem::default_instance_->InitAsDefaultInstance();
  UM_EquipUpdate::default_instance_->InitAsDefaultInstance();
  UM_ReqShop::default_instance_->InitAsDefaultInstance();
  UM_Shop::default_instance_->InitAsDefaultInstance();
  UM_HeroLevelup::default_instance_->InitAsDefaultInstance();
  UM_Hero::default_instance_->InitAsDefaultInstance();
  UM_ReqServerList::default_instance_->InitAsDefaultInstance();
  UM_ServerList::default_instance_->InitAsDefaultInstance();
  UM_ReqLoginFight::default_instance_->InitAsDefaultInstance();
  UM_LoginFightKey::default_instance_->InitAsDefaultInstance();
  UM_ExitFight::default_instance_->InitAsDefaultInstance();
  UM_Gm::default_instance_->InitAsDefaultInstance();
  UM_Response::default_instance_->InitAsDefaultInstance();
  UM_SetFocus::default_instance_->InitAsDefaultInstance();
  UM_ReqRole::default_instance_->InitAsDefaultInstance();
  UM_RoleInfo::default_instance_->InitAsDefaultInstance();
  UM_ReqFans::default_instance_->InitAsDefaultInstance();
  UM_Fans::default_instance_->InitAsDefaultInstance();
  UM_ReqRanks::default_instance_->InitAsDefaultInstance();
  UM_Ranks::default_instance_->InitAsDefaultInstance();
  UM_FightLikes::default_instance_->InitAsDefaultInstance();
  UM_GetTopMsg::default_instance_->InitAsDefaultInstance();
  UM_GetMsg::default_instance_->InitAsDefaultInstance();
  UM_SendMsg::default_instance_->InitAsDefaultInstance();
  UM_LikeMsg::default_instance_->InitAsDefaultInstance();
  UM_TopMsg::default_instance_->InitAsDefaultInstance();
  UM_MsgList::default_instance_->InitAsDefaultInstance();
  UM_GetFriend::default_instance_->InitAsDefaultInstance();
  UM_Friends::default_instance_->InitAsDefaultInstance();
  UM_ResponseInvite::default_instance_->InitAsDefaultInstance();
  UM_AddFriend::default_instance_->InitAsDefaultInstance();
  UM_InviteFriend::default_instance_->InitAsDefaultInstance();
  UM_AddInvite::default_instance_->InitAsDefaultInstance();
  UM_DelInvite::default_instance_->InitAsDefaultInstance();
  UM_ToBlack::default_instance_->InitAsDefaultInstance();
  UM_AddBlack::default_instance_->InitAsDefaultInstance();
  UM_ReqSeasonRank::default_instance_->InitAsDefaultInstance();
  UM_SeasonRank::default_instance_->InitAsDefaultInstance();
  UM_ReqGameRecord::default_instance_->InitAsDefaultInstance();
  UM_GameRecord::default_instance_->InitAsDefaultInstance();
  UM_SetPhoto::default_instance_->InitAsDefaultInstance();
  UM_ReqPhotos::default_instance_->InitAsDefaultInstance();
  UM_Photos::default_instance_->InitAsDefaultInstance();
  UM_SetName::default_instance_->InitAsDefaultInstance();
  UM_SetSex::default_instance_->InitAsDefaultInstance();
  UM_SetDesc::default_instance_->InitAsDefaultInstance();
  UM_SetGeo::default_instance_->InitAsDefaultInstance();
  UM_SetIcon::default_instance_->InitAsDefaultInstance();
  UM_GetTicket::default_instance_->InitAsDefaultInstance();
  UM_ReqIcons::default_instance_->InitAsDefaultInstance();
  UM_Icons::default_instance_->InitAsDefaultInstance();
  UM_Sign::default_instance_->InitAsDefaultInstance();
  UM_Award::default_instance_->InitAsDefaultInstance();
  UM_AwardList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5fclient_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5fclient_2eproto {
  StaticDescriptorInitializer_msg_5fclient_2eproto() {
    protobuf_AddDesc_msg_5fclient_2eproto();
  }
} static_descriptor_initializer_msg_5fclient_2eproto_;
const ::google::protobuf::EnumDescriptor* IDUM_CLI_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IDUM_CLI_descriptor_;
}
bool IDUM_CLI_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 10:
    case 20:
    case 21:
    case 22:
    case 23:
    case 30:
    case 50:
    case 51:
    case 52:
    case 60:
    case 62:
    case 63:
    case 70:
    case 80:
    case 81:
    case 82:
    case 83:
    case 90:
    case 91:
    case 92:
    case 95:
    case 100:
    case 101:
    case 102:
    case 103:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 130:
    case 131:
    case 132:
    case 999:
    case 1000:
    case 1001:
    case 1010:
    case 1011:
    case 1012:
    case 1020:
    case 1022:
    case 1023:
    case 1030:
    case 1050:
    case 1051:
    case 1062:
    case 1063:
    case 1070:
    case 1071:
    case 1080:
    case 1081:
    case 1090:
    case 1091:
    case 1092:
    case 1093:
    case 1095:
    case 1100:
    case 1101:
    case 1103:
    case 1117:
    case 1120:
    case 1122:
    case 1123:
    case 1124:
    case 1130:
    case 1131:
    case 1132:
    case 1135:
    case 1999:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int UM_Login::kAccFieldNumber;
const int UM_Login::kPasswdFieldNumber;
#endif  // !_MSC_VER

UM_Login::UM_Login()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_Login)
}

void UM_Login::InitAsDefaultInstance() {
}

UM_Login::UM_Login(const UM_Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_Login)
}

void UM_Login::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  acc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_Login::~UM_Login() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_Login)
  SharedDtor();
}

void UM_Login::SharedDtor() {
  if (acc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete acc_;
  }
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void UM_Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_Login_descriptor_;
}

const UM_Login& UM_Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_Login* UM_Login::default_instance_ = NULL;

UM_Login* UM_Login::New() const {
  return new UM_Login;
}

void UM_Login::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_acc()) {
      if (acc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        acc_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_Login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string acc = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->acc().data(), this->acc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "acc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_passwd;
        break;
      }

      // optional string passwd = 2;
      case 2: {
        if (tag == 18) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "passwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_Login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_Login)
  return false;
#undef DO_
}

void UM_Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_Login)
  // optional string acc = 1;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->acc(), output);
  }

  // optional string passwd = 2;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->passwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_Login)
}

::google::protobuf::uint8* UM_Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_Login)
  // optional string acc = 1;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->acc(), target);
  }

  // optional string passwd = 2;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->passwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_Login)
  return target;
}

int UM_Login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string acc = 1;
    if (has_acc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acc());
    }

    // optional string passwd = 2;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_Login::MergeFrom(const UM_Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acc()) {
      set_acc(from.acc());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_Login::CopyFrom(const UM_Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_Login::IsInitialized() const {

  return true;
}

void UM_Login::Swap(UM_Login* other) {
  if (other != this) {
    std::swap(acc_, other->acc_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_Login_descriptor_;
  metadata.reflection = UM_Login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_BindAccout::kAccFieldNumber;
const int UM_BindAccout::kPasswdFieldNumber;
const int UM_BindAccout::kMailFieldNumber;
#endif  // !_MSC_VER

UM_BindAccout::UM_BindAccout()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_BindAccout)
}

void UM_BindAccout::InitAsDefaultInstance() {
}

UM_BindAccout::UM_BindAccout(const UM_BindAccout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_BindAccout)
}

void UM_BindAccout::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  acc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mail_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_BindAccout::~UM_BindAccout() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_BindAccout)
  SharedDtor();
}

void UM_BindAccout::SharedDtor() {
  if (acc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete acc_;
  }
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (mail_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mail_;
  }
  if (this != default_instance_) {
  }
}

void UM_BindAccout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_BindAccout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_BindAccout_descriptor_;
}

const UM_BindAccout& UM_BindAccout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_BindAccout* UM_BindAccout::default_instance_ = NULL;

UM_BindAccout* UM_BindAccout::New() const {
  return new UM_BindAccout;
}

void UM_BindAccout::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_acc()) {
      if (acc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        acc_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        passwd_->clear();
      }
    }
    if (has_mail()) {
      if (mail_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mail_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_BindAccout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_BindAccout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string acc = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->acc().data(), this->acc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "acc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_passwd;
        break;
      }

      // required string passwd = 2;
      case 2: {
        if (tag == 18) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "passwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mail;
        break;
      }

      // required string mail = 3;
      case 3: {
        if (tag == 26) {
         parse_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mail().data(), this->mail().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mail");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_BindAccout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_BindAccout)
  return false;
#undef DO_
}

void UM_BindAccout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_BindAccout)
  // required string acc = 1;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->acc(), output);
  }

  // required string passwd = 2;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->passwd(), output);
  }

  // required string mail = 3;
  if (has_mail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mail().data(), this->mail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_BindAccout)
}

::google::protobuf::uint8* UM_BindAccout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_BindAccout)
  // required string acc = 1;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->acc(), target);
  }

  // required string passwd = 2;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->passwd(), target);
  }

  // required string mail = 3;
  if (has_mail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mail().data(), this->mail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_BindAccout)
  return target;
}

int UM_BindAccout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string acc = 1;
    if (has_acc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acc());
    }

    // required string passwd = 2;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }

    // required string mail = 3;
    if (has_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_BindAccout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_BindAccout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_BindAccout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_BindAccout::MergeFrom(const UM_BindAccout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acc()) {
      set_acc(from.acc());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
    if (from.has_mail()) {
      set_mail(from.mail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_BindAccout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_BindAccout::CopyFrom(const UM_BindAccout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_BindAccout::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UM_BindAccout::Swap(UM_BindAccout* other) {
  if (other != this) {
    std::swap(acc_, other->acc_);
    std::swap(passwd_, other->passwd_);
    std::swap(mail_, other->mail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_BindAccout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_BindAccout_descriptor_;
  metadata.reflection = UM_BindAccout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_ReqVersion::kTypeFieldNumber;
#endif  // !_MSC_VER

UM_ReqVersion::UM_ReqVersion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_ReqVersion)
}

void UM_ReqVersion::InitAsDefaultInstance() {
}

UM_ReqVersion::UM_ReqVersion(const UM_ReqVersion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_ReqVersion)
}

void UM_ReqVersion::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_ReqVersion::~UM_ReqVersion() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_ReqVersion)
  SharedDtor();
}

void UM_ReqVersion::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void UM_ReqVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_ReqVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_ReqVersion_descriptor_;
}

const UM_ReqVersion& UM_ReqVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_ReqVersion* UM_ReqVersion::default_instance_ = NULL;

UM_ReqVersion* UM_ReqVersion::New() const {
  return new UM_ReqVersion;
}

void UM_ReqVersion::Clear() {
  if (has_type()) {
    if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      type_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_ReqVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_ReqVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_ReqVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_ReqVersion)
  return false;
#undef DO_
}

void UM_ReqVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_ReqVersion)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_ReqVersion)
}

::google::protobuf::uint8* UM_ReqVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_ReqVersion)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_ReqVersion)
  return target;
}

int UM_ReqVersion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_ReqVersion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_ReqVersion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_ReqVersion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_ReqVersion::MergeFrom(const UM_ReqVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_ReqVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_ReqVersion::CopyFrom(const UM_ReqVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_ReqVersion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UM_ReqVersion::Swap(UM_ReqVersion* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_ReqVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_ReqVersion_descriptor_;
  metadata.reflection = UM_ReqVersion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_Version::kVersionFieldNumber;
const int UM_Version::kUrlFieldNumber;
#endif  // !_MSC_VER

UM_Version::UM_Version()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_Version)
}

void UM_Version::InitAsDefaultInstance() {
}

UM_Version::UM_Version(const UM_Version& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_Version)
}

void UM_Version::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_Version::~UM_Version() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_Version)
  SharedDtor();
}

void UM_Version::SharedDtor() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void UM_Version::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_Version::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_Version_descriptor_;
}

const UM_Version& UM_Version::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_Version* UM_Version::default_instance_ = NULL;

UM_Version* UM_Version::New() const {
  return new UM_Version;
}

void UM_Version::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_Version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_Version)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // required string url = 2;
      case 2: {
        if (tag == 18) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_Version)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_Version)
  return false;
#undef DO_
}

void UM_Version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_Version)
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // required string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_Version)
}

::google::protobuf::uint8* UM_Version::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_Version)
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // required string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_Version)
  return target;
}

int UM_Version::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // required string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_Version::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_Version* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_Version*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_Version::MergeFrom(const UM_Version& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_Version::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_Version::CopyFrom(const UM_Version& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_Version::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UM_Version::Swap(UM_Version* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_Version::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_Version_descriptor_;
  metadata.reflection = UM_Version_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_ReqShowMsg::kVersionFieldNumber;
#endif  // !_MSC_VER

UM_ReqShowMsg::UM_ReqShowMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_ReqShowMsg)
}

void UM_ReqShowMsg::InitAsDefaultInstance() {
}

UM_ReqShowMsg::UM_ReqShowMsg(const UM_ReqShowMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_ReqShowMsg)
}

void UM_ReqShowMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_ReqShowMsg::~UM_ReqShowMsg() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_ReqShowMsg)
  SharedDtor();
}

void UM_ReqShowMsg::SharedDtor() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void UM_ReqShowMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_ReqShowMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_ReqShowMsg_descriptor_;
}

const UM_ReqShowMsg& UM_ReqShowMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_ReqShowMsg* UM_ReqShowMsg::default_instance_ = NULL;

UM_ReqShowMsg* UM_ReqShowMsg::New() const {
  return new UM_ReqShowMsg;
}

void UM_ReqShowMsg::Clear() {
  if (has_version()) {
    if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      version_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_ReqShowMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_ReqShowMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_ReqShowMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_ReqShowMsg)
  return false;
#undef DO_
}

void UM_ReqShowMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_ReqShowMsg)
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_ReqShowMsg)
}

::google::protobuf::uint8* UM_ReqShowMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_ReqShowMsg)
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_ReqShowMsg)
  return target;
}

int UM_ReqShowMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_ReqShowMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_ReqShowMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_ReqShowMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_ReqShowMsg::MergeFrom(const UM_ReqShowMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_ReqShowMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_ReqShowMsg::CopyFrom(const UM_ReqShowMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_ReqShowMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UM_ReqShowMsg::Swap(UM_ReqShowMsg* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_ReqShowMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_ReqShowMsg_descriptor_;
  metadata.reflection = UM_ReqShowMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_ShoMsg::kActivityFieldNumber;
const int UM_ShoMsg::kChatFieldNumber;
const int UM_ShoMsg::kPvpFieldNumber;
const int UM_ShoMsg::kSybtnFieldNumber;
#endif  // !_MSC_VER

UM_ShoMsg::UM_ShoMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_ShoMsg)
}

void UM_ShoMsg::InitAsDefaultInstance() {
}

UM_ShoMsg::UM_ShoMsg(const UM_ShoMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_ShoMsg)
}

void UM_ShoMsg::SharedCtor() {
  _cached_size_ = 0;
  activity_ = false;
  chat_ = false;
  pvp_ = false;
  sybtn_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_ShoMsg::~UM_ShoMsg() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_ShoMsg)
  SharedDtor();
}

void UM_ShoMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_ShoMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_ShoMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_ShoMsg_descriptor_;
}

const UM_ShoMsg& UM_ShoMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_ShoMsg* UM_ShoMsg::default_instance_ = NULL;

UM_ShoMsg* UM_ShoMsg::New() const {
  return new UM_ShoMsg;
}

void UM_ShoMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UM_ShoMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(activity_, sybtn_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_ShoMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_ShoMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool activity = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &activity_)));
          set_has_activity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_chat;
        break;
      }

      // optional bool chat = 2;
      case 2: {
        if (tag == 16) {
         parse_chat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chat_)));
          set_has_chat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pvp;
        break;
      }

      // optional bool pvp = 3;
      case 3: {
        if (tag == 24) {
         parse_pvp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pvp_)));
          set_has_pvp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sybtn;
        break;
      }

      // optional bool sybtn = 4;
      case 4: {
        if (tag == 32) {
         parse_sybtn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sybtn_)));
          set_has_sybtn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_ShoMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_ShoMsg)
  return false;
#undef DO_
}

void UM_ShoMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_ShoMsg)
  // optional bool activity = 1;
  if (has_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->activity(), output);
  }

  // optional bool chat = 2;
  if (has_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->chat(), output);
  }

  // optional bool pvp = 3;
  if (has_pvp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->pvp(), output);
  }

  // optional bool sybtn = 4;
  if (has_sybtn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->sybtn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_ShoMsg)
}

::google::protobuf::uint8* UM_ShoMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_ShoMsg)
  // optional bool activity = 1;
  if (has_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->activity(), target);
  }

  // optional bool chat = 2;
  if (has_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->chat(), target);
  }

  // optional bool pvp = 3;
  if (has_pvp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->pvp(), target);
  }

  // optional bool sybtn = 4;
  if (has_sybtn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->sybtn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_ShoMsg)
  return target;
}

int UM_ShoMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool activity = 1;
    if (has_activity()) {
      total_size += 1 + 1;
    }

    // optional bool chat = 2;
    if (has_chat()) {
      total_size += 1 + 1;
    }

    // optional bool pvp = 3;
    if (has_pvp()) {
      total_size += 1 + 1;
    }

    // optional bool sybtn = 4;
    if (has_sybtn()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_ShoMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_ShoMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_ShoMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_ShoMsg::MergeFrom(const UM_ShoMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity()) {
      set_activity(from.activity());
    }
    if (from.has_chat()) {
      set_chat(from.chat());
    }
    if (from.has_pvp()) {
      set_pvp(from.pvp());
    }
    if (from.has_sybtn()) {
      set_sybtn(from.sybtn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_ShoMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_ShoMsg::CopyFrom(const UM_ShoMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_ShoMsg::IsInitialized() const {

  return true;
}

void UM_ShoMsg::Swap(UM_ShoMsg* other) {
  if (other != this) {
    std::swap(activity_, other->activity_);
    std::swap(chat_, other->chat_);
    std::swap(pvp_, other->pvp_);
    std::swap(sybtn_, other->sybtn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_ShoMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_ShoMsg_descriptor_;
  metadata.reflection = UM_ShoMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UM_ReqActivity::UM_ReqActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_ReqActivity)
}

void UM_ReqActivity::InitAsDefaultInstance() {
}

UM_ReqActivity::UM_ReqActivity(const UM_ReqActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_ReqActivity)
}

void UM_ReqActivity::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_ReqActivity::~UM_ReqActivity() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_ReqActivity)
  SharedDtor();
}

void UM_ReqActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_ReqActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_ReqActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_ReqActivity_descriptor_;
}

const UM_ReqActivity& UM_ReqActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_ReqActivity* UM_ReqActivity::default_instance_ = NULL;

UM_ReqActivity* UM_ReqActivity::New() const {
  return new UM_ReqActivity;
}

void UM_ReqActivity::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_ReqActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_ReqActivity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_ReqActivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_ReqActivity)
  return false;
#undef DO_
}

void UM_ReqActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_ReqActivity)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_ReqActivity)
}

::google::protobuf::uint8* UM_ReqActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_ReqActivity)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_ReqActivity)
  return target;
}

int UM_ReqActivity::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_ReqActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_ReqActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_ReqActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_ReqActivity::MergeFrom(const UM_ReqActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_ReqActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_ReqActivity::CopyFrom(const UM_ReqActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_ReqActivity::IsInitialized() const {

  return true;
}

void UM_ReqActivity::Swap(UM_ReqActivity* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_ReqActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_ReqActivity_descriptor_;
  metadata.reflection = UM_ReqActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_Activity::kIdFieldNumber;
const int UM_Activity::kUrlFieldNumber;
#endif  // !_MSC_VER

UM_Activity::UM_Activity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_Activity)
}

void UM_Activity::InitAsDefaultInstance() {
}

UM_Activity::UM_Activity(const UM_Activity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_Activity)
}

void UM_Activity::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_Activity::~UM_Activity() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_Activity)
  SharedDtor();
}

void UM_Activity::SharedDtor() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void UM_Activity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_Activity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_Activity_descriptor_;
}

const UM_Activity& UM_Activity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_Activity* UM_Activity::default_instance_ = NULL;

UM_Activity* UM_Activity::New() const {
  return new UM_Activity;
}

void UM_Activity::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_Activity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_Activity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // required string url = 2;
      case 2: {
        if (tag == 18) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_Activity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_Activity)
  return false;
#undef DO_
}

void UM_Activity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_Activity)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_Activity)
}

::google::protobuf::uint8* UM_Activity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_Activity)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_Activity)
  return target;
}

int UM_Activity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_Activity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_Activity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_Activity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_Activity::MergeFrom(const UM_Activity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_Activity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_Activity::CopyFrom(const UM_Activity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_Activity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UM_Activity::Swap(UM_Activity* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_Activity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_Activity_descriptor_;
  metadata.reflection = UM_Activity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_Activities::kActivitesFieldNumber;
#endif  // !_MSC_VER

UM_Activities::UM_Activities()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_Activities)
}

void UM_Activities::InitAsDefaultInstance() {
}

UM_Activities::UM_Activities(const UM_Activities& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_Activities)
}

void UM_Activities::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_Activities::~UM_Activities() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_Activities)
  SharedDtor();
}

void UM_Activities::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_Activities::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_Activities::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_Activities_descriptor_;
}

const UM_Activities& UM_Activities::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_Activities* UM_Activities::default_instance_ = NULL;

UM_Activities* UM_Activities::New() const {
  return new UM_Activities;
}

void UM_Activities::Clear() {
  activites_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_Activities::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_Activities)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.suyin.proto.UM_Activity activites = 1;
      case 1: {
        if (tag == 10) {
         parse_activites:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activites()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_activites;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_Activities)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_Activities)
  return false;
#undef DO_
}

void UM_Activities::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_Activities)
  // repeated .com.suyin.proto.UM_Activity activites = 1;
  for (int i = 0; i < this->activites_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activites(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_Activities)
}

::google::protobuf::uint8* UM_Activities::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_Activities)
  // repeated .com.suyin.proto.UM_Activity activites = 1;
  for (int i = 0; i < this->activites_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activites(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_Activities)
  return target;
}

int UM_Activities::ByteSize() const {
  int total_size = 0;

  // repeated .com.suyin.proto.UM_Activity activites = 1;
  total_size += 1 * this->activites_size();
  for (int i = 0; i < this->activites_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activites(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_Activities::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_Activities* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_Activities*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_Activities::MergeFrom(const UM_Activities& from) {
  GOOGLE_CHECK_NE(&from, this);
  activites_.MergeFrom(from.activites_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_Activities::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_Activities::CopyFrom(const UM_Activities& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_Activities::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->activites())) return false;
  return true;
}

void UM_Activities::Swap(UM_Activities* other) {
  if (other != this) {
    activites_.Swap(&other->activites_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_Activities::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_Activities_descriptor_;
  metadata.reflection = UM_Activities_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_ReqReconncet::kPlayeridFieldNumber;
#endif  // !_MSC_VER

UM_ReqReconncet::UM_ReqReconncet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_ReqReconncet)
}

void UM_ReqReconncet::InitAsDefaultInstance() {
}

UM_ReqReconncet::UM_ReqReconncet(const UM_ReqReconncet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_ReqReconncet)
}

void UM_ReqReconncet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_ReqReconncet::~UM_ReqReconncet() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_ReqReconncet)
  SharedDtor();
}

void UM_ReqReconncet::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void UM_ReqReconncet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_ReqReconncet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_ReqReconncet_descriptor_;
}

const UM_ReqReconncet& UM_ReqReconncet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_ReqReconncet* UM_ReqReconncet::default_instance_ = NULL;

UM_ReqReconncet* UM_ReqReconncet::New() const {
  return new UM_ReqReconncet;
}

void UM_ReqReconncet::Clear() {
  if (has_playerid()) {
    if (playerid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      playerid_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_ReqReconncet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_ReqReconncet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "playerid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_ReqReconncet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_ReqReconncet)
  return false;
#undef DO_
}

void UM_ReqReconncet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_ReqReconncet)
  // required string playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playerid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_ReqReconncet)
}

::google::protobuf::uint8* UM_ReqReconncet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_ReqReconncet)
  // required string playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playerid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_ReqReconncet)
  return target;
}

int UM_ReqReconncet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_ReqReconncet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_ReqReconncet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_ReqReconncet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_ReqReconncet::MergeFrom(const UM_ReqReconncet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_ReqReconncet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_ReqReconncet::CopyFrom(const UM_ReqReconncet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_ReqReconncet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UM_ReqReconncet::Swap(UM_ReqReconncet* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_ReqReconncet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_ReqReconncet_descriptor_;
  metadata.reflection = UM_ReqReconncet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_Reconnect::kConnectFieldNumber;
#endif  // !_MSC_VER

UM_Reconnect::UM_Reconnect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_Reconnect)
}

void UM_Reconnect::InitAsDefaultInstance() {
}

UM_Reconnect::UM_Reconnect(const UM_Reconnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_Reconnect)
}

void UM_Reconnect::SharedCtor() {
  _cached_size_ = 0;
  connect_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_Reconnect::~UM_Reconnect() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_Reconnect)
  SharedDtor();
}

void UM_Reconnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_Reconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_Reconnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_Reconnect_descriptor_;
}

const UM_Reconnect& UM_Reconnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_Reconnect* UM_Reconnect::default_instance_ = NULL;

UM_Reconnect* UM_Reconnect::New() const {
  return new UM_Reconnect;
}

void UM_Reconnect::Clear() {
  connect_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_Reconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_Reconnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool connect = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connect_)));
          set_has_connect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_Reconnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_Reconnect)
  return false;
#undef DO_
}

void UM_Reconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_Reconnect)
  // required bool connect = 1;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->connect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_Reconnect)
}

::google::protobuf::uint8* UM_Reconnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_Reconnect)
  // required bool connect = 1;
  if (has_connect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->connect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_Reconnect)
  return target;
}

int UM_Reconnect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool connect = 1;
    if (has_connect()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_Reconnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_Reconnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_Reconnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_Reconnect::MergeFrom(const UM_Reconnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connect()) {
      set_connect(from.connect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_Reconnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_Reconnect::CopyFrom(const UM_Reconnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_Reconnect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UM_Reconnect::Swap(UM_Reconnect* other) {
  if (other != this) {
    std::swap(connect_, other->connect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_Reconnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_Reconnect_descriptor_;
  metadata.reflection = UM_Reconnect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_ReqTeamFight::kPlayeridFieldNumber;
const int UM_ReqTeamFight::kServeridFieldNumber;
const int UM_ReqTeamFight::kModeFieldNumber;
const int UM_ReqTeamFight::kTicketCountFieldNumber;
#endif  // !_MSC_VER

UM_ReqTeamFight::UM_ReqTeamFight()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_ReqTeamFight)
}

void UM_ReqTeamFight::InitAsDefaultInstance() {
}

UM_ReqTeamFight::UM_ReqTeamFight(const UM_ReqTeamFight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_ReqTeamFight)
}

void UM_ReqTeamFight::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverid_ = 0u;
  mode_ = 0;
  ticket_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_ReqTeamFight::~UM_ReqTeamFight() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_ReqTeamFight)
  SharedDtor();
}

void UM_ReqTeamFight::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void UM_ReqTeamFight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_ReqTeamFight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_ReqTeamFight_descriptor_;
}

const UM_ReqTeamFight& UM_ReqTeamFight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_ReqTeamFight* UM_ReqTeamFight::default_instance_ = NULL;

UM_ReqTeamFight* UM_ReqTeamFight::New() const {
  return new UM_ReqTeamFight;
}

void UM_ReqTeamFight::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UM_ReqTeamFight*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(serverid_, ticket_count_);
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        playerid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_ReqTeamFight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_ReqTeamFight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "playerid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // optional uint32 serverid = 2;
      case 2: {
        if (tag == 16) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mode;
        break;
      }

      // optional int32 mode = 3;
      case 3: {
        if (tag == 24) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ticket_count;
        break;
      }

      // optional uint32 ticket_count = 4;
      case 4: {
        if (tag == 32) {
         parse_ticket_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticket_count_)));
          set_has_ticket_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_ReqTeamFight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_ReqTeamFight)
  return false;
#undef DO_
}

void UM_ReqTeamFight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_ReqTeamFight)
  // required string playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playerid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->playerid(), output);
  }

  // optional uint32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverid(), output);
  }

  // optional int32 mode = 3;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mode(), output);
  }

  // optional uint32 ticket_count = 4;
  if (has_ticket_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ticket_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_ReqTeamFight)
}

::google::protobuf::uint8* UM_ReqTeamFight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_ReqTeamFight)
  // required string playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playerid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }

  // optional uint32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverid(), target);
  }

  // optional int32 mode = 3;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mode(), target);
  }

  // optional uint32 ticket_count = 4;
  if (has_ticket_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ticket_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_ReqTeamFight)
  return target;
}

int UM_ReqTeamFight::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional uint32 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // optional int32 mode = 3;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }

    // optional uint32 ticket_count = 4;
    if (has_ticket_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ticket_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_ReqTeamFight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_ReqTeamFight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_ReqTeamFight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_ReqTeamFight::MergeFrom(const UM_ReqTeamFight& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_ticket_count()) {
      set_ticket_count(from.ticket_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_ReqTeamFight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_ReqTeamFight::CopyFrom(const UM_ReqTeamFight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_ReqTeamFight::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UM_ReqTeamFight::Swap(UM_ReqTeamFight* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(serverid_, other->serverid_);
    std::swap(mode_, other->mode_);
    std::swap(ticket_count_, other->ticket_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_ReqTeamFight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_ReqTeamFight_descriptor_;
  metadata.reflection = UM_ReqTeamFight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_ReadyFight::kTimeFieldNumber;
#endif  // !_MSC_VER

UM_ReadyFight::UM_ReadyFight()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_ReadyFight)
}

void UM_ReadyFight::InitAsDefaultInstance() {
}

UM_ReadyFight::UM_ReadyFight(const UM_ReadyFight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_ReadyFight)
}

void UM_ReadyFight::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_ReadyFight::~UM_ReadyFight() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_ReadyFight)
  SharedDtor();
}

void UM_ReadyFight::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_ReadyFight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_ReadyFight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_ReadyFight_descriptor_;
}

const UM_ReadyFight& UM_ReadyFight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_ReadyFight* UM_ReadyFight::default_instance_ = NULL;

UM_ReadyFight* UM_ReadyFight::New() const {
  return new UM_ReadyFight;
}

void UM_ReadyFight::Clear() {
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_ReadyFight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_ReadyFight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_ReadyFight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_ReadyFight)
  return false;
#undef DO_
}

void UM_ReadyFight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_ReadyFight)
  // optional uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_ReadyFight)
}

::google::protobuf::uint8* UM_ReadyFight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_ReadyFight)
  // optional uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_ReadyFight)
  return target;
}

int UM_ReadyFight::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_ReadyFight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_ReadyFight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_ReadyFight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_ReadyFight::MergeFrom(const UM_ReadyFight& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_ReadyFight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_ReadyFight::CopyFrom(const UM_ReadyFight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_ReadyFight::IsInitialized() const {

  return true;
}

void UM_ReadyFight::Swap(UM_ReadyFight* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_ReadyFight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_ReadyFight_descriptor_;
  metadata.reflection = UM_ReadyFight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UM_TeamFight::UM_TeamFight()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_TeamFight)
}

void UM_TeamFight::InitAsDefaultInstance() {
}

UM_TeamFight::UM_TeamFight(const UM_TeamFight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_TeamFight)
}

void UM_TeamFight::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_TeamFight::~UM_TeamFight() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_TeamFight)
  SharedDtor();
}

void UM_TeamFight::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_TeamFight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_TeamFight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_TeamFight_descriptor_;
}

const UM_TeamFight& UM_TeamFight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_TeamFight* UM_TeamFight::default_instance_ = NULL;

UM_TeamFight* UM_TeamFight::New() const {
  return new UM_TeamFight;
}

void UM_TeamFight::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_TeamFight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_TeamFight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_TeamFight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_TeamFight)
  return false;
#undef DO_
}

void UM_TeamFight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_TeamFight)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_TeamFight)
}

::google::protobuf::uint8* UM_TeamFight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_TeamFight)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_TeamFight)
  return target;
}

int UM_TeamFight::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_TeamFight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_TeamFight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_TeamFight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_TeamFight::MergeFrom(const UM_TeamFight& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_TeamFight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_TeamFight::CopyFrom(const UM_TeamFight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_TeamFight::IsInitialized() const {

  return true;
}

void UM_TeamFight::Swap(UM_TeamFight* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_TeamFight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_TeamFight_descriptor_;
  metadata.reflection = UM_TeamFight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_ReqCancelFight::kPlayeridFieldNumber;
#endif  // !_MSC_VER

UM_ReqCancelFight::UM_ReqCancelFight()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_ReqCancelFight)
}

void UM_ReqCancelFight::InitAsDefaultInstance() {
}

UM_ReqCancelFight::UM_ReqCancelFight(const UM_ReqCancelFight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_ReqCancelFight)
}

void UM_ReqCancelFight::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_ReqCancelFight::~UM_ReqCancelFight() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_ReqCancelFight)
  SharedDtor();
}

void UM_ReqCancelFight::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void UM_ReqCancelFight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_ReqCancelFight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_ReqCancelFight_descriptor_;
}

const UM_ReqCancelFight& UM_ReqCancelFight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_ReqCancelFight* UM_ReqCancelFight::default_instance_ = NULL;

UM_ReqCancelFight* UM_ReqCancelFight::New() const {
  return new UM_ReqCancelFight;
}

void UM_ReqCancelFight::Clear() {
  if (has_playerid()) {
    if (playerid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      playerid_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_ReqCancelFight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_ReqCancelFight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "playerid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_ReqCancelFight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_ReqCancelFight)
  return false;
#undef DO_
}

void UM_ReqCancelFight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_ReqCancelFight)
  // required string playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playerid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_ReqCancelFight)
}

::google::protobuf::uint8* UM_ReqCancelFight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_ReqCancelFight)
  // required string playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playerid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_ReqCancelFight)
  return target;
}

int UM_ReqCancelFight::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_ReqCancelFight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_ReqCancelFight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_ReqCancelFight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_ReqCancelFight::MergeFrom(const UM_ReqCancelFight& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_ReqCancelFight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_ReqCancelFight::CopyFrom(const UM_ReqCancelFight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_ReqCancelFight::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UM_ReqCancelFight::Swap(UM_ReqCancelFight* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_ReqCancelFight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_ReqCancelFight_descriptor_;
  metadata.reflection = UM_ReqCancelFight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UM_CancelFight::UM_CancelFight()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_CancelFight)
}

void UM_CancelFight::InitAsDefaultInstance() {
}

UM_CancelFight::UM_CancelFight(const UM_CancelFight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_CancelFight)
}

void UM_CancelFight::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_CancelFight::~UM_CancelFight() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_CancelFight)
  SharedDtor();
}

void UM_CancelFight::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_CancelFight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_CancelFight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_CancelFight_descriptor_;
}

const UM_CancelFight& UM_CancelFight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_CancelFight* UM_CancelFight::default_instance_ = NULL;

UM_CancelFight* UM_CancelFight::New() const {
  return new UM_CancelFight;
}

void UM_CancelFight::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_CancelFight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_CancelFight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_CancelFight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_CancelFight)
  return false;
#undef DO_
}

void UM_CancelFight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_CancelFight)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_CancelFight)
}

::google::protobuf::uint8* UM_CancelFight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_CancelFight)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_CancelFight)
  return target;
}

int UM_CancelFight::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_CancelFight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_CancelFight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_CancelFight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_CancelFight::MergeFrom(const UM_CancelFight& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_CancelFight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_CancelFight::CopyFrom(const UM_CancelFight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_CancelFight::IsInitialized() const {

  return true;
}

void UM_CancelFight::Swap(UM_CancelFight* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_CancelFight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_CancelFight_descriptor_;
  metadata.reflection = UM_CancelFight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_Logout::kErrFieldNumber;
#endif  // !_MSC_VER

UM_Logout::UM_Logout()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_Logout)
}

void UM_Logout::InitAsDefaultInstance() {
}

UM_Logout::UM_Logout(const UM_Logout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_Logout)
}

void UM_Logout::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_Logout::~UM_Logout() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_Logout)
  SharedDtor();
}

void UM_Logout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_Logout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_Logout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_Logout_descriptor_;
}

const UM_Logout& UM_Logout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_Logout* UM_Logout::default_instance_ = NULL;

UM_Logout* UM_Logout::New() const {
  return new UM_Logout;
}

void UM_Logout::Clear() {
  err_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_Logout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_Logout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_Logout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_Logout)
  return false;
#undef DO_
}

void UM_Logout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_Logout)
  // optional int32 err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_Logout)
}

::google::protobuf::uint8* UM_Logout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_Logout)
  // optional int32 err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_Logout)
  return target;
}

int UM_Logout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_Logout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_Logout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_Logout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_Logout::MergeFrom(const UM_Logout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_Logout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_Logout::CopyFrom(const UM_Logout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_Logout::IsInitialized() const {

  return true;
}

void UM_Logout::Swap(UM_Logout* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_Logout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_Logout_descriptor_;
  metadata.reflection = UM_Logout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_EnterGame::kInfoFieldNumber;
const int UM_EnterGame::kServertimeFieldNumber;
const int UM_EnterGame::kFightingFieldNumber;
#endif  // !_MSC_VER

UM_EnterGame::UM_EnterGame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_EnterGame)
}

void UM_EnterGame::InitAsDefaultInstance() {
  info_ = const_cast< ::com::suyin::proto::role_info*>(&::com::suyin::proto::role_info::default_instance());
}

UM_EnterGame::UM_EnterGame(const UM_EnterGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_EnterGame)
}

void UM_EnterGame::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  servertime_ = 0u;
  fighting_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_EnterGame::~UM_EnterGame() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_EnterGame)
  SharedDtor();
}

void UM_EnterGame::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void UM_EnterGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_EnterGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_EnterGame_descriptor_;
}

const UM_EnterGame& UM_EnterGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_EnterGame* UM_EnterGame::default_instance_ = NULL;

UM_EnterGame* UM_EnterGame::New() const {
  return new UM_EnterGame;
}

void UM_EnterGame::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UM_EnterGame*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(servertime_, fighting_);
    if (has_info()) {
      if (info_ != NULL) info_->::com::suyin::proto::role_info::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_EnterGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_EnterGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.suyin.proto.role_info info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_servertime;
        break;
      }

      // optional uint32 servertime = 2;
      case 2: {
        if (tag == 16) {
         parse_servertime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servertime_)));
          set_has_servertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fighting;
        break;
      }

      // optional bool fighting = 3;
      case 3: {
        if (tag == 24) {
         parse_fighting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fighting_)));
          set_has_fighting();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_EnterGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_EnterGame)
  return false;
#undef DO_
}

void UM_EnterGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_EnterGame)
  // optional .com.suyin.proto.role_info info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // optional uint32 servertime = 2;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->servertime(), output);
  }

  // optional bool fighting = 3;
  if (has_fighting()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->fighting(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_EnterGame)
}

::google::protobuf::uint8* UM_EnterGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_EnterGame)
  // optional .com.suyin.proto.role_info info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // optional uint32 servertime = 2;
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->servertime(), target);
  }

  // optional bool fighting = 3;
  if (has_fighting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->fighting(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_EnterGame)
  return target;
}

int UM_EnterGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.suyin.proto.role_info info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional uint32 servertime = 2;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servertime());
    }

    // optional bool fighting = 3;
    if (has_fighting()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_EnterGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_EnterGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_EnterGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_EnterGame::MergeFrom(const UM_EnterGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::com::suyin::proto::role_info::MergeFrom(from.info());
    }
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
    if (from.has_fighting()) {
      set_fighting(from.fighting());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_EnterGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_EnterGame::CopyFrom(const UM_EnterGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_EnterGame::IsInitialized() const {

  return true;
}

void UM_EnterGame::Swap(UM_EnterGame* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(servertime_, other->servertime_);
    std::swap(fighting_, other->fighting_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_EnterGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_EnterGame_descriptor_;
  metadata.reflection = UM_EnterGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_SyncRole::kInfoFieldNumber;
#endif  // !_MSC_VER

UM_SyncRole::UM_SyncRole()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_SyncRole)
}

void UM_SyncRole::InitAsDefaultInstance() {
  info_ = const_cast< ::com::suyin::proto::role_info*>(&::com::suyin::proto::role_info::default_instance());
}

UM_SyncRole::UM_SyncRole(const UM_SyncRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_SyncRole)
}

void UM_SyncRole::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_SyncRole::~UM_SyncRole() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_SyncRole)
  SharedDtor();
}

void UM_SyncRole::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void UM_SyncRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_SyncRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_SyncRole_descriptor_;
}

const UM_SyncRole& UM_SyncRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_SyncRole* UM_SyncRole::default_instance_ = NULL;

UM_SyncRole* UM_SyncRole::New() const {
  return new UM_SyncRole;
}

void UM_SyncRole::Clear() {
  if (has_info()) {
    if (info_ != NULL) info_->::com::suyin::proto::role_info::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_SyncRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_SyncRole)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.suyin.proto.role_info info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_SyncRole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_SyncRole)
  return false;
#undef DO_
}

void UM_SyncRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_SyncRole)
  // optional .com.suyin.proto.role_info info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_SyncRole)
}

::google::protobuf::uint8* UM_SyncRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_SyncRole)
  // optional .com.suyin.proto.role_info info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_SyncRole)
  return target;
}

int UM_SyncRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.suyin.proto.role_info info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_SyncRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_SyncRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_SyncRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_SyncRole::MergeFrom(const UM_SyncRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::com::suyin::proto::role_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_SyncRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_SyncRole::CopyFrom(const UM_SyncRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_SyncRole::IsInitialized() const {

  return true;
}

void UM_SyncRole::Swap(UM_SyncRole* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_SyncRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_SyncRole_descriptor_;
  metadata.reflection = UM_SyncRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_BuyItem::kIdFieldNumber;
#endif  // !_MSC_VER

UM_BuyItem::UM_BuyItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_BuyItem)
}

void UM_BuyItem::InitAsDefaultInstance() {
}

UM_BuyItem::UM_BuyItem(const UM_BuyItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_BuyItem)
}

void UM_BuyItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_BuyItem::~UM_BuyItem() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_BuyItem)
  SharedDtor();
}

void UM_BuyItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_BuyItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_BuyItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_BuyItem_descriptor_;
}

const UM_BuyItem& UM_BuyItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_BuyItem* UM_BuyItem::default_instance_ = NULL;

UM_BuyItem* UM_BuyItem::New() const {
  return new UM_BuyItem;
}

void UM_BuyItem::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_BuyItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_BuyItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_BuyItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_BuyItem)
  return false;
#undef DO_
}

void UM_BuyItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_BuyItem)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_BuyItem)
}

::google::protobuf::uint8* UM_BuyItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_BuyItem)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_BuyItem)
  return target;
}

int UM_BuyItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_BuyItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_BuyItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_BuyItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_BuyItem::MergeFrom(const UM_BuyItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_BuyItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_BuyItem::CopyFrom(const UM_BuyItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_BuyItem::IsInitialized() const {

  return true;
}

void UM_BuyItem::Swap(UM_BuyItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_BuyItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_BuyItem_descriptor_;
  metadata.reflection = UM_BuyItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_UseItem::kIdFieldNumber;
#endif  // !_MSC_VER

UM_UseItem::UM_UseItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_UseItem)
}

void UM_UseItem::InitAsDefaultInstance() {
}

UM_UseItem::UM_UseItem(const UM_UseItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_UseItem)
}

void UM_UseItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_UseItem::~UM_UseItem() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_UseItem)
  SharedDtor();
}

void UM_UseItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_UseItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_UseItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_UseItem_descriptor_;
}

const UM_UseItem& UM_UseItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_UseItem* UM_UseItem::default_instance_ = NULL;

UM_UseItem* UM_UseItem::New() const {
  return new UM_UseItem;
}

void UM_UseItem::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_UseItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_UseItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_UseItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_UseItem)
  return false;
#undef DO_
}

void UM_UseItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_UseItem)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_UseItem)
}

::google::protobuf::uint8* UM_UseItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_UseItem)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_UseItem)
  return target;
}

int UM_UseItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_UseItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_UseItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_UseItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_UseItem::MergeFrom(const UM_UseItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_UseItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_UseItem::CopyFrom(const UM_UseItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_UseItem::IsInitialized() const {

  return true;
}

void UM_UseItem::Swap(UM_UseItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_UseItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_UseItem_descriptor_;
  metadata.reflection = UM_UseItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_ItemUpdate::kListFieldNumber;
const int UM_ItemUpdate::kTypeFieldNumber;
#endif  // !_MSC_VER

UM_ItemUpdate::UM_ItemUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_ItemUpdate)
}

void UM_ItemUpdate::InitAsDefaultInstance() {
}

UM_ItemUpdate::UM_ItemUpdate(const UM_ItemUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_ItemUpdate)
}

void UM_ItemUpdate::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_ItemUpdate::~UM_ItemUpdate() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_ItemUpdate)
  SharedDtor();
}

void UM_ItemUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_ItemUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_ItemUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_ItemUpdate_descriptor_;
}

const UM_ItemUpdate& UM_ItemUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_ItemUpdate* UM_ItemUpdate::default_instance_ = NULL;

UM_ItemUpdate* UM_ItemUpdate::New() const {
  return new UM_ItemUpdate;
}

void UM_ItemUpdate::Clear() {
  type_ = 0;
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_ItemUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_ItemUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.suyin.proto.item_info list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_ItemUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_ItemUpdate)
  return false;
#undef DO_
}

void UM_ItemUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_ItemUpdate)
  // repeated .com.suyin.proto.item_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_ItemUpdate)
}

::google::protobuf::uint8* UM_ItemUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_ItemUpdate)
  // repeated .com.suyin.proto.item_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_ItemUpdate)
  return target;
}

int UM_ItemUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .com.suyin.proto.item_info list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_ItemUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_ItemUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_ItemUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_ItemUpdate::MergeFrom(const UM_ItemUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_ItemUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_ItemUpdate::CopyFrom(const UM_ItemUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_ItemUpdate::IsInitialized() const {

  return true;
}

void UM_ItemUpdate::Swap(UM_ItemUpdate* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_ItemUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_ItemUpdate_descriptor_;
  metadata.reflection = UM_ItemUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_UnequipItem::kItemtypeFieldNumber;
#endif  // !_MSC_VER

UM_UnequipItem::UM_UnequipItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_UnequipItem)
}

void UM_UnequipItem::InitAsDefaultInstance() {
}

UM_UnequipItem::UM_UnequipItem(const UM_UnequipItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_UnequipItem)
}

void UM_UnequipItem::SharedCtor() {
  _cached_size_ = 0;
  itemtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_UnequipItem::~UM_UnequipItem() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_UnequipItem)
  SharedDtor();
}

void UM_UnequipItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_UnequipItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_UnequipItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_UnequipItem_descriptor_;
}

const UM_UnequipItem& UM_UnequipItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_UnequipItem* UM_UnequipItem::default_instance_ = NULL;

UM_UnequipItem* UM_UnequipItem::New() const {
  return new UM_UnequipItem;
}

void UM_UnequipItem::Clear() {
  itemtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_UnequipItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_UnequipItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemtype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_UnequipItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_UnequipItem)
  return false;
#undef DO_
}

void UM_UnequipItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_UnequipItem)
  // optional int32 itemtype = 1;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_UnequipItem)
}

::google::protobuf::uint8* UM_UnequipItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_UnequipItem)
  // optional int32 itemtype = 1;
  if (has_itemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_UnequipItem)
  return target;
}

int UM_UnequipItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemtype = 1;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_UnequipItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_UnequipItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_UnequipItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_UnequipItem::MergeFrom(const UM_UnequipItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_UnequipItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_UnequipItem::CopyFrom(const UM_UnequipItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_UnequipItem::IsInitialized() const {

  return true;
}

void UM_UnequipItem::Swap(UM_UnequipItem* other) {
  if (other != this) {
    std::swap(itemtype_, other->itemtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_UnequipItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_UnequipItem_descriptor_;
  metadata.reflection = UM_UnequipItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_EquipUpdate::kItemtypeFieldNumber;
const int UM_EquipUpdate::kIdFieldNumber;
#endif  // !_MSC_VER

UM_EquipUpdate::UM_EquipUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_EquipUpdate)
}

void UM_EquipUpdate::InitAsDefaultInstance() {
}

UM_EquipUpdate::UM_EquipUpdate(const UM_EquipUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_EquipUpdate)
}

void UM_EquipUpdate::SharedCtor() {
  _cached_size_ = 0;
  itemtype_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_EquipUpdate::~UM_EquipUpdate() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_EquipUpdate)
  SharedDtor();
}

void UM_EquipUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_EquipUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_EquipUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_EquipUpdate_descriptor_;
}

const UM_EquipUpdate& UM_EquipUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_EquipUpdate* UM_EquipUpdate::default_instance_ = NULL;

UM_EquipUpdate* UM_EquipUpdate::New() const {
  return new UM_EquipUpdate;
}

void UM_EquipUpdate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UM_EquipUpdate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemtype_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_EquipUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_EquipUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemtype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_EquipUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_EquipUpdate)
  return false;
#undef DO_
}

void UM_EquipUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_EquipUpdate)
  // optional int32 itemtype = 1;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemtype(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_EquipUpdate)
}

::google::protobuf::uint8* UM_EquipUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_EquipUpdate)
  // optional int32 itemtype = 1;
  if (has_itemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemtype(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_EquipUpdate)
  return target;
}

int UM_EquipUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemtype = 1;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemtype());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_EquipUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_EquipUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_EquipUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_EquipUpdate::MergeFrom(const UM_EquipUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_EquipUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_EquipUpdate::CopyFrom(const UM_EquipUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_EquipUpdate::IsInitialized() const {

  return true;
}

void UM_EquipUpdate::Swap(UM_EquipUpdate* other) {
  if (other != this) {
    std::swap(itemtype_, other->itemtype_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_EquipUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_EquipUpdate_descriptor_;
  metadata.reflection = UM_EquipUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UM_ReqShop::UM_ReqShop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_ReqShop)
}

void UM_ReqShop::InitAsDefaultInstance() {
}

UM_ReqShop::UM_ReqShop(const UM_ReqShop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_ReqShop)
}

void UM_ReqShop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_ReqShop::~UM_ReqShop() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_ReqShop)
  SharedDtor();
}

void UM_ReqShop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_ReqShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_ReqShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_ReqShop_descriptor_;
}

const UM_ReqShop& UM_ReqShop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_ReqShop* UM_ReqShop::default_instance_ = NULL;

UM_ReqShop* UM_ReqShop::New() const {
  return new UM_ReqShop;
}

void UM_ReqShop::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_ReqShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_ReqShop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_ReqShop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_ReqShop)
  return false;
#undef DO_
}

void UM_ReqShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_ReqShop)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_ReqShop)
}

::google::protobuf::uint8* UM_ReqShop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_ReqShop)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_ReqShop)
  return target;
}

int UM_ReqShop::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_ReqShop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_ReqShop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_ReqShop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_ReqShop::MergeFrom(const UM_ReqShop& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_ReqShop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_ReqShop::CopyFrom(const UM_ReqShop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_ReqShop::IsInitialized() const {

  return true;
}

void UM_ReqShop::Swap(UM_ReqShop* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_ReqShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_ReqShop_descriptor_;
  metadata.reflection = UM_ReqShop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_Shop::kListFieldNumber;
#endif  // !_MSC_VER

UM_Shop::UM_Shop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_Shop)
}

void UM_Shop::InitAsDefaultInstance() {
}

UM_Shop::UM_Shop(const UM_Shop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_Shop)
}

void UM_Shop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_Shop::~UM_Shop() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_Shop)
  SharedDtor();
}

void UM_Shop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_Shop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_Shop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_Shop_descriptor_;
}

const UM_Shop& UM_Shop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_Shop* UM_Shop::default_instance_ = NULL;

UM_Shop* UM_Shop::New() const {
  return new UM_Shop;
}

void UM_Shop::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_Shop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_Shop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.suyin.proto.shop_item list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_Shop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_Shop)
  return false;
#undef DO_
}

void UM_Shop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_Shop)
  // repeated .com.suyin.proto.shop_item list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_Shop)
}

::google::protobuf::uint8* UM_Shop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_Shop)
  // repeated .com.suyin.proto.shop_item list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_Shop)
  return target;
}

int UM_Shop::ByteSize() const {
  int total_size = 0;

  // repeated .com.suyin.proto.shop_item list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_Shop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_Shop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_Shop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_Shop::MergeFrom(const UM_Shop& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_Shop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_Shop::CopyFrom(const UM_Shop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_Shop::IsInitialized() const {

  return true;
}

void UM_Shop::Swap(UM_Shop* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_Shop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_Shop_descriptor_;
  metadata.reflection = UM_Shop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UM_HeroLevelup::UM_HeroLevelup()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_HeroLevelup)
}

void UM_HeroLevelup::InitAsDefaultInstance() {
}

UM_HeroLevelup::UM_HeroLevelup(const UM_HeroLevelup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_HeroLevelup)
}

void UM_HeroLevelup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_HeroLevelup::~UM_HeroLevelup() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_HeroLevelup)
  SharedDtor();
}

void UM_HeroLevelup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_HeroLevelup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_HeroLevelup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_HeroLevelup_descriptor_;
}

const UM_HeroLevelup& UM_HeroLevelup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_HeroLevelup* UM_HeroLevelup::default_instance_ = NULL;

UM_HeroLevelup* UM_HeroLevelup::New() const {
  return new UM_HeroLevelup;
}

void UM_HeroLevelup::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_HeroLevelup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_HeroLevelup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_HeroLevelup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_HeroLevelup)
  return false;
#undef DO_
}

void UM_HeroLevelup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_HeroLevelup)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_HeroLevelup)
}

::google::protobuf::uint8* UM_HeroLevelup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_HeroLevelup)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_HeroLevelup)
  return target;
}

int UM_HeroLevelup::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_HeroLevelup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_HeroLevelup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_HeroLevelup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_HeroLevelup::MergeFrom(const UM_HeroLevelup& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_HeroLevelup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_HeroLevelup::CopyFrom(const UM_HeroLevelup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_HeroLevelup::IsInitialized() const {

  return true;
}

void UM_HeroLevelup::Swap(UM_HeroLevelup* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_HeroLevelup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_HeroLevelup_descriptor_;
  metadata.reflection = UM_HeroLevelup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_Hero::kHeroidFieldNumber;
const int UM_Hero::kHerolevelFieldNumber;
#endif  // !_MSC_VER

UM_Hero::UM_Hero()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_Hero)
}

void UM_Hero::InitAsDefaultInstance() {
}

UM_Hero::UM_Hero(const UM_Hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_Hero)
}

void UM_Hero::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  herolevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_Hero::~UM_Hero() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_Hero)
  SharedDtor();
}

void UM_Hero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_Hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_Hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_Hero_descriptor_;
}

const UM_Hero& UM_Hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_Hero* UM_Hero::default_instance_ = NULL;

UM_Hero* UM_Hero::New() const {
  return new UM_Hero;
}

void UM_Hero::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UM_Hero*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(heroid_, herolevel_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_Hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_Hero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_herolevel;
        break;
      }

      // optional uint32 herolevel = 2;
      case 2: {
        if (tag == 16) {
         parse_herolevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &herolevel_)));
          set_has_herolevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_Hero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_Hero)
  return false;
#undef DO_
}

void UM_Hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_Hero)
  // optional uint32 heroid = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // optional uint32 herolevel = 2;
  if (has_herolevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->herolevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_Hero)
}

::google::protobuf::uint8* UM_Hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_Hero)
  // optional uint32 heroid = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // optional uint32 herolevel = 2;
  if (has_herolevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->herolevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_Hero)
  return target;
}

int UM_Hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroid = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint32 herolevel = 2;
    if (has_herolevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->herolevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_Hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_Hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_Hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_Hero::MergeFrom(const UM_Hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_herolevel()) {
      set_herolevel(from.herolevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_Hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_Hero::CopyFrom(const UM_Hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_Hero::IsInitialized() const {

  return true;
}

void UM_Hero::Swap(UM_Hero* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(herolevel_, other->herolevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_Hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_Hero_descriptor_;
  metadata.reflection = UM_Hero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UM_ReqServerList::UM_ReqServerList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_ReqServerList)
}

void UM_ReqServerList::InitAsDefaultInstance() {
}

UM_ReqServerList::UM_ReqServerList(const UM_ReqServerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_ReqServerList)
}

void UM_ReqServerList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_ReqServerList::~UM_ReqServerList() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_ReqServerList)
  SharedDtor();
}

void UM_ReqServerList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_ReqServerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_ReqServerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_ReqServerList_descriptor_;
}

const UM_ReqServerList& UM_ReqServerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_ReqServerList* UM_ReqServerList::default_instance_ = NULL;

UM_ReqServerList* UM_ReqServerList::New() const {
  return new UM_ReqServerList;
}

void UM_ReqServerList::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_ReqServerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_ReqServerList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_ReqServerList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_ReqServerList)
  return false;
#undef DO_
}

void UM_ReqServerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_ReqServerList)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_ReqServerList)
}

::google::protobuf::uint8* UM_ReqServerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_ReqServerList)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_ReqServerList)
  return target;
}

int UM_ReqServerList::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_ReqServerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_ReqServerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_ReqServerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_ReqServerList::MergeFrom(const UM_ReqServerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_ReqServerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_ReqServerList::CopyFrom(const UM_ReqServerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_ReqServerList::IsInitialized() const {

  return true;
}

void UM_ReqServerList::Swap(UM_ReqServerList* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_ReqServerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_ReqServerList_descriptor_;
  metadata.reflection = UM_ReqServerList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_ServerList::kListFieldNumber;
#endif  // !_MSC_VER

UM_ServerList::UM_ServerList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_ServerList)
}

void UM_ServerList::InitAsDefaultInstance() {
}

UM_ServerList::UM_ServerList(const UM_ServerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_ServerList)
}

void UM_ServerList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_ServerList::~UM_ServerList() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_ServerList)
  SharedDtor();
}

void UM_ServerList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_ServerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_ServerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_ServerList_descriptor_;
}

const UM_ServerList& UM_ServerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_ServerList* UM_ServerList::default_instance_ = NULL;

UM_ServerList* UM_ServerList::New() const {
  return new UM_ServerList;
}

void UM_ServerList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_ServerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_ServerList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.suyin.proto.server_info list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_ServerList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_ServerList)
  return false;
#undef DO_
}

void UM_ServerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_ServerList)
  // repeated .com.suyin.proto.server_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_ServerList)
}

::google::protobuf::uint8* UM_ServerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_ServerList)
  // repeated .com.suyin.proto.server_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_ServerList)
  return target;
}

int UM_ServerList::ByteSize() const {
  int total_size = 0;

  // repeated .com.suyin.proto.server_info list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_ServerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_ServerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_ServerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_ServerList::MergeFrom(const UM_ServerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_ServerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_ServerList::CopyFrom(const UM_ServerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_ServerList::IsInitialized() const {

  return true;
}

void UM_ServerList::Swap(UM_ServerList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_ServerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_ServerList_descriptor_;
  metadata.reflection = UM_ServerList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_ReqLoginFight::kPlayeridFieldNumber;
const int UM_ReqLoginFight::kServeridFieldNumber;
const int UM_ReqLoginFight::kModeFieldNumber;
const int UM_ReqLoginFight::kTicketCountFieldNumber;
#endif  // !_MSC_VER

UM_ReqLoginFight::UM_ReqLoginFight()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_ReqLoginFight)
}

void UM_ReqLoginFight::InitAsDefaultInstance() {
}

UM_ReqLoginFight::UM_ReqLoginFight(const UM_ReqLoginFight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_ReqLoginFight)
}

void UM_ReqLoginFight::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverid_ = 0u;
  mode_ = 0;
  ticket_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_ReqLoginFight::~UM_ReqLoginFight() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_ReqLoginFight)
  SharedDtor();
}

void UM_ReqLoginFight::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void UM_ReqLoginFight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_ReqLoginFight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_ReqLoginFight_descriptor_;
}

const UM_ReqLoginFight& UM_ReqLoginFight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_ReqLoginFight* UM_ReqLoginFight::default_instance_ = NULL;

UM_ReqLoginFight* UM_ReqLoginFight::New() const {
  return new UM_ReqLoginFight;
}

void UM_ReqLoginFight::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UM_ReqLoginFight*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(serverid_, ticket_count_);
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        playerid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_ReqLoginFight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_ReqLoginFight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "playerid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // optional uint32 serverid = 2;
      case 2: {
        if (tag == 16) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mode;
        break;
      }

      // optional int32 mode = 3;
      case 3: {
        if (tag == 24) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ticket_count;
        break;
      }

      // optional uint32 ticket_count = 4;
      case 4: {
        if (tag == 32) {
         parse_ticket_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticket_count_)));
          set_has_ticket_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_ReqLoginFight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_ReqLoginFight)
  return false;
#undef DO_
}

void UM_ReqLoginFight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_ReqLoginFight)
  // required string playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playerid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->playerid(), output);
  }

  // optional uint32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverid(), output);
  }

  // optional int32 mode = 3;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mode(), output);
  }

  // optional uint32 ticket_count = 4;
  if (has_ticket_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ticket_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_ReqLoginFight)
}

::google::protobuf::uint8* UM_ReqLoginFight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_ReqLoginFight)
  // required string playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playerid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }

  // optional uint32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverid(), target);
  }

  // optional int32 mode = 3;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mode(), target);
  }

  // optional uint32 ticket_count = 4;
  if (has_ticket_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ticket_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_ReqLoginFight)
  return target;
}

int UM_ReqLoginFight::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional uint32 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // optional int32 mode = 3;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }

    // optional uint32 ticket_count = 4;
    if (has_ticket_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ticket_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_ReqLoginFight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_ReqLoginFight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_ReqLoginFight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_ReqLoginFight::MergeFrom(const UM_ReqLoginFight& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_ticket_count()) {
      set_ticket_count(from.ticket_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_ReqLoginFight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_ReqLoginFight::CopyFrom(const UM_ReqLoginFight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_ReqLoginFight::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UM_ReqLoginFight::Swap(UM_ReqLoginFight* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(serverid_, other->serverid_);
    std::swap(mode_, other->mode_);
    std::swap(ticket_count_, other->ticket_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_ReqLoginFight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_ReqLoginFight_descriptor_;
  metadata.reflection = UM_ReqLoginFight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_LoginFightKey::kServeridFieldNumber;
const int UM_LoginFightKey::kKeyFieldNumber;
const int UM_LoginFightKey::kRoomidFieldNumber;
#endif  // !_MSC_VER

UM_LoginFightKey::UM_LoginFightKey()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_LoginFightKey)
}

void UM_LoginFightKey::InitAsDefaultInstance() {
}

UM_LoginFightKey::UM_LoginFightKey(const UM_LoginFightKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_LoginFightKey)
}

void UM_LoginFightKey::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = 0u;
  key_ = 0u;
  roomid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_LoginFightKey::~UM_LoginFightKey() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_LoginFightKey)
  SharedDtor();
}

void UM_LoginFightKey::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_LoginFightKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_LoginFightKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_LoginFightKey_descriptor_;
}

const UM_LoginFightKey& UM_LoginFightKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_LoginFightKey* UM_LoginFightKey::default_instance_ = NULL;

UM_LoginFightKey* UM_LoginFightKey::New() const {
  return new UM_LoginFightKey;
}

void UM_LoginFightKey::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UM_LoginFightKey*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(serverid_, roomid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_LoginFightKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_LoginFightKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 serverid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_key;
        break;
      }

      // optional uint32 key = 2;
      case 2: {
        if (tag == 16) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_roomid;
        break;
      }

      // optional uint32 roomid = 3;
      case 3: {
        if (tag == 24) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_LoginFightKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_LoginFightKey)
  return false;
#undef DO_
}

void UM_LoginFightKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_LoginFightKey)
  // optional uint32 serverid = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serverid(), output);
  }

  // optional uint32 key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->key(), output);
  }

  // optional uint32 roomid = 3;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_LoginFightKey)
}

::google::protobuf::uint8* UM_LoginFightKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_LoginFightKey)
  // optional uint32 serverid = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serverid(), target);
  }

  // optional uint32 key = 2;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->key(), target);
  }

  // optional uint32 roomid = 3;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_LoginFightKey)
  return target;
}

int UM_LoginFightKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 serverid = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // optional uint32 key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

    // optional uint32 roomid = 3;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_LoginFightKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_LoginFightKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_LoginFightKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_LoginFightKey::MergeFrom(const UM_LoginFightKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_LoginFightKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_LoginFightKey::CopyFrom(const UM_LoginFightKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_LoginFightKey::IsInitialized() const {

  return true;
}

void UM_LoginFightKey::Swap(UM_LoginFightKey* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(key_, other->key_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_LoginFightKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_LoginFightKey_descriptor_;
  metadata.reflection = UM_LoginFightKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UM_ExitFight::UM_ExitFight()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_ExitFight)
}

void UM_ExitFight::InitAsDefaultInstance() {
}

UM_ExitFight::UM_ExitFight(const UM_ExitFight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_ExitFight)
}

void UM_ExitFight::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_ExitFight::~UM_ExitFight() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_ExitFight)
  SharedDtor();
}

void UM_ExitFight::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_ExitFight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_ExitFight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_ExitFight_descriptor_;
}

const UM_ExitFight& UM_ExitFight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_ExitFight* UM_ExitFight::default_instance_ = NULL;

UM_ExitFight* UM_ExitFight::New() const {
  return new UM_ExitFight;
}

void UM_ExitFight::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_ExitFight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_ExitFight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_ExitFight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_ExitFight)
  return false;
#undef DO_
}

void UM_ExitFight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_ExitFight)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_ExitFight)
}

::google::protobuf::uint8* UM_ExitFight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_ExitFight)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_ExitFight)
  return target;
}

int UM_ExitFight::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_ExitFight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_ExitFight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_ExitFight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_ExitFight::MergeFrom(const UM_ExitFight& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_ExitFight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_ExitFight::CopyFrom(const UM_ExitFight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_ExitFight::IsInitialized() const {

  return true;
}

void UM_ExitFight::Swap(UM_ExitFight* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_ExitFight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_ExitFight_descriptor_;
  metadata.reflection = UM_ExitFight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_Gm::kCommandFieldNumber;
#endif  // !_MSC_VER

UM_Gm::UM_Gm()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_Gm)
}

void UM_Gm::InitAsDefaultInstance() {
}

UM_Gm::UM_Gm(const UM_Gm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_Gm)
}

void UM_Gm::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  command_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_Gm::~UM_Gm() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_Gm)
  SharedDtor();
}

void UM_Gm::SharedDtor() {
  if (command_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete command_;
  }
  if (this != default_instance_) {
  }
}

void UM_Gm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_Gm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_Gm_descriptor_;
}

const UM_Gm& UM_Gm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_Gm* UM_Gm::default_instance_ = NULL;

UM_Gm* UM_Gm::New() const {
  return new UM_Gm;
}

void UM_Gm::Clear() {
  if (has_command()) {
    if (command_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      command_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_Gm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_Gm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string command = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "command");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_Gm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_Gm)
  return false;
#undef DO_
}

void UM_Gm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_Gm)
  // optional string command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "command");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->command(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_Gm)
}

::google::protobuf::uint8* UM_Gm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_Gm)
  // optional string command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "command");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->command(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_Gm)
  return target;
}

int UM_Gm::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_Gm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_Gm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_Gm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_Gm::MergeFrom(const UM_Gm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_Gm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_Gm::CopyFrom(const UM_Gm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_Gm::IsInitialized() const {

  return true;
}

void UM_Gm::Swap(UM_Gm* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_Gm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_Gm_descriptor_;
  metadata.reflection = UM_Gm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_Response::kMsgidFieldNumber;
const int UM_Response::kErrFieldNumber;
#endif  // !_MSC_VER

UM_Response::UM_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_Response)
}

void UM_Response::InitAsDefaultInstance() {
}

UM_Response::UM_Response(const UM_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_Response)
}

void UM_Response::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0u;
  err_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_Response::~UM_Response() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_Response)
  SharedDtor();
}

void UM_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_Response_descriptor_;
}

const UM_Response& UM_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_Response* UM_Response::default_instance_ = NULL;

UM_Response* UM_Response::New() const {
  return new UM_Response;
}

void UM_Response::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UM_Response*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(msgid_, err_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msgid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_err;
        break;
      }

      // optional int32 err = 2;
      case 2: {
        if (tag == 16) {
         parse_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_Response)
  return false;
#undef DO_
}

void UM_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_Response)
  // optional uint32 msgid = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgid(), output);
  }

  // optional int32 err = 2;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_Response)
}

::google::protobuf::uint8* UM_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_Response)
  // optional uint32 msgid = 1;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msgid(), target);
  }

  // optional int32 err = 2;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_Response)
  return target;
}

int UM_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 msgid = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // optional int32 err = 2;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_Response::MergeFrom(const UM_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_Response::CopyFrom(const UM_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_Response::IsInitialized() const {

  return true;
}

void UM_Response::Swap(UM_Response* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_Response_descriptor_;
  metadata.reflection = UM_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_SetFocus::kTypeFieldNumber;
const int UM_SetFocus::kSetFieldNumber;
const int UM_SetFocus::kRoleidFieldNumber;
#endif  // !_MSC_VER

UM_SetFocus::UM_SetFocus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_SetFocus)
}

void UM_SetFocus::InitAsDefaultInstance() {
}

UM_SetFocus::UM_SetFocus(const UM_SetFocus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_SetFocus)
}

void UM_SetFocus::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  set_ = 0u;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_SetFocus::~UM_SetFocus() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_SetFocus)
  SharedDtor();
}

void UM_SetFocus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_SetFocus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_SetFocus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_SetFocus_descriptor_;
}

const UM_SetFocus& UM_SetFocus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_SetFocus* UM_SetFocus::default_instance_ = NULL;

UM_SetFocus* UM_SetFocus::New() const {
  return new UM_SetFocus;
}

void UM_SetFocus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UM_SetFocus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, roleid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_SetFocus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_SetFocus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_set;
        break;
      }

      // optional uint32 set = 2;
      case 2: {
        if (tag == 16) {
         parse_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &set_)));
          set_has_set();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_roleid;
        break;
      }

      // optional uint32 roleid = 3;
      case 3: {
        if (tag == 24) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_SetFocus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_SetFocus)
  return false;
#undef DO_
}

void UM_SetFocus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_SetFocus)
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 set = 2;
  if (has_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->set(), output);
  }

  // optional uint32 roleid = 3;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_SetFocus)
}

::google::protobuf::uint8* UM_SetFocus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_SetFocus)
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 set = 2;
  if (has_set()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->set(), target);
  }

  // optional uint32 roleid = 3;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_SetFocus)
  return target;
}

int UM_SetFocus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 set = 2;
    if (has_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->set());
    }

    // optional uint32 roleid = 3;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_SetFocus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_SetFocus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_SetFocus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_SetFocus::MergeFrom(const UM_SetFocus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_set()) {
      set_set(from.set());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_SetFocus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_SetFocus::CopyFrom(const UM_SetFocus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_SetFocus::IsInitialized() const {

  return true;
}

void UM_SetFocus::Swap(UM_SetFocus* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(set_, other->set_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_SetFocus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_SetFocus_descriptor_;
  metadata.reflection = UM_SetFocus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_ReqRole::kRoleidFieldNumber;
#endif  // !_MSC_VER

UM_ReqRole::UM_ReqRole()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_ReqRole)
}

void UM_ReqRole::InitAsDefaultInstance() {
}

UM_ReqRole::UM_ReqRole(const UM_ReqRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_ReqRole)
}

void UM_ReqRole::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_ReqRole::~UM_ReqRole() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_ReqRole)
  SharedDtor();
}

void UM_ReqRole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_ReqRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_ReqRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_ReqRole_descriptor_;
}

const UM_ReqRole& UM_ReqRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_ReqRole* UM_ReqRole::default_instance_ = NULL;

UM_ReqRole* UM_ReqRole::New() const {
  return new UM_ReqRole;
}

void UM_ReqRole::Clear() {
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_ReqRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_ReqRole)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 roleid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_ReqRole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_ReqRole)
  return false;
#undef DO_
}

void UM_ReqRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_ReqRole)
  // optional uint32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_ReqRole)
}

::google::protobuf::uint8* UM_ReqRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_ReqRole)
  // optional uint32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_ReqRole)
  return target;
}

int UM_ReqRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_ReqRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_ReqRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_ReqRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_ReqRole::MergeFrom(const UM_ReqRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_ReqRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_ReqRole::CopyFrom(const UM_ReqRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_ReqRole::IsInitialized() const {

  return true;
}

void UM_ReqRole::Swap(UM_ReqRole* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_ReqRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_ReqRole_descriptor_;
  metadata.reflection = UM_ReqRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_RoleInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

UM_RoleInfo::UM_RoleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_RoleInfo)
}

void UM_RoleInfo::InitAsDefaultInstance() {
  info_ = const_cast< ::com::suyin::proto::role_info*>(&::com::suyin::proto::role_info::default_instance());
}

UM_RoleInfo::UM_RoleInfo(const UM_RoleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_RoleInfo)
}

void UM_RoleInfo::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_RoleInfo::~UM_RoleInfo() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_RoleInfo)
  SharedDtor();
}

void UM_RoleInfo::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void UM_RoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_RoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_RoleInfo_descriptor_;
}

const UM_RoleInfo& UM_RoleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_RoleInfo* UM_RoleInfo::default_instance_ = NULL;

UM_RoleInfo* UM_RoleInfo::New() const {
  return new UM_RoleInfo;
}

void UM_RoleInfo::Clear() {
  if (has_info()) {
    if (info_ != NULL) info_->::com::suyin::proto::role_info::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_RoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_RoleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.suyin.proto.role_info info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_RoleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_RoleInfo)
  return false;
#undef DO_
}

void UM_RoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_RoleInfo)
  // optional .com.suyin.proto.role_info info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_RoleInfo)
}

::google::protobuf::uint8* UM_RoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_RoleInfo)
  // optional .com.suyin.proto.role_info info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_RoleInfo)
  return target;
}

int UM_RoleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.suyin.proto.role_info info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_RoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_RoleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_RoleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_RoleInfo::MergeFrom(const UM_RoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::com::suyin::proto::role_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_RoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_RoleInfo::CopyFrom(const UM_RoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_RoleInfo::IsInitialized() const {

  return true;
}

void UM_RoleInfo::Swap(UM_RoleInfo* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_RoleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_RoleInfo_descriptor_;
  metadata.reflection = UM_RoleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_ReqFans::kTypeFieldNumber;
const int UM_ReqFans::kRange1FieldNumber;
const int UM_ReqFans::kRange2FieldNumber;
const int UM_ReqFans::kRoleidFieldNumber;
#endif  // !_MSC_VER

UM_ReqFans::UM_ReqFans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_ReqFans)
}

void UM_ReqFans::InitAsDefaultInstance() {
}

UM_ReqFans::UM_ReqFans(const UM_ReqFans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_ReqFans)
}

void UM_ReqFans::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  range1_ = 0u;
  range2_ = 0u;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_ReqFans::~UM_ReqFans() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_ReqFans)
  SharedDtor();
}

void UM_ReqFans::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_ReqFans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_ReqFans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_ReqFans_descriptor_;
}

const UM_ReqFans& UM_ReqFans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_ReqFans* UM_ReqFans::default_instance_ = NULL;

UM_ReqFans* UM_ReqFans::New() const {
  return new UM_ReqFans;
}

void UM_ReqFans::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UM_ReqFans*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, roleid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_ReqFans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_ReqFans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_range1;
        break;
      }

      // optional uint32 range1 = 2;
      case 2: {
        if (tag == 16) {
         parse_range1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range1_)));
          set_has_range1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_range2;
        break;
      }

      // optional uint32 range2 = 3;
      case 3: {
        if (tag == 24) {
         parse_range2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range2_)));
          set_has_range2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_roleid;
        break;
      }

      // optional uint32 roleid = 4;
      case 4: {
        if (tag == 32) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_ReqFans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_ReqFans)
  return false;
#undef DO_
}

void UM_ReqFans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_ReqFans)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional uint32 range1 = 2;
  if (has_range1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->range1(), output);
  }

  // optional uint32 range2 = 3;
  if (has_range2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->range2(), output);
  }

  // optional uint32 roleid = 4;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_ReqFans)
}

::google::protobuf::uint8* UM_ReqFans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_ReqFans)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional uint32 range1 = 2;
  if (has_range1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->range1(), target);
  }

  // optional uint32 range2 = 3;
  if (has_range2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->range2(), target);
  }

  // optional uint32 roleid = 4;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_ReqFans)
  return target;
}

int UM_ReqFans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional uint32 range1 = 2;
    if (has_range1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->range1());
    }

    // optional uint32 range2 = 3;
    if (has_range2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->range2());
    }

    // optional uint32 roleid = 4;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_ReqFans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_ReqFans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_ReqFans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_ReqFans::MergeFrom(const UM_ReqFans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_range1()) {
      set_range1(from.range1());
    }
    if (from.has_range2()) {
      set_range2(from.range2());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_ReqFans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_ReqFans::CopyFrom(const UM_ReqFans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_ReqFans::IsInitialized() const {

  return true;
}

void UM_ReqFans::Swap(UM_ReqFans* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(range1_, other->range1_);
    std::swap(range2_, other->range2_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_ReqFans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_ReqFans_descriptor_;
  metadata.reflection = UM_ReqFans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_Fans::kListFieldNumber;
const int UM_Fans::kRange1FieldNumber;
const int UM_Fans::kRange2FieldNumber;
const int UM_Fans::kRoleidFieldNumber;
#endif  // !_MSC_VER

UM_Fans::UM_Fans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_Fans)
}

void UM_Fans::InitAsDefaultInstance() {
}

UM_Fans::UM_Fans(const UM_Fans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_Fans)
}

void UM_Fans::SharedCtor() {
  _cached_size_ = 0;
  range1_ = 0u;
  range2_ = 0u;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_Fans::~UM_Fans() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_Fans)
  SharedDtor();
}

void UM_Fans::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_Fans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_Fans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_Fans_descriptor_;
}

const UM_Fans& UM_Fans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_Fans* UM_Fans::default_instance_ = NULL;

UM_Fans* UM_Fans::New() const {
  return new UM_Fans;
}

void UM_Fans::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UM_Fans*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(range1_, roleid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_Fans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_Fans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.suyin.proto.fans_info list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(16)) goto parse_range1;
        break;
      }

      // optional uint32 range1 = 2;
      case 2: {
        if (tag == 16) {
         parse_range1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range1_)));
          set_has_range1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_range2;
        break;
      }

      // optional uint32 range2 = 3;
      case 3: {
        if (tag == 24) {
         parse_range2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range2_)));
          set_has_range2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_roleid;
        break;
      }

      // optional uint32 roleid = 4;
      case 4: {
        if (tag == 32) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_Fans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_Fans)
  return false;
#undef DO_
}

void UM_Fans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_Fans)
  // repeated .com.suyin.proto.fans_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional uint32 range1 = 2;
  if (has_range1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->range1(), output);
  }

  // optional uint32 range2 = 3;
  if (has_range2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->range2(), output);
  }

  // optional uint32 roleid = 4;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_Fans)
}

::google::protobuf::uint8* UM_Fans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_Fans)
  // repeated .com.suyin.proto.fans_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional uint32 range1 = 2;
  if (has_range1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->range1(), target);
  }

  // optional uint32 range2 = 3;
  if (has_range2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->range2(), target);
  }

  // optional uint32 roleid = 4;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_Fans)
  return target;
}

int UM_Fans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 range1 = 2;
    if (has_range1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->range1());
    }

    // optional uint32 range2 = 3;
    if (has_range2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->range2());
    }

    // optional uint32 roleid = 4;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }

  }
  // repeated .com.suyin.proto.fans_info list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_Fans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_Fans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_Fans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_Fans::MergeFrom(const UM_Fans& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_range1()) {
      set_range1(from.range1());
    }
    if (from.has_range2()) {
      set_range2(from.range2());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_Fans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_Fans::CopyFrom(const UM_Fans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_Fans::IsInitialized() const {

  return true;
}

void UM_Fans::Swap(UM_Fans* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(range1_, other->range1_);
    std::swap(range2_, other->range2_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_Fans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_Fans_descriptor_;
  metadata.reflection = UM_Fans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_ReqRanks::kTypeFieldNumber;
const int UM_ReqRanks::kSubtypeFieldNumber;
#endif  // !_MSC_VER

UM_ReqRanks::UM_ReqRanks()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_ReqRanks)
}

void UM_ReqRanks::InitAsDefaultInstance() {
}

UM_ReqRanks::UM_ReqRanks(const UM_ReqRanks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_ReqRanks)
}

void UM_ReqRanks::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  subtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_ReqRanks::~UM_ReqRanks() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_ReqRanks)
  SharedDtor();
}

void UM_ReqRanks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_ReqRanks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_ReqRanks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_ReqRanks_descriptor_;
}

const UM_ReqRanks& UM_ReqRanks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_ReqRanks* UM_ReqRanks::default_instance_ = NULL;

UM_ReqRanks* UM_ReqRanks::New() const {
  return new UM_ReqRanks;
}

void UM_ReqRanks::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UM_ReqRanks*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, subtype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_ReqRanks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_ReqRanks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_subtype;
        break;
      }

      // optional int32 subtype = 2;
      case 2: {
        if (tag == 16) {
         parse_subtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subtype_)));
          set_has_subtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_ReqRanks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_ReqRanks)
  return false;
#undef DO_
}

void UM_ReqRanks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_ReqRanks)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 subtype = 2;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->subtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_ReqRanks)
}

::google::protobuf::uint8* UM_ReqRanks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_ReqRanks)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 subtype = 2;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->subtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_ReqRanks)
  return target;
}

int UM_ReqRanks::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 subtype = 2;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_ReqRanks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_ReqRanks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_ReqRanks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_ReqRanks::MergeFrom(const UM_ReqRanks& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_ReqRanks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_ReqRanks::CopyFrom(const UM_ReqRanks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_ReqRanks::IsInitialized() const {

  return true;
}

void UM_ReqRanks::Swap(UM_ReqRanks* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(subtype_, other->subtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_ReqRanks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_ReqRanks_descriptor_;
  metadata.reflection = UM_ReqRanks_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_Ranks::kListFieldNumber;
#endif  // !_MSC_VER

UM_Ranks::UM_Ranks()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_Ranks)
}

void UM_Ranks::InitAsDefaultInstance() {
}

UM_Ranks::UM_Ranks(const UM_Ranks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_Ranks)
}

void UM_Ranks::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_Ranks::~UM_Ranks() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_Ranks)
  SharedDtor();
}

void UM_Ranks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_Ranks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_Ranks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_Ranks_descriptor_;
}

const UM_Ranks& UM_Ranks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_Ranks* UM_Ranks::default_instance_ = NULL;

UM_Ranks* UM_Ranks::New() const {
  return new UM_Ranks;
}

void UM_Ranks::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_Ranks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_Ranks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.suyin.proto.rank_info list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_Ranks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_Ranks)
  return false;
#undef DO_
}

void UM_Ranks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_Ranks)
  // repeated .com.suyin.proto.rank_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_Ranks)
}

::google::protobuf::uint8* UM_Ranks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_Ranks)
  // repeated .com.suyin.proto.rank_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_Ranks)
  return target;
}

int UM_Ranks::ByteSize() const {
  int total_size = 0;

  // repeated .com.suyin.proto.rank_info list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_Ranks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_Ranks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_Ranks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_Ranks::MergeFrom(const UM_Ranks& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_Ranks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_Ranks::CopyFrom(const UM_Ranks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_Ranks::IsInitialized() const {

  return true;
}

void UM_Ranks::Swap(UM_Ranks* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_Ranks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_Ranks_descriptor_;
  metadata.reflection = UM_Ranks_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_FightLikes::kAttentionsFieldNumber;
const int UM_FightLikes::kLikesFieldNumber;
const int UM_FightLikes::kRolesFieldNumber;
#endif  // !_MSC_VER

UM_FightLikes::UM_FightLikes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_FightLikes)
}

void UM_FightLikes::InitAsDefaultInstance() {
}

UM_FightLikes::UM_FightLikes(const UM_FightLikes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_FightLikes)
}

void UM_FightLikes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_FightLikes::~UM_FightLikes() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_FightLikes)
  SharedDtor();
}

void UM_FightLikes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_FightLikes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_FightLikes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_FightLikes_descriptor_;
}

const UM_FightLikes& UM_FightLikes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_FightLikes* UM_FightLikes::default_instance_ = NULL;

UM_FightLikes* UM_FightLikes::New() const {
  return new UM_FightLikes;
}

void UM_FightLikes::Clear() {
  attentions_.Clear();
  likes_.Clear();
  roles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_FightLikes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_FightLikes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool attentions = 1;
      case 1: {
        if (tag == 8) {
         parse_attentions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 8, input, this->mutable_attentions())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_attentions())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_attentions;
        if (input->ExpectTag(16)) goto parse_likes;
        break;
      }

      // repeated bool likes = 2;
      case 2: {
        if (tag == 16) {
         parse_likes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 16, input, this->mutable_likes())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_likes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_likes;
        if (input->ExpectTag(24)) goto parse_roles;
        break;
      }

      // repeated uint32 roles = 3;
      case 3: {
        if (tag == 24) {
         parse_roles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_roles())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_roles())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_roles;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_FightLikes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_FightLikes)
  return false;
#undef DO_
}

void UM_FightLikes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_FightLikes)
  // repeated bool attentions = 1;
  for (int i = 0; i < this->attentions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      1, this->attentions(i), output);
  }

  // repeated bool likes = 2;
  for (int i = 0; i < this->likes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      2, this->likes(i), output);
  }

  // repeated uint32 roles = 3;
  for (int i = 0; i < this->roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->roles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_FightLikes)
}

::google::protobuf::uint8* UM_FightLikes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_FightLikes)
  // repeated bool attentions = 1;
  for (int i = 0; i < this->attentions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(1, this->attentions(i), target);
  }

  // repeated bool likes = 2;
  for (int i = 0; i < this->likes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(2, this->likes(i), target);
  }

  // repeated uint32 roles = 3;
  for (int i = 0; i < this->roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->roles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_FightLikes)
  return target;
}

int UM_FightLikes::ByteSize() const {
  int total_size = 0;

  // repeated bool attentions = 1;
  {
    int data_size = 0;
    data_size = 1 * this->attentions_size();
    total_size += 1 * this->attentions_size() + data_size;
  }

  // repeated bool likes = 2;
  {
    int data_size = 0;
    data_size = 1 * this->likes_size();
    total_size += 1 * this->likes_size() + data_size;
  }

  // repeated uint32 roles = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->roles_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->roles(i));
    }
    total_size += 1 * this->roles_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_FightLikes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_FightLikes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_FightLikes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_FightLikes::MergeFrom(const UM_FightLikes& from) {
  GOOGLE_CHECK_NE(&from, this);
  attentions_.MergeFrom(from.attentions_);
  likes_.MergeFrom(from.likes_);
  roles_.MergeFrom(from.roles_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_FightLikes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_FightLikes::CopyFrom(const UM_FightLikes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_FightLikes::IsInitialized() const {

  return true;
}

void UM_FightLikes::Swap(UM_FightLikes* other) {
  if (other != this) {
    attentions_.Swap(&other->attentions_);
    likes_.Swap(&other->likes_);
    roles_.Swap(&other->roles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_FightLikes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_FightLikes_descriptor_;
  metadata.reflection = UM_FightLikes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_GetTopMsg::kRoleidFieldNumber;
#endif  // !_MSC_VER

UM_GetTopMsg::UM_GetTopMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_GetTopMsg)
}

void UM_GetTopMsg::InitAsDefaultInstance() {
}

UM_GetTopMsg::UM_GetTopMsg(const UM_GetTopMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_GetTopMsg)
}

void UM_GetTopMsg::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_GetTopMsg::~UM_GetTopMsg() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_GetTopMsg)
  SharedDtor();
}

void UM_GetTopMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_GetTopMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_GetTopMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_GetTopMsg_descriptor_;
}

const UM_GetTopMsg& UM_GetTopMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_GetTopMsg* UM_GetTopMsg::default_instance_ = NULL;

UM_GetTopMsg* UM_GetTopMsg::New() const {
  return new UM_GetTopMsg;
}

void UM_GetTopMsg::Clear() {
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_GetTopMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_GetTopMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 roleid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_GetTopMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_GetTopMsg)
  return false;
#undef DO_
}

void UM_GetTopMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_GetTopMsg)
  // optional uint32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_GetTopMsg)
}

::google::protobuf::uint8* UM_GetTopMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_GetTopMsg)
  // optional uint32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_GetTopMsg)
  return target;
}

int UM_GetTopMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_GetTopMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_GetTopMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_GetTopMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_GetTopMsg::MergeFrom(const UM_GetTopMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_GetTopMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_GetTopMsg::CopyFrom(const UM_GetTopMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_GetTopMsg::IsInitialized() const {

  return true;
}

void UM_GetTopMsg::Swap(UM_GetTopMsg* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_GetTopMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_GetTopMsg_descriptor_;
  metadata.reflection = UM_GetTopMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_GetMsg::kRoleidFieldNumber;
const int UM_GetMsg::kRange1FieldNumber;
const int UM_GetMsg::kRange2FieldNumber;
#endif  // !_MSC_VER

UM_GetMsg::UM_GetMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_GetMsg)
}

void UM_GetMsg::InitAsDefaultInstance() {
}

UM_GetMsg::UM_GetMsg(const UM_GetMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_GetMsg)
}

void UM_GetMsg::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  range1_ = 0u;
  range2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_GetMsg::~UM_GetMsg() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_GetMsg)
  SharedDtor();
}

void UM_GetMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_GetMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_GetMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_GetMsg_descriptor_;
}

const UM_GetMsg& UM_GetMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_GetMsg* UM_GetMsg::default_instance_ = NULL;

UM_GetMsg* UM_GetMsg::New() const {
  return new UM_GetMsg;
}

void UM_GetMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UM_GetMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roleid_, range2_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_GetMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_GetMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 roleid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_range1;
        break;
      }

      // optional uint32 range1 = 2;
      case 2: {
        if (tag == 16) {
         parse_range1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range1_)));
          set_has_range1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_range2;
        break;
      }

      // optional uint32 range2 = 3;
      case 3: {
        if (tag == 24) {
         parse_range2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range2_)));
          set_has_range2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_GetMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_GetMsg)
  return false;
#undef DO_
}

void UM_GetMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_GetMsg)
  // optional uint32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roleid(), output);
  }

  // optional uint32 range1 = 2;
  if (has_range1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->range1(), output);
  }

  // optional uint32 range2 = 3;
  if (has_range2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->range2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_GetMsg)
}

::google::protobuf::uint8* UM_GetMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_GetMsg)
  // optional uint32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roleid(), target);
  }

  // optional uint32 range1 = 2;
  if (has_range1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->range1(), target);
  }

  // optional uint32 range2 = 3;
  if (has_range2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->range2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_GetMsg)
  return target;
}

int UM_GetMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }

    // optional uint32 range1 = 2;
    if (has_range1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->range1());
    }

    // optional uint32 range2 = 3;
    if (has_range2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->range2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_GetMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_GetMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_GetMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_GetMsg::MergeFrom(const UM_GetMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_range1()) {
      set_range1(from.range1());
    }
    if (from.has_range2()) {
      set_range2(from.range2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_GetMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_GetMsg::CopyFrom(const UM_GetMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_GetMsg::IsInitialized() const {

  return true;
}

void UM_GetMsg::Swap(UM_GetMsg* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(range1_, other->range1_);
    std::swap(range2_, other->range2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_GetMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_GetMsg_descriptor_;
  metadata.reflection = UM_GetMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_SendMsg::kRoleidFieldNumber;
const int UM_SendMsg::kContentFieldNumber;
#endif  // !_MSC_VER

UM_SendMsg::UM_SendMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_SendMsg)
}

void UM_SendMsg::InitAsDefaultInstance() {
}

UM_SendMsg::UM_SendMsg(const UM_SendMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_SendMsg)
}

void UM_SendMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roleid_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_SendMsg::~UM_SendMsg() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_SendMsg)
  SharedDtor();
}

void UM_SendMsg::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void UM_SendMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_SendMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_SendMsg_descriptor_;
}

const UM_SendMsg& UM_SendMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_SendMsg* UM_SendMsg::default_instance_ = NULL;

UM_SendMsg* UM_SendMsg::New() const {
  return new UM_SendMsg;
}

void UM_SendMsg::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    roleid_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_SendMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_SendMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 roleid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_SendMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_SendMsg)
  return false;
#undef DO_
}

void UM_SendMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_SendMsg)
  // optional uint32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roleid(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_SendMsg)
}

::google::protobuf::uint8* UM_SendMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_SendMsg)
  // optional uint32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roleid(), target);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_SendMsg)
  return target;
}

int UM_SendMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_SendMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_SendMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_SendMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_SendMsg::MergeFrom(const UM_SendMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_SendMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_SendMsg::CopyFrom(const UM_SendMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_SendMsg::IsInitialized() const {

  return true;
}

void UM_SendMsg::Swap(UM_SendMsg* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_SendMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_SendMsg_descriptor_;
  metadata.reflection = UM_SendMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_LikeMsg::kRoleidFieldNumber;
const int UM_LikeMsg::kMsgidFieldNumber;
const int UM_LikeMsg::kSetFieldNumber;
#endif  // !_MSC_VER

UM_LikeMsg::UM_LikeMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_LikeMsg)
}

void UM_LikeMsg::InitAsDefaultInstance() {
}

UM_LikeMsg::UM_LikeMsg(const UM_LikeMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_LikeMsg)
}

void UM_LikeMsg::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  msgid_ = 0u;
  set_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_LikeMsg::~UM_LikeMsg() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_LikeMsg)
  SharedDtor();
}

void UM_LikeMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_LikeMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_LikeMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_LikeMsg_descriptor_;
}

const UM_LikeMsg& UM_LikeMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_LikeMsg* UM_LikeMsg::default_instance_ = NULL;

UM_LikeMsg* UM_LikeMsg::New() const {
  return new UM_LikeMsg;
}

void UM_LikeMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UM_LikeMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roleid_, set_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_LikeMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_LikeMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 roleid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgid;
        break;
      }

      // optional uint32 msgid = 2;
      case 2: {
        if (tag == 16) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_set;
        break;
      }

      // optional int32 set = 3;
      case 3: {
        if (tag == 24) {
         parse_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_)));
          set_has_set();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_LikeMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_LikeMsg)
  return false;
#undef DO_
}

void UM_LikeMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_LikeMsg)
  // optional uint32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roleid(), output);
  }

  // optional uint32 msgid = 2;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msgid(), output);
  }

  // optional int32 set = 3;
  if (has_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->set(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_LikeMsg)
}

::google::protobuf::uint8* UM_LikeMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_LikeMsg)
  // optional uint32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roleid(), target);
  }

  // optional uint32 msgid = 2;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msgid(), target);
  }

  // optional int32 set = 3;
  if (has_set()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->set(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_LikeMsg)
  return target;
}

int UM_LikeMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }

    // optional uint32 msgid = 2;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // optional int32 set = 3;
    if (has_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->set());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_LikeMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_LikeMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_LikeMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_LikeMsg::MergeFrom(const UM_LikeMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_set()) {
      set_set(from.set());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_LikeMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_LikeMsg::CopyFrom(const UM_LikeMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_LikeMsg::IsInitialized() const {

  return true;
}

void UM_LikeMsg::Swap(UM_LikeMsg* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(msgid_, other->msgid_);
    std::swap(set_, other->set_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_LikeMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_LikeMsg_descriptor_;
  metadata.reflection = UM_LikeMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_TopMsg::kRoleidFieldNumber;
const int UM_TopMsg::kListFieldNumber;
#endif  // !_MSC_VER

UM_TopMsg::UM_TopMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_TopMsg)
}

void UM_TopMsg::InitAsDefaultInstance() {
}

UM_TopMsg::UM_TopMsg(const UM_TopMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_TopMsg)
}

void UM_TopMsg::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_TopMsg::~UM_TopMsg() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_TopMsg)
  SharedDtor();
}

void UM_TopMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_TopMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_TopMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_TopMsg_descriptor_;
}

const UM_TopMsg& UM_TopMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_TopMsg* UM_TopMsg::default_instance_ = NULL;

UM_TopMsg* UM_TopMsg::New() const {
  return new UM_TopMsg;
}

void UM_TopMsg::Clear() {
  roleid_ = 0u;
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_TopMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_TopMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 roleid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }

      // repeated .com.suyin.proto.msg_info list = 2;
      case 2: {
        if (tag == 18) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_TopMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_TopMsg)
  return false;
#undef DO_
}

void UM_TopMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_TopMsg)
  // optional uint32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roleid(), output);
  }

  // repeated .com.suyin.proto.msg_info list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_TopMsg)
}

::google::protobuf::uint8* UM_TopMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_TopMsg)
  // optional uint32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roleid(), target);
  }

  // repeated .com.suyin.proto.msg_info list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_TopMsg)
  return target;
}

int UM_TopMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }

  }
  // repeated .com.suyin.proto.msg_info list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_TopMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_TopMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_TopMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_TopMsg::MergeFrom(const UM_TopMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_TopMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_TopMsg::CopyFrom(const UM_TopMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_TopMsg::IsInitialized() const {

  return true;
}

void UM_TopMsg::Swap(UM_TopMsg* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_TopMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_TopMsg_descriptor_;
  metadata.reflection = UM_TopMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_MsgList::kRoleidFieldNumber;
const int UM_MsgList::kRange1FieldNumber;
const int UM_MsgList::kRange2FieldNumber;
const int UM_MsgList::kListFieldNumber;
#endif  // !_MSC_VER

UM_MsgList::UM_MsgList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_MsgList)
}

void UM_MsgList::InitAsDefaultInstance() {
}

UM_MsgList::UM_MsgList(const UM_MsgList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_MsgList)
}

void UM_MsgList::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  range1_ = 0u;
  range2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_MsgList::~UM_MsgList() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_MsgList)
  SharedDtor();
}

void UM_MsgList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_MsgList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_MsgList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_MsgList_descriptor_;
}

const UM_MsgList& UM_MsgList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_MsgList* UM_MsgList::default_instance_ = NULL;

UM_MsgList* UM_MsgList::New() const {
  return new UM_MsgList;
}

void UM_MsgList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UM_MsgList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(roleid_, range1_);
    range2_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_MsgList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_MsgList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 roleid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_range1;
        break;
      }

      // optional uint32 range1 = 2;
      case 2: {
        if (tag == 16) {
         parse_range1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range1_)));
          set_has_range1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_range2;
        break;
      }

      // optional uint32 range2 = 3;
      case 3: {
        if (tag == 24) {
         parse_range2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range2_)));
          set_has_range2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_list;
        break;
      }

      // repeated .com.suyin.proto.msg_info list = 4;
      case 4: {
        if (tag == 34) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_MsgList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_MsgList)
  return false;
#undef DO_
}

void UM_MsgList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_MsgList)
  // optional uint32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roleid(), output);
  }

  // optional uint32 range1 = 2;
  if (has_range1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->range1(), output);
  }

  // optional uint32 range2 = 3;
  if (has_range2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->range2(), output);
  }

  // repeated .com.suyin.proto.msg_info list = 4;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_MsgList)
}

::google::protobuf::uint8* UM_MsgList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_MsgList)
  // optional uint32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roleid(), target);
  }

  // optional uint32 range1 = 2;
  if (has_range1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->range1(), target);
  }

  // optional uint32 range2 = 3;
  if (has_range2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->range2(), target);
  }

  // repeated .com.suyin.proto.msg_info list = 4;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_MsgList)
  return target;
}

int UM_MsgList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }

    // optional uint32 range1 = 2;
    if (has_range1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->range1());
    }

    // optional uint32 range2 = 3;
    if (has_range2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->range2());
    }

  }
  // repeated .com.suyin.proto.msg_info list = 4;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_MsgList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_MsgList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_MsgList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_MsgList::MergeFrom(const UM_MsgList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_range1()) {
      set_range1(from.range1());
    }
    if (from.has_range2()) {
      set_range2(from.range2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_MsgList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_MsgList::CopyFrom(const UM_MsgList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_MsgList::IsInitialized() const {

  return true;
}

void UM_MsgList::Swap(UM_MsgList* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(range1_, other->range1_);
    std::swap(range2_, other->range2_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_MsgList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_MsgList_descriptor_;
  metadata.reflection = UM_MsgList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_GetFriend::kTypeFieldNumber;
#endif  // !_MSC_VER

UM_GetFriend::UM_GetFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_GetFriend)
}

void UM_GetFriend::InitAsDefaultInstance() {
}

UM_GetFriend::UM_GetFriend(const UM_GetFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_GetFriend)
}

void UM_GetFriend::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_GetFriend::~UM_GetFriend() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_GetFriend)
  SharedDtor();
}

void UM_GetFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_GetFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_GetFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_GetFriend_descriptor_;
}

const UM_GetFriend& UM_GetFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_GetFriend* UM_GetFriend::default_instance_ = NULL;

UM_GetFriend* UM_GetFriend::New() const {
  return new UM_GetFriend;
}

void UM_GetFriend::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_GetFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_GetFriend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_GetFriend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_GetFriend)
  return false;
#undef DO_
}

void UM_GetFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_GetFriend)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_GetFriend)
}

::google::protobuf::uint8* UM_GetFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_GetFriend)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_GetFriend)
  return target;
}

int UM_GetFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_GetFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_GetFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_GetFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_GetFriend::MergeFrom(const UM_GetFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_GetFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_GetFriend::CopyFrom(const UM_GetFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_GetFriend::IsInitialized() const {

  return true;
}

void UM_GetFriend::Swap(UM_GetFriend* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_GetFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_GetFriend_descriptor_;
  metadata.reflection = UM_GetFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_Friends::kListFieldNumber;
const int UM_Friends::kTypeFieldNumber;
#endif  // !_MSC_VER

UM_Friends::UM_Friends()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_Friends)
}

void UM_Friends::InitAsDefaultInstance() {
}

UM_Friends::UM_Friends(const UM_Friends& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_Friends)
}

void UM_Friends::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_Friends::~UM_Friends() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_Friends)
  SharedDtor();
}

void UM_Friends::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_Friends::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_Friends::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_Friends_descriptor_;
}

const UM_Friends& UM_Friends::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_Friends* UM_Friends::default_instance_ = NULL;

UM_Friends* UM_Friends::New() const {
  return new UM_Friends;
}

void UM_Friends::Clear() {
  type_ = 0;
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_Friends::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_Friends)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.suyin.proto.friend_info list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_Friends)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_Friends)
  return false;
#undef DO_
}

void UM_Friends::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_Friends)
  // repeated .com.suyin.proto.friend_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_Friends)
}

::google::protobuf::uint8* UM_Friends::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_Friends)
  // repeated .com.suyin.proto.friend_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_Friends)
  return target;
}

int UM_Friends::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .com.suyin.proto.friend_info list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_Friends::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_Friends* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_Friends*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_Friends::MergeFrom(const UM_Friends& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_Friends::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_Friends::CopyFrom(const UM_Friends& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_Friends::IsInitialized() const {

  return true;
}

void UM_Friends::Swap(UM_Friends* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_Friends::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_Friends_descriptor_;
  metadata.reflection = UM_Friends_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_ResponseInvite::kOkFieldNumber;
const int UM_ResponseInvite::kRoleidFieldNumber;
#endif  // !_MSC_VER

UM_ResponseInvite::UM_ResponseInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_ResponseInvite)
}

void UM_ResponseInvite::InitAsDefaultInstance() {
}

UM_ResponseInvite::UM_ResponseInvite(const UM_ResponseInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_ResponseInvite)
}

void UM_ResponseInvite::SharedCtor() {
  _cached_size_ = 0;
  ok_ = 0;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_ResponseInvite::~UM_ResponseInvite() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_ResponseInvite)
  SharedDtor();
}

void UM_ResponseInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_ResponseInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_ResponseInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_ResponseInvite_descriptor_;
}

const UM_ResponseInvite& UM_ResponseInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_ResponseInvite* UM_ResponseInvite::default_instance_ = NULL;

UM_ResponseInvite* UM_ResponseInvite::New() const {
  return new UM_ResponseInvite;
}

void UM_ResponseInvite::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UM_ResponseInvite*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ok_, roleid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_ResponseInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_ResponseInvite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ok = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ok_)));
          set_has_ok();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_roleid;
        break;
      }

      // optional uint32 roleid = 2;
      case 2: {
        if (tag == 16) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_ResponseInvite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_ResponseInvite)
  return false;
#undef DO_
}

void UM_ResponseInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_ResponseInvite)
  // optional int32 ok = 1;
  if (has_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ok(), output);
  }

  // optional uint32 roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_ResponseInvite)
}

::google::protobuf::uint8* UM_ResponseInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_ResponseInvite)
  // optional int32 ok = 1;
  if (has_ok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ok(), target);
  }

  // optional uint32 roleid = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_ResponseInvite)
  return target;
}

int UM_ResponseInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ok = 1;
    if (has_ok()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ok());
    }

    // optional uint32 roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_ResponseInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_ResponseInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_ResponseInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_ResponseInvite::MergeFrom(const UM_ResponseInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ok()) {
      set_ok(from.ok());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_ResponseInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_ResponseInvite::CopyFrom(const UM_ResponseInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_ResponseInvite::IsInitialized() const {

  return true;
}

void UM_ResponseInvite::Swap(UM_ResponseInvite* other) {
  if (other != this) {
    std::swap(ok_, other->ok_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_ResponseInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_ResponseInvite_descriptor_;
  metadata.reflection = UM_ResponseInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_AddFriend::kTypeFieldNumber;
const int UM_AddFriend::kInfoFieldNumber;
#endif  // !_MSC_VER

UM_AddFriend::UM_AddFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_AddFriend)
}

void UM_AddFriend::InitAsDefaultInstance() {
  info_ = const_cast< ::com::suyin::proto::friend_info*>(&::com::suyin::proto::friend_info::default_instance());
}

UM_AddFriend::UM_AddFriend(const UM_AddFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_AddFriend)
}

void UM_AddFriend::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_AddFriend::~UM_AddFriend() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_AddFriend)
  SharedDtor();
}

void UM_AddFriend::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void UM_AddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_AddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_AddFriend_descriptor_;
}

const UM_AddFriend& UM_AddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_AddFriend* UM_AddFriend::default_instance_ = NULL;

UM_AddFriend* UM_AddFriend::New() const {
  return new UM_AddFriend;
}

void UM_AddFriend::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::com::suyin::proto::friend_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_AddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_AddFriend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .com.suyin.proto.friend_info info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_AddFriend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_AddFriend)
  return false;
#undef DO_
}

void UM_AddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_AddFriend)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional .com.suyin.proto.friend_info info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_AddFriend)
}

::google::protobuf::uint8* UM_AddFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_AddFriend)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional .com.suyin.proto.friend_info info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_AddFriend)
  return target;
}

int UM_AddFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .com.suyin.proto.friend_info info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_AddFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_AddFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_AddFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_AddFriend::MergeFrom(const UM_AddFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_info()) {
      mutable_info()->::com::suyin::proto::friend_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_AddFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_AddFriend::CopyFrom(const UM_AddFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_AddFriend::IsInitialized() const {

  return true;
}

void UM_AddFriend::Swap(UM_AddFriend* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_AddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_AddFriend_descriptor_;
  metadata.reflection = UM_AddFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_InviteFriend::kRoleidFieldNumber;
const int UM_InviteFriend::kNameFieldNumber;
#endif  // !_MSC_VER

UM_InviteFriend::UM_InviteFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_InviteFriend)
}

void UM_InviteFriend::InitAsDefaultInstance() {
}

UM_InviteFriend::UM_InviteFriend(const UM_InviteFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_InviteFriend)
}

void UM_InviteFriend::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roleid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_InviteFriend::~UM_InviteFriend() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_InviteFriend)
  SharedDtor();
}

void UM_InviteFriend::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void UM_InviteFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_InviteFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_InviteFriend_descriptor_;
}

const UM_InviteFriend& UM_InviteFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_InviteFriend* UM_InviteFriend::default_instance_ = NULL;

UM_InviteFriend* UM_InviteFriend::New() const {
  return new UM_InviteFriend;
}

void UM_InviteFriend::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    roleid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_InviteFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_InviteFriend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 roleid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_InviteFriend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_InviteFriend)
  return false;
#undef DO_
}

void UM_InviteFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_InviteFriend)
  // optional uint32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roleid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_InviteFriend)
}

::google::protobuf::uint8* UM_InviteFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_InviteFriend)
  // optional uint32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roleid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_InviteFriend)
  return target;
}

int UM_InviteFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_InviteFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_InviteFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_InviteFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_InviteFriend::MergeFrom(const UM_InviteFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_InviteFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_InviteFriend::CopyFrom(const UM_InviteFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_InviteFriend::IsInitialized() const {

  return true;
}

void UM_InviteFriend::Swap(UM_InviteFriend* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_InviteFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_InviteFriend_descriptor_;
  metadata.reflection = UM_InviteFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_AddInvite::kTypeFieldNumber;
const int UM_AddInvite::kInfoFieldNumber;
#endif  // !_MSC_VER

UM_AddInvite::UM_AddInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_AddInvite)
}

void UM_AddInvite::InitAsDefaultInstance() {
  info_ = const_cast< ::com::suyin::proto::friend_info*>(&::com::suyin::proto::friend_info::default_instance());
}

UM_AddInvite::UM_AddInvite(const UM_AddInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_AddInvite)
}

void UM_AddInvite::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_AddInvite::~UM_AddInvite() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_AddInvite)
  SharedDtor();
}

void UM_AddInvite::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void UM_AddInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_AddInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_AddInvite_descriptor_;
}

const UM_AddInvite& UM_AddInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_AddInvite* UM_AddInvite::default_instance_ = NULL;

UM_AddInvite* UM_AddInvite::New() const {
  return new UM_AddInvite;
}

void UM_AddInvite::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::com::suyin::proto::friend_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_AddInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_AddInvite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .com.suyin.proto.friend_info info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_AddInvite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_AddInvite)
  return false;
#undef DO_
}

void UM_AddInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_AddInvite)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional .com.suyin.proto.friend_info info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_AddInvite)
}

::google::protobuf::uint8* UM_AddInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_AddInvite)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional .com.suyin.proto.friend_info info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_AddInvite)
  return target;
}

int UM_AddInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .com.suyin.proto.friend_info info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_AddInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_AddInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_AddInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_AddInvite::MergeFrom(const UM_AddInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_info()) {
      mutable_info()->::com::suyin::proto::friend_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_AddInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_AddInvite::CopyFrom(const UM_AddInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_AddInvite::IsInitialized() const {

  return true;
}

void UM_AddInvite::Swap(UM_AddInvite* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_AddInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_AddInvite_descriptor_;
  metadata.reflection = UM_AddInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_DelInvite::kTypeFieldNumber;
const int UM_DelInvite::kInfoFieldNumber;
#endif  // !_MSC_VER

UM_DelInvite::UM_DelInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_DelInvite)
}

void UM_DelInvite::InitAsDefaultInstance() {
  info_ = const_cast< ::com::suyin::proto::friend_info*>(&::com::suyin::proto::friend_info::default_instance());
}

UM_DelInvite::UM_DelInvite(const UM_DelInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_DelInvite)
}

void UM_DelInvite::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_DelInvite::~UM_DelInvite() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_DelInvite)
  SharedDtor();
}

void UM_DelInvite::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void UM_DelInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_DelInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_DelInvite_descriptor_;
}

const UM_DelInvite& UM_DelInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_DelInvite* UM_DelInvite::default_instance_ = NULL;

UM_DelInvite* UM_DelInvite::New() const {
  return new UM_DelInvite;
}

void UM_DelInvite::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::com::suyin::proto::friend_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_DelInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_DelInvite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .com.suyin.proto.friend_info info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_DelInvite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_DelInvite)
  return false;
#undef DO_
}

void UM_DelInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_DelInvite)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional .com.suyin.proto.friend_info info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_DelInvite)
}

::google::protobuf::uint8* UM_DelInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_DelInvite)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional .com.suyin.proto.friend_info info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_DelInvite)
  return target;
}

int UM_DelInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .com.suyin.proto.friend_info info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_DelInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_DelInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_DelInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_DelInvite::MergeFrom(const UM_DelInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_info()) {
      mutable_info()->::com::suyin::proto::friend_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_DelInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_DelInvite::CopyFrom(const UM_DelInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_DelInvite::IsInitialized() const {

  return true;
}

void UM_DelInvite::Swap(UM_DelInvite* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_DelInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_DelInvite_descriptor_;
  metadata.reflection = UM_DelInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_ToBlack::kRoleidFieldNumber;
#endif  // !_MSC_VER

UM_ToBlack::UM_ToBlack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_ToBlack)
}

void UM_ToBlack::InitAsDefaultInstance() {
}

UM_ToBlack::UM_ToBlack(const UM_ToBlack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_ToBlack)
}

void UM_ToBlack::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_ToBlack::~UM_ToBlack() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_ToBlack)
  SharedDtor();
}

void UM_ToBlack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_ToBlack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_ToBlack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_ToBlack_descriptor_;
}

const UM_ToBlack& UM_ToBlack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_ToBlack* UM_ToBlack::default_instance_ = NULL;

UM_ToBlack* UM_ToBlack::New() const {
  return new UM_ToBlack;
}

void UM_ToBlack::Clear() {
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_ToBlack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_ToBlack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 roleid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_ToBlack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_ToBlack)
  return false;
#undef DO_
}

void UM_ToBlack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_ToBlack)
  // optional uint32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_ToBlack)
}

::google::protobuf::uint8* UM_ToBlack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_ToBlack)
  // optional uint32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_ToBlack)
  return target;
}

int UM_ToBlack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_ToBlack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_ToBlack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_ToBlack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_ToBlack::MergeFrom(const UM_ToBlack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_ToBlack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_ToBlack::CopyFrom(const UM_ToBlack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_ToBlack::IsInitialized() const {

  return true;
}

void UM_ToBlack::Swap(UM_ToBlack* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_ToBlack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_ToBlack_descriptor_;
  metadata.reflection = UM_ToBlack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_AddBlack::kInfoFieldNumber;
#endif  // !_MSC_VER

UM_AddBlack::UM_AddBlack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_AddBlack)
}

void UM_AddBlack::InitAsDefaultInstance() {
  info_ = const_cast< ::com::suyin::proto::friend_info*>(&::com::suyin::proto::friend_info::default_instance());
}

UM_AddBlack::UM_AddBlack(const UM_AddBlack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_AddBlack)
}

void UM_AddBlack::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_AddBlack::~UM_AddBlack() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_AddBlack)
  SharedDtor();
}

void UM_AddBlack::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void UM_AddBlack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_AddBlack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_AddBlack_descriptor_;
}

const UM_AddBlack& UM_AddBlack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_AddBlack* UM_AddBlack::default_instance_ = NULL;

UM_AddBlack* UM_AddBlack::New() const {
  return new UM_AddBlack;
}

void UM_AddBlack::Clear() {
  if (has_info()) {
    if (info_ != NULL) info_->::com::suyin::proto::friend_info::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_AddBlack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_AddBlack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.suyin.proto.friend_info info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_AddBlack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_AddBlack)
  return false;
#undef DO_
}

void UM_AddBlack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_AddBlack)
  // optional .com.suyin.proto.friend_info info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_AddBlack)
}

::google::protobuf::uint8* UM_AddBlack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_AddBlack)
  // optional .com.suyin.proto.friend_info info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_AddBlack)
  return target;
}

int UM_AddBlack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.suyin.proto.friend_info info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_AddBlack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_AddBlack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_AddBlack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_AddBlack::MergeFrom(const UM_AddBlack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::com::suyin::proto::friend_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_AddBlack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_AddBlack::CopyFrom(const UM_AddBlack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_AddBlack::IsInitialized() const {

  return true;
}

void UM_AddBlack::Swap(UM_AddBlack* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_AddBlack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_AddBlack_descriptor_;
  metadata.reflection = UM_AddBlack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_ReqSeasonRank::kRoleidFieldNumber;
#endif  // !_MSC_VER

UM_ReqSeasonRank::UM_ReqSeasonRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_ReqSeasonRank)
}

void UM_ReqSeasonRank::InitAsDefaultInstance() {
}

UM_ReqSeasonRank::UM_ReqSeasonRank(const UM_ReqSeasonRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_ReqSeasonRank)
}

void UM_ReqSeasonRank::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_ReqSeasonRank::~UM_ReqSeasonRank() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_ReqSeasonRank)
  SharedDtor();
}

void UM_ReqSeasonRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_ReqSeasonRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_ReqSeasonRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_ReqSeasonRank_descriptor_;
}

const UM_ReqSeasonRank& UM_ReqSeasonRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_ReqSeasonRank* UM_ReqSeasonRank::default_instance_ = NULL;

UM_ReqSeasonRank* UM_ReqSeasonRank::New() const {
  return new UM_ReqSeasonRank;
}

void UM_ReqSeasonRank::Clear() {
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_ReqSeasonRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_ReqSeasonRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 roleid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_ReqSeasonRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_ReqSeasonRank)
  return false;
#undef DO_
}

void UM_ReqSeasonRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_ReqSeasonRank)
  // optional uint32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_ReqSeasonRank)
}

::google::protobuf::uint8* UM_ReqSeasonRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_ReqSeasonRank)
  // optional uint32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_ReqSeasonRank)
  return target;
}

int UM_ReqSeasonRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_ReqSeasonRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_ReqSeasonRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_ReqSeasonRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_ReqSeasonRank::MergeFrom(const UM_ReqSeasonRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_ReqSeasonRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_ReqSeasonRank::CopyFrom(const UM_ReqSeasonRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_ReqSeasonRank::IsInitialized() const {

  return true;
}

void UM_ReqSeasonRank::Swap(UM_ReqSeasonRank* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_ReqSeasonRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_ReqSeasonRank_descriptor_;
  metadata.reflection = UM_ReqSeasonRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_SeasonRank::kListFieldNumber;
#endif  // !_MSC_VER

UM_SeasonRank::UM_SeasonRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_SeasonRank)
}

void UM_SeasonRank::InitAsDefaultInstance() {
}

UM_SeasonRank::UM_SeasonRank(const UM_SeasonRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_SeasonRank)
}

void UM_SeasonRank::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_SeasonRank::~UM_SeasonRank() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_SeasonRank)
  SharedDtor();
}

void UM_SeasonRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_SeasonRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_SeasonRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_SeasonRank_descriptor_;
}

const UM_SeasonRank& UM_SeasonRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_SeasonRank* UM_SeasonRank::default_instance_ = NULL;

UM_SeasonRank* UM_SeasonRank::New() const {
  return new UM_SeasonRank;
}

void UM_SeasonRank::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_SeasonRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_SeasonRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.suyin.proto.season_rank list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_SeasonRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_SeasonRank)
  return false;
#undef DO_
}

void UM_SeasonRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_SeasonRank)
  // repeated .com.suyin.proto.season_rank list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_SeasonRank)
}

::google::protobuf::uint8* UM_SeasonRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_SeasonRank)
  // repeated .com.suyin.proto.season_rank list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_SeasonRank)
  return target;
}

int UM_SeasonRank::ByteSize() const {
  int total_size = 0;

  // repeated .com.suyin.proto.season_rank list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_SeasonRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_SeasonRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_SeasonRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_SeasonRank::MergeFrom(const UM_SeasonRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_SeasonRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_SeasonRank::CopyFrom(const UM_SeasonRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_SeasonRank::IsInitialized() const {

  return true;
}

void UM_SeasonRank::Swap(UM_SeasonRank* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_SeasonRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_SeasonRank_descriptor_;
  metadata.reflection = UM_SeasonRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_ReqGameRecord::kRoleidFieldNumber;
#endif  // !_MSC_VER

UM_ReqGameRecord::UM_ReqGameRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_ReqGameRecord)
}

void UM_ReqGameRecord::InitAsDefaultInstance() {
}

UM_ReqGameRecord::UM_ReqGameRecord(const UM_ReqGameRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_ReqGameRecord)
}

void UM_ReqGameRecord::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_ReqGameRecord::~UM_ReqGameRecord() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_ReqGameRecord)
  SharedDtor();
}

void UM_ReqGameRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_ReqGameRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_ReqGameRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_ReqGameRecord_descriptor_;
}

const UM_ReqGameRecord& UM_ReqGameRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_ReqGameRecord* UM_ReqGameRecord::default_instance_ = NULL;

UM_ReqGameRecord* UM_ReqGameRecord::New() const {
  return new UM_ReqGameRecord;
}

void UM_ReqGameRecord::Clear() {
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_ReqGameRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_ReqGameRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 roleid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_ReqGameRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_ReqGameRecord)
  return false;
#undef DO_
}

void UM_ReqGameRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_ReqGameRecord)
  // optional uint32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_ReqGameRecord)
}

::google::protobuf::uint8* UM_ReqGameRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_ReqGameRecord)
  // optional uint32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_ReqGameRecord)
  return target;
}

int UM_ReqGameRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_ReqGameRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_ReqGameRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_ReqGameRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_ReqGameRecord::MergeFrom(const UM_ReqGameRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_ReqGameRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_ReqGameRecord::CopyFrom(const UM_ReqGameRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_ReqGameRecord::IsInitialized() const {

  return true;
}

void UM_ReqGameRecord::Swap(UM_ReqGameRecord* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_ReqGameRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_ReqGameRecord_descriptor_;
  metadata.reflection = UM_ReqGameRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_GameRecord::kListFieldNumber;
#endif  // !_MSC_VER

UM_GameRecord::UM_GameRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_GameRecord)
}

void UM_GameRecord::InitAsDefaultInstance() {
}

UM_GameRecord::UM_GameRecord(const UM_GameRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_GameRecord)
}

void UM_GameRecord::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_GameRecord::~UM_GameRecord() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_GameRecord)
  SharedDtor();
}

void UM_GameRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_GameRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_GameRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_GameRecord_descriptor_;
}

const UM_GameRecord& UM_GameRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_GameRecord* UM_GameRecord::default_instance_ = NULL;

UM_GameRecord* UM_GameRecord::New() const {
  return new UM_GameRecord;
}

void UM_GameRecord::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_GameRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_GameRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.suyin.proto.game_record list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_GameRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_GameRecord)
  return false;
#undef DO_
}

void UM_GameRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_GameRecord)
  // repeated .com.suyin.proto.game_record list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_GameRecord)
}

::google::protobuf::uint8* UM_GameRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_GameRecord)
  // repeated .com.suyin.proto.game_record list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_GameRecord)
  return target;
}

int UM_GameRecord::ByteSize() const {
  int total_size = 0;

  // repeated .com.suyin.proto.game_record list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_GameRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_GameRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_GameRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_GameRecord::MergeFrom(const UM_GameRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_GameRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_GameRecord::CopyFrom(const UM_GameRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_GameRecord::IsInitialized() const {

  return true;
}

void UM_GameRecord::Swap(UM_GameRecord* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_GameRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_GameRecord_descriptor_;
  metadata.reflection = UM_GameRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_SetPhoto::kDataFieldNumber;
#endif  // !_MSC_VER

UM_SetPhoto::UM_SetPhoto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_SetPhoto)
}

void UM_SetPhoto::InitAsDefaultInstance() {
  data_ = const_cast< ::com::suyin::proto::photo_data*>(&::com::suyin::proto::photo_data::default_instance());
}

UM_SetPhoto::UM_SetPhoto(const UM_SetPhoto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_SetPhoto)
}

void UM_SetPhoto::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_SetPhoto::~UM_SetPhoto() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_SetPhoto)
  SharedDtor();
}

void UM_SetPhoto::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void UM_SetPhoto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_SetPhoto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_SetPhoto_descriptor_;
}

const UM_SetPhoto& UM_SetPhoto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_SetPhoto* UM_SetPhoto::default_instance_ = NULL;

UM_SetPhoto* UM_SetPhoto::New() const {
  return new UM_SetPhoto;
}

void UM_SetPhoto::Clear() {
  if (has_data()) {
    if (data_ != NULL) data_->::com::suyin::proto::photo_data::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_SetPhoto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_SetPhoto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.suyin.proto.photo_data data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_SetPhoto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_SetPhoto)
  return false;
#undef DO_
}

void UM_SetPhoto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_SetPhoto)
  // optional .com.suyin.proto.photo_data data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_SetPhoto)
}

::google::protobuf::uint8* UM_SetPhoto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_SetPhoto)
  // optional .com.suyin.proto.photo_data data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_SetPhoto)
  return target;
}

int UM_SetPhoto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.suyin.proto.photo_data data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_SetPhoto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_SetPhoto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_SetPhoto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_SetPhoto::MergeFrom(const UM_SetPhoto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::com::suyin::proto::photo_data::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_SetPhoto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_SetPhoto::CopyFrom(const UM_SetPhoto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_SetPhoto::IsInitialized() const {

  return true;
}

void UM_SetPhoto::Swap(UM_SetPhoto* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_SetPhoto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_SetPhoto_descriptor_;
  metadata.reflection = UM_SetPhoto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_ReqPhotos::kRoleidFieldNumber;
#endif  // !_MSC_VER

UM_ReqPhotos::UM_ReqPhotos()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_ReqPhotos)
}

void UM_ReqPhotos::InitAsDefaultInstance() {
}

UM_ReqPhotos::UM_ReqPhotos(const UM_ReqPhotos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_ReqPhotos)
}

void UM_ReqPhotos::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_ReqPhotos::~UM_ReqPhotos() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_ReqPhotos)
  SharedDtor();
}

void UM_ReqPhotos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_ReqPhotos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_ReqPhotos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_ReqPhotos_descriptor_;
}

const UM_ReqPhotos& UM_ReqPhotos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_ReqPhotos* UM_ReqPhotos::default_instance_ = NULL;

UM_ReqPhotos* UM_ReqPhotos::New() const {
  return new UM_ReqPhotos;
}

void UM_ReqPhotos::Clear() {
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_ReqPhotos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_ReqPhotos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 roleid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_ReqPhotos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_ReqPhotos)
  return false;
#undef DO_
}

void UM_ReqPhotos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_ReqPhotos)
  // optional uint32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_ReqPhotos)
}

::google::protobuf::uint8* UM_ReqPhotos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_ReqPhotos)
  // optional uint32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_ReqPhotos)
  return target;
}

int UM_ReqPhotos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_ReqPhotos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_ReqPhotos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_ReqPhotos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_ReqPhotos::MergeFrom(const UM_ReqPhotos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_ReqPhotos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_ReqPhotos::CopyFrom(const UM_ReqPhotos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_ReqPhotos::IsInitialized() const {

  return true;
}

void UM_ReqPhotos::Swap(UM_ReqPhotos* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_ReqPhotos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_ReqPhotos_descriptor_;
  metadata.reflection = UM_ReqPhotos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_Photos::kListFieldNumber;
const int UM_Photos::kRoleidFieldNumber;
#endif  // !_MSC_VER

UM_Photos::UM_Photos()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_Photos)
}

void UM_Photos::InitAsDefaultInstance() {
}

UM_Photos::UM_Photos(const UM_Photos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_Photos)
}

void UM_Photos::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_Photos::~UM_Photos() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_Photos)
  SharedDtor();
}

void UM_Photos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_Photos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_Photos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_Photos_descriptor_;
}

const UM_Photos& UM_Photos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_Photos* UM_Photos::default_instance_ = NULL;

UM_Photos* UM_Photos::New() const {
  return new UM_Photos;
}

void UM_Photos::Clear() {
  roleid_ = 0u;
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_Photos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_Photos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.suyin.proto.photo_data list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(16)) goto parse_roleid;
        break;
      }

      // optional uint32 roleid = 2;
      case 2: {
        if (tag == 16) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_Photos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_Photos)
  return false;
#undef DO_
}

void UM_Photos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_Photos)
  // repeated .com.suyin.proto.photo_data list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional uint32 roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_Photos)
}

::google::protobuf::uint8* UM_Photos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_Photos)
  // repeated .com.suyin.proto.photo_data list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional uint32 roleid = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_Photos)
  return target;
}

int UM_Photos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }

  }
  // repeated .com.suyin.proto.photo_data list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_Photos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_Photos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_Photos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_Photos::MergeFrom(const UM_Photos& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_Photos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_Photos::CopyFrom(const UM_Photos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_Photos::IsInitialized() const {

  return true;
}

void UM_Photos::Swap(UM_Photos* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_Photos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_Photos_descriptor_;
  metadata.reflection = UM_Photos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_SetName::kNameFieldNumber;
const int UM_SetName::kPasswdFieldNumber;
const int UM_SetName::kSexFieldNumber;
#endif  // !_MSC_VER

UM_SetName::UM_SetName()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_SetName)
}

void UM_SetName::InitAsDefaultInstance() {
}

UM_SetName::UM_SetName(const UM_SetName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_SetName)
}

void UM_SetName::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_SetName::~UM_SetName() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_SetName)
  SharedDtor();
}

void UM_SetName::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void UM_SetName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_SetName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_SetName_descriptor_;
}

const UM_SetName& UM_SetName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_SetName* UM_SetName::default_instance_ = NULL;

UM_SetName* UM_SetName::New() const {
  return new UM_SetName;
}

void UM_SetName::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        passwd_->clear();
      }
    }
    sex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_SetName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_SetName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_passwd;
        break;
      }

      // optional string passwd = 2;
      case 2: {
        if (tag == 18) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "passwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 3;
      case 3: {
        if (tag == 24) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_SetName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_SetName)
  return false;
#undef DO_
}

void UM_SetName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_SetName)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string passwd = 2;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->passwd(), output);
  }

  // optional uint32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_SetName)
}

::google::protobuf::uint8* UM_SetName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_SetName)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string passwd = 2;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->passwd(), target);
  }

  // optional uint32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_SetName)
  return target;
}

int UM_SetName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string passwd = 2;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }

    // optional uint32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_SetName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_SetName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_SetName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_SetName::MergeFrom(const UM_SetName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_SetName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_SetName::CopyFrom(const UM_SetName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_SetName::IsInitialized() const {

  return true;
}

void UM_SetName::Swap(UM_SetName* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(passwd_, other->passwd_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_SetName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_SetName_descriptor_;
  metadata.reflection = UM_SetName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_SetSex::kSexFieldNumber;
#endif  // !_MSC_VER

UM_SetSex::UM_SetSex()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_SetSex)
}

void UM_SetSex::InitAsDefaultInstance() {
}

UM_SetSex::UM_SetSex(const UM_SetSex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_SetSex)
}

void UM_SetSex::SharedCtor() {
  _cached_size_ = 0;
  sex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_SetSex::~UM_SetSex() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_SetSex)
  SharedDtor();
}

void UM_SetSex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_SetSex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_SetSex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_SetSex_descriptor_;
}

const UM_SetSex& UM_SetSex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_SetSex* UM_SetSex::default_instance_ = NULL;

UM_SetSex* UM_SetSex::New() const {
  return new UM_SetSex;
}

void UM_SetSex::Clear() {
  sex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_SetSex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_SetSex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_SetSex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_SetSex)
  return false;
#undef DO_
}

void UM_SetSex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_SetSex)
  // optional uint32 sex = 1;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_SetSex)
}

::google::protobuf::uint8* UM_SetSex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_SetSex)
  // optional uint32 sex = 1;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_SetSex)
  return target;
}

int UM_SetSex::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sex = 1;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_SetSex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_SetSex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_SetSex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_SetSex::MergeFrom(const UM_SetSex& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_SetSex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_SetSex::CopyFrom(const UM_SetSex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_SetSex::IsInitialized() const {

  return true;
}

void UM_SetSex::Swap(UM_SetSex* other) {
  if (other != this) {
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_SetSex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_SetSex_descriptor_;
  metadata.reflection = UM_SetSex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_SetDesc::kDescFieldNumber;
#endif  // !_MSC_VER

UM_SetDesc::UM_SetDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_SetDesc)
}

void UM_SetDesc::InitAsDefaultInstance() {
}

UM_SetDesc::UM_SetDesc(const UM_SetDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_SetDesc)
}

void UM_SetDesc::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_SetDesc::~UM_SetDesc() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_SetDesc)
  SharedDtor();
}

void UM_SetDesc::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void UM_SetDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_SetDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_SetDesc_descriptor_;
}

const UM_SetDesc& UM_SetDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_SetDesc* UM_SetDesc::default_instance_ = NULL;

UM_SetDesc* UM_SetDesc::New() const {
  return new UM_SetDesc;
}

void UM_SetDesc::Clear() {
  if (has_desc()) {
    if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      desc_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_SetDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_SetDesc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string desc = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_SetDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_SetDesc)
  return false;
#undef DO_
}

void UM_SetDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_SetDesc)
  // optional string desc = 1;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_SetDesc)
}

::google::protobuf::uint8* UM_SetDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_SetDesc)
  // optional string desc = 1;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_SetDesc)
  return target;
}

int UM_SetDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string desc = 1;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_SetDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_SetDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_SetDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_SetDesc::MergeFrom(const UM_SetDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_SetDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_SetDesc::CopyFrom(const UM_SetDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_SetDesc::IsInitialized() const {

  return true;
}

void UM_SetDesc::Swap(UM_SetDesc* other) {
  if (other != this) {
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_SetDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_SetDesc_descriptor_;
  metadata.reflection = UM_SetDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_SetGeo::kProvinceFieldNumber;
const int UM_SetGeo::kCityFieldNumber;
#endif  // !_MSC_VER

UM_SetGeo::UM_SetGeo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_SetGeo)
}

void UM_SetGeo::InitAsDefaultInstance() {
}

UM_SetGeo::UM_SetGeo(const UM_SetGeo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_SetGeo)
}

void UM_SetGeo::SharedCtor() {
  _cached_size_ = 0;
  province_ = 0u;
  city_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_SetGeo::~UM_SetGeo() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_SetGeo)
  SharedDtor();
}

void UM_SetGeo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_SetGeo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_SetGeo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_SetGeo_descriptor_;
}

const UM_SetGeo& UM_SetGeo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_SetGeo* UM_SetGeo::default_instance_ = NULL;

UM_SetGeo* UM_SetGeo::New() const {
  return new UM_SetGeo;
}

void UM_SetGeo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UM_SetGeo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(province_, city_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_SetGeo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_SetGeo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 province = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &province_)));
          set_has_province();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_city;
        break;
      }

      // optional uint32 city = 2;
      case 2: {
        if (tag == 16) {
         parse_city:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_)));
          set_has_city();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_SetGeo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_SetGeo)
  return false;
#undef DO_
}

void UM_SetGeo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_SetGeo)
  // optional uint32 province = 1;
  if (has_province()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->province(), output);
  }

  // optional uint32 city = 2;
  if (has_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->city(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_SetGeo)
}

::google::protobuf::uint8* UM_SetGeo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_SetGeo)
  // optional uint32 province = 1;
  if (has_province()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->province(), target);
  }

  // optional uint32 city = 2;
  if (has_city()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->city(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_SetGeo)
  return target;
}

int UM_SetGeo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 province = 1;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->province());
    }

    // optional uint32 city = 2;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_SetGeo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_SetGeo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_SetGeo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_SetGeo::MergeFrom(const UM_SetGeo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_province()) {
      set_province(from.province());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_SetGeo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_SetGeo::CopyFrom(const UM_SetGeo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_SetGeo::IsInitialized() const {

  return true;
}

void UM_SetGeo::Swap(UM_SetGeo* other) {
  if (other != this) {
    std::swap(province_, other->province_);
    std::swap(city_, other->city_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_SetGeo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_SetGeo_descriptor_;
  metadata.reflection = UM_SetGeo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_SetIcon::kIconFieldNumber;
const int UM_SetIcon::kDataFieldNumber;
#endif  // !_MSC_VER

UM_SetIcon::UM_SetIcon()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_SetIcon)
}

void UM_SetIcon::InitAsDefaultInstance() {
}

UM_SetIcon::UM_SetIcon(const UM_SetIcon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_SetIcon)
}

void UM_SetIcon::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  icon_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_SetIcon::~UM_SetIcon() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_SetIcon)
  SharedDtor();
}

void UM_SetIcon::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void UM_SetIcon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_SetIcon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_SetIcon_descriptor_;
}

const UM_SetIcon& UM_SetIcon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_SetIcon* UM_SetIcon::default_instance_ = NULL;

UM_SetIcon* UM_SetIcon::New() const {
  return new UM_SetIcon;
}

void UM_SetIcon::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    icon_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_SetIcon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_SetIcon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 icon = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &icon_)));
          set_has_icon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional string data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_SetIcon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_SetIcon)
  return false;
#undef DO_
}

void UM_SetIcon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_SetIcon)
  // optional uint32 icon = 1;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->icon(), output);
  }

  // optional string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_SetIcon)
}

::google::protobuf::uint8* UM_SetIcon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_SetIcon)
  // optional uint32 icon = 1;
  if (has_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->icon(), target);
  }

  // optional string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_SetIcon)
  return target;
}

int UM_SetIcon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 icon = 1;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->icon());
    }

    // optional string data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_SetIcon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_SetIcon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_SetIcon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_SetIcon::MergeFrom(const UM_SetIcon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_SetIcon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_SetIcon::CopyFrom(const UM_SetIcon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_SetIcon::IsInitialized() const {

  return true;
}

void UM_SetIcon::Swap(UM_SetIcon* other) {
  if (other != this) {
    std::swap(icon_, other->icon_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_SetIcon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_SetIcon_descriptor_;
  metadata.reflection = UM_SetIcon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UM_GetTicket::UM_GetTicket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_GetTicket)
}

void UM_GetTicket::InitAsDefaultInstance() {
}

UM_GetTicket::UM_GetTicket(const UM_GetTicket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_GetTicket)
}

void UM_GetTicket::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_GetTicket::~UM_GetTicket() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_GetTicket)
  SharedDtor();
}

void UM_GetTicket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_GetTicket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_GetTicket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_GetTicket_descriptor_;
}

const UM_GetTicket& UM_GetTicket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_GetTicket* UM_GetTicket::default_instance_ = NULL;

UM_GetTicket* UM_GetTicket::New() const {
  return new UM_GetTicket;
}

void UM_GetTicket::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_GetTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_GetTicket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_GetTicket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_GetTicket)
  return false;
#undef DO_
}

void UM_GetTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_GetTicket)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_GetTicket)
}

::google::protobuf::uint8* UM_GetTicket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_GetTicket)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_GetTicket)
  return target;
}

int UM_GetTicket::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_GetTicket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_GetTicket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_GetTicket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_GetTicket::MergeFrom(const UM_GetTicket& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_GetTicket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_GetTicket::CopyFrom(const UM_GetTicket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_GetTicket::IsInitialized() const {

  return true;
}

void UM_GetTicket::Swap(UM_GetTicket* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_GetTicket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_GetTicket_descriptor_;
  metadata.reflection = UM_GetTicket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_ReqIcons::kListFieldNumber;
#endif  // !_MSC_VER

UM_ReqIcons::UM_ReqIcons()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_ReqIcons)
}

void UM_ReqIcons::InitAsDefaultInstance() {
}

UM_ReqIcons::UM_ReqIcons(const UM_ReqIcons& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_ReqIcons)
}

void UM_ReqIcons::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_ReqIcons::~UM_ReqIcons() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_ReqIcons)
  SharedDtor();
}

void UM_ReqIcons::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_ReqIcons::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_ReqIcons::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_ReqIcons_descriptor_;
}

const UM_ReqIcons& UM_ReqIcons::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_ReqIcons* UM_ReqIcons::default_instance_ = NULL;

UM_ReqIcons* UM_ReqIcons::New() const {
  return new UM_ReqIcons;
}

void UM_ReqIcons::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_ReqIcons::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_ReqIcons)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 list = 1;
      case 1: {
        if (tag == 8) {
         parse_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_list())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_ReqIcons)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_ReqIcons)
  return false;
#undef DO_
}

void UM_ReqIcons::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_ReqIcons)
  // repeated uint32 list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_ReqIcons)
}

::google::protobuf::uint8* UM_ReqIcons::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_ReqIcons)
  // repeated uint32 list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_ReqIcons)
  return target;
}

int UM_ReqIcons::ByteSize() const {
  int total_size = 0;

  // repeated uint32 list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->list(i));
    }
    total_size += 1 * this->list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_ReqIcons::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_ReqIcons* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_ReqIcons*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_ReqIcons::MergeFrom(const UM_ReqIcons& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_ReqIcons::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_ReqIcons::CopyFrom(const UM_ReqIcons& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_ReqIcons::IsInitialized() const {

  return true;
}

void UM_ReqIcons::Swap(UM_ReqIcons* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_ReqIcons::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_ReqIcons_descriptor_;
  metadata.reflection = UM_ReqIcons_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_Icons::kListFieldNumber;
#endif  // !_MSC_VER

UM_Icons::UM_Icons()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_Icons)
}

void UM_Icons::InitAsDefaultInstance() {
}

UM_Icons::UM_Icons(const UM_Icons& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_Icons)
}

void UM_Icons::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_Icons::~UM_Icons() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_Icons)
  SharedDtor();
}

void UM_Icons::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_Icons::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_Icons::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_Icons_descriptor_;
}

const UM_Icons& UM_Icons::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_Icons* UM_Icons::default_instance_ = NULL;

UM_Icons* UM_Icons::New() const {
  return new UM_Icons;
}

void UM_Icons::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_Icons::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_Icons)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.suyin.proto.icon_data list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_Icons)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_Icons)
  return false;
#undef DO_
}

void UM_Icons::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_Icons)
  // repeated .com.suyin.proto.icon_data list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_Icons)
}

::google::protobuf::uint8* UM_Icons::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_Icons)
  // repeated .com.suyin.proto.icon_data list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_Icons)
  return target;
}

int UM_Icons::ByteSize() const {
  int total_size = 0;

  // repeated .com.suyin.proto.icon_data list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_Icons::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_Icons* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_Icons*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_Icons::MergeFrom(const UM_Icons& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_Icons::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_Icons::CopyFrom(const UM_Icons& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_Icons::IsInitialized() const {

  return true;
}

void UM_Icons::Swap(UM_Icons* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_Icons::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_Icons_descriptor_;
  metadata.reflection = UM_Icons_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UM_Sign::UM_Sign()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_Sign)
}

void UM_Sign::InitAsDefaultInstance() {
}

UM_Sign::UM_Sign(const UM_Sign& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_Sign)
}

void UM_Sign::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_Sign::~UM_Sign() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_Sign)
  SharedDtor();
}

void UM_Sign::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_Sign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_Sign::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_Sign_descriptor_;
}

const UM_Sign& UM_Sign::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_Sign* UM_Sign::default_instance_ = NULL;

UM_Sign* UM_Sign::New() const {
  return new UM_Sign;
}

void UM_Sign::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_Sign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_Sign)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_Sign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_Sign)
  return false;
#undef DO_
}

void UM_Sign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_Sign)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_Sign)
}

::google::protobuf::uint8* UM_Sign::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_Sign)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_Sign)
  return target;
}

int UM_Sign::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_Sign::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_Sign* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_Sign*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_Sign::MergeFrom(const UM_Sign& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_Sign::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_Sign::CopyFrom(const UM_Sign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_Sign::IsInitialized() const {

  return true;
}

void UM_Sign::Swap(UM_Sign* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_Sign::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_Sign_descriptor_;
  metadata.reflection = UM_Sign_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UM_Award::UM_Award()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_Award)
}

void UM_Award::InitAsDefaultInstance() {
}

UM_Award::UM_Award(const UM_Award& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_Award)
}

void UM_Award::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_Award::~UM_Award() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_Award)
  SharedDtor();
}

void UM_Award::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_Award::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_Award::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_Award_descriptor_;
}

const UM_Award& UM_Award::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_Award* UM_Award::default_instance_ = NULL;

UM_Award* UM_Award::New() const {
  return new UM_Award;
}

void UM_Award::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_Award::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_Award)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_Award)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_Award)
  return false;
#undef DO_
}

void UM_Award::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_Award)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_Award)
}

::google::protobuf::uint8* UM_Award::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_Award)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_Award)
  return target;
}

int UM_Award::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_Award::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_Award* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_Award*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_Award::MergeFrom(const UM_Award& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_Award::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_Award::CopyFrom(const UM_Award& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_Award::IsInitialized() const {

  return true;
}

void UM_Award::Swap(UM_Award* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_Award::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_Award_descriptor_;
  metadata.reflection = UM_Award_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UM_AwardList::kListFieldNumber;
#endif  // !_MSC_VER

UM_AwardList::UM_AwardList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.suyin.proto.UM_AwardList)
}

void UM_AwardList::InitAsDefaultInstance() {
}

UM_AwardList::UM_AwardList(const UM_AwardList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.suyin.proto.UM_AwardList)
}

void UM_AwardList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UM_AwardList::~UM_AwardList() {
  // @@protoc_insertion_point(destructor:com.suyin.proto.UM_AwardList)
  SharedDtor();
}

void UM_AwardList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UM_AwardList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UM_AwardList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UM_AwardList_descriptor_;
}

const UM_AwardList& UM_AwardList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fclient_2eproto();
  return *default_instance_;
}

UM_AwardList* UM_AwardList::default_instance_ = NULL;

UM_AwardList* UM_AwardList::New() const {
  return new UM_AwardList;
}

void UM_AwardList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UM_AwardList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.suyin.proto.UM_AwardList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.suyin.proto.award_info list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.suyin.proto.UM_AwardList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.suyin.proto.UM_AwardList)
  return false;
#undef DO_
}

void UM_AwardList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.suyin.proto.UM_AwardList)
  // repeated .com.suyin.proto.award_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.suyin.proto.UM_AwardList)
}

::google::protobuf::uint8* UM_AwardList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.suyin.proto.UM_AwardList)
  // repeated .com.suyin.proto.award_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.suyin.proto.UM_AwardList)
  return target;
}

int UM_AwardList::ByteSize() const {
  int total_size = 0;

  // repeated .com.suyin.proto.award_info list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UM_AwardList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UM_AwardList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UM_AwardList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UM_AwardList::MergeFrom(const UM_AwardList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UM_AwardList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UM_AwardList::CopyFrom(const UM_AwardList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UM_AwardList::IsInitialized() const {

  return true;
}

void UM_AwardList::Swap(UM_AwardList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UM_AwardList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UM_AwardList_descriptor_;
  metadata.reflection = UM_AwardList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace suyin
}  // namespace com

// @@protoc_insertion_point(global_scope)
