// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: struct.proto

#ifndef PROTOBUF_struct_2eproto__INCLUDED
#define PROTOBUF_struct_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "enum.pb.h"
// @@protoc_insertion_point(includes)

namespace com {
namespace suyin {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_struct_2eproto();
void protobuf_AssignDesc_struct_2eproto();
void protobuf_ShutdownFile_struct_2eproto();

class acc_info;
class role_info;
class award_info;
class award_list;
class item_info;
class item_list;
class shop_item;
class server_info;
class fans_info;
class rank_info;
class msg_info;
class msg_base;
class friend_info;
class game_record;
class season_rank;
class photo_data;
class icon_data;

// ===================================================================

class acc_info : public ::google::protobuf::Message {
 public:
  acc_info();
  virtual ~acc_info();

  acc_info(const acc_info& from);

  inline acc_info& operator=(const acc_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const acc_info& default_instance();

  void Swap(acc_info* other);

  // implements Message ----------------------------------------------

  acc_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const acc_info& from);
  void MergeFrom(const acc_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::uint32 roleid() const;
  inline void set_roleid(::google::protobuf::uint32 value);

  // optional uint32 gmlevel = 2;
  inline bool has_gmlevel() const;
  inline void clear_gmlevel();
  static const int kGmlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 gmlevel() const;
  inline void set_gmlevel(::google::protobuf::uint32 value);

  // optional string passwd = 3;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 3;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const char* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:com.suyin.proto.acc_info)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_gmlevel();
  inline void clear_has_gmlevel();
  inline void set_has_passwd();
  inline void clear_has_passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 roleid_;
  ::google::protobuf::uint32 gmlevel_;
  ::std::string* passwd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_struct_2eproto();
  friend void protobuf_AssignDesc_struct_2eproto();
  friend void protobuf_ShutdownFile_struct_2eproto();

  void InitAsDefaultInstance();
  static acc_info* default_instance_;
};
// -------------------------------------------------------------------

class role_info : public ::google::protobuf::Message {
 public:
  role_info();
  virtual ~role_info();

  role_info(const role_info& from);

  inline role_info& operator=(const role_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_info& default_instance();

  void Swap(role_info* other);

  // implements Message ----------------------------------------------

  role_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_info& from);
  void MergeFrom(const role_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::uint32 roleid() const;
  inline void set_roleid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 create_time = 3;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 create_time() const;
  inline void set_create_time(::google::protobuf::uint32 value);

  // optional uint32 icon = 4;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 4;
  inline ::google::protobuf::uint32 icon() const;
  inline void set_icon(::google::protobuf::uint32 value);

  // optional uint32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 copper = 7;
  inline bool has_copper() const;
  inline void clear_copper();
  static const int kCopperFieldNumber = 7;
  inline ::google::protobuf::uint32 copper() const;
  inline void set_copper(::google::protobuf::uint32 value);

  // optional uint32 gold = 8;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 8;
  inline ::google::protobuf::uint32 gold() const;
  inline void set_gold(::google::protobuf::uint32 value);

  // optional uint32 duanwei = 9;
  inline bool has_duanwei() const;
  inline void clear_duanwei();
  static const int kDuanweiFieldNumber = 9;
  inline ::google::protobuf::uint32 duanwei() const;
  inline void set_duanwei(::google::protobuf::uint32 value);

  // optional uint32 star = 10;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 10;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // optional uint32 mvp_cnt = 11;
  inline bool has_mvp_cnt() const;
  inline void clear_mvp_cnt();
  static const int kMvpCntFieldNumber = 11;
  inline ::google::protobuf::uint32 mvp_cnt() const;
  inline void set_mvp_cnt(::google::protobuf::uint32 value);

  // optional uint32 champion_cnt = 12;
  inline bool has_champion_cnt() const;
  inline void clear_champion_cnt();
  static const int kChampionCntFieldNumber = 12;
  inline ::google::protobuf::uint32 champion_cnt() const;
  inline void set_champion_cnt(::google::protobuf::uint32 value);

  // optional uint32 eat1_cnt = 13;
  inline bool has_eat1_cnt() const;
  inline void clear_eat1_cnt();
  static const int kEat1CntFieldNumber = 13;
  inline ::google::protobuf::uint32 eat1_cnt() const;
  inline void set_eat1_cnt(::google::protobuf::uint32 value);

  // optional uint32 eat2_cnt = 14;
  inline bool has_eat2_cnt() const;
  inline void clear_eat2_cnt();
  static const int kEat2CntFieldNumber = 14;
  inline ::google::protobuf::uint32 eat2_cnt() const;
  inline void set_eat2_cnt(::google::protobuf::uint32 value);

  // optional uint32 max_mass = 15;
  inline bool has_max_mass() const;
  inline void clear_max_mass();
  static const int kMaxMassFieldNumber = 15;
  inline ::google::protobuf::uint32 max_mass() const;
  inline void set_max_mass(::google::protobuf::uint32 value);

  // optional uint32 province = 16;
  inline bool has_province() const;
  inline void clear_province();
  static const int kProvinceFieldNumber = 16;
  inline ::google::protobuf::uint32 province() const;
  inline void set_province(::google::protobuf::uint32 value);

  // optional uint32 city = 17;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 17;
  inline ::google::protobuf::uint32 city() const;
  inline void set_city(::google::protobuf::uint32 value);

  // optional string describe = 18;
  inline bool has_describe() const;
  inline void clear_describe();
  static const int kDescribeFieldNumber = 18;
  inline const ::std::string& describe() const;
  inline void set_describe(const ::std::string& value);
  inline void set_describe(const char* value);
  inline void set_describe(const char* value, size_t size);
  inline ::std::string* mutable_describe();
  inline ::std::string* release_describe();
  inline void set_allocated_describe(::std::string* describe);

  // optional uint32 heroid = 19;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroidFieldNumber = 19;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional uint32 herolevel = 20;
  inline bool has_herolevel() const;
  inline void clear_herolevel();
  static const int kHerolevelFieldNumber = 20;
  inline ::google::protobuf::uint32 herolevel() const;
  inline void set_herolevel(::google::protobuf::uint32 value);

  // optional uint32 exp = 21;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 21;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // repeated .com.suyin.proto.item_info equips = 22;
  inline int equips_size() const;
  inline void clear_equips();
  static const int kEquipsFieldNumber = 22;
  inline const ::com::suyin::proto::item_info& equips(int index) const;
  inline ::com::suyin::proto::item_info* mutable_equips(int index);
  inline ::com::suyin::proto::item_info* add_equips();
  inline const ::google::protobuf::RepeatedPtrField< ::com::suyin::proto::item_info >&
      equips() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::suyin::proto::item_info >*
      mutable_equips();

  // optional uint32 free_ticket = 23;
  inline bool has_free_ticket() const;
  inline void clear_free_ticket();
  static const int kFreeTicketFieldNumber = 23;
  inline ::google::protobuf::uint32 free_ticket() const;
  inline void set_free_ticket(::google::protobuf::uint32 value);

  // optional uint32 refresh_time = 24;
  inline bool has_refresh_time() const;
  inline void clear_refresh_time();
  static const int kRefreshTimeFieldNumber = 24;
  inline ::google::protobuf::uint32 refresh_time() const;
  inline void set_refresh_time(::google::protobuf::uint32 value);

  // optional bool sign = 25;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 25;
  inline bool sign() const;
  inline void set_sign(bool value);

  // optional uint32 last_sign_time = 29;
  inline bool has_last_sign_time() const;
  inline void clear_last_sign_time();
  static const int kLastSignTimeFieldNumber = 29;
  inline ::google::protobuf::uint32 last_sign_time() const;
  inline void set_last_sign_time(::google::protobuf::uint32 value);

  // optional uint32 sign_tags = 30;
  inline bool has_sign_tags() const;
  inline void clear_sign_tags();
  static const int kSignTagsFieldNumber = 30;
  inline ::google::protobuf::uint32 sign_tags() const;
  inline void set_sign_tags(::google::protobuf::uint32 value);

  // optional uint32 award_refresh_time = 31;
  inline bool has_award_refresh_time() const;
  inline void clear_award_refresh_time();
  static const int kAwardRefreshTimeFieldNumber = 31;
  inline ::google::protobuf::uint32 award_refresh_time() const;
  inline void set_award_refresh_time(::google::protobuf::uint32 value);

  // repeated bool award_gots = 32;
  inline int award_gots_size() const;
  inline void clear_award_gots();
  static const int kAwardGotsFieldNumber = 32;
  inline bool award_gots(int index) const;
  inline void set_award_gots(int index, bool value);
  inline void add_award_gots(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      award_gots() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_award_gots();

  // @@protoc_insertion_point(class_scope:com.suyin.proto.role_info)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_copper();
  inline void clear_has_copper();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_duanwei();
  inline void clear_has_duanwei();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_mvp_cnt();
  inline void clear_has_mvp_cnt();
  inline void set_has_champion_cnt();
  inline void clear_has_champion_cnt();
  inline void set_has_eat1_cnt();
  inline void clear_has_eat1_cnt();
  inline void set_has_eat2_cnt();
  inline void clear_has_eat2_cnt();
  inline void set_has_max_mass();
  inline void clear_has_max_mass();
  inline void set_has_province();
  inline void clear_has_province();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_describe();
  inline void clear_has_describe();
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_herolevel();
  inline void clear_has_herolevel();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_free_ticket();
  inline void clear_has_free_ticket();
  inline void set_has_refresh_time();
  inline void clear_has_refresh_time();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_last_sign_time();
  inline void clear_has_last_sign_time();
  inline void set_has_sign_tags();
  inline void clear_has_sign_tags();
  inline void set_has_award_refresh_time();
  inline void clear_has_award_refresh_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 roleid_;
  ::google::protobuf::uint32 create_time_;
  ::google::protobuf::uint32 icon_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 copper_;
  ::google::protobuf::uint32 gold_;
  ::google::protobuf::uint32 duanwei_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::uint32 mvp_cnt_;
  ::google::protobuf::uint32 champion_cnt_;
  ::google::protobuf::uint32 eat1_cnt_;
  ::google::protobuf::uint32 eat2_cnt_;
  ::google::protobuf::uint32 max_mass_;
  ::google::protobuf::uint32 province_;
  ::google::protobuf::uint32 city_;
  ::std::string* describe_;
  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::uint32 herolevel_;
  ::google::protobuf::RepeatedPtrField< ::com::suyin::proto::item_info > equips_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 free_ticket_;
  ::google::protobuf::uint32 refresh_time_;
  bool sign_;
  ::google::protobuf::uint32 last_sign_time_;
  ::google::protobuf::uint32 sign_tags_;
  ::google::protobuf::RepeatedField< bool > award_gots_;
  ::google::protobuf::uint32 award_refresh_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(29 + 31) / 32];

  friend void  protobuf_AddDesc_struct_2eproto();
  friend void protobuf_AssignDesc_struct_2eproto();
  friend void protobuf_ShutdownFile_struct_2eproto();

  void InitAsDefaultInstance();
  static role_info* default_instance_;
};
// -------------------------------------------------------------------

class award_info : public ::google::protobuf::Message {
 public:
  award_info();
  virtual ~award_info();

  award_info(const award_info& from);

  inline award_info& operator=(const award_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const award_info& default_instance();

  void Swap(award_info* other);

  // implements Message ----------------------------------------------

  award_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const award_info& from);
  void MergeFrom(const award_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 day = 2;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 2;
  inline ::google::protobuf::uint32 day() const;
  inline void set_day(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.suyin.proto.award_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_day();
  inline void clear_has_day();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 day_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_struct_2eproto();
  friend void protobuf_AssignDesc_struct_2eproto();
  friend void protobuf_ShutdownFile_struct_2eproto();

  void InitAsDefaultInstance();
  static award_info* default_instance_;
};
// -------------------------------------------------------------------

class award_list : public ::google::protobuf::Message {
 public:
  award_list();
  virtual ~award_list();

  award_list(const award_list& from);

  inline award_list& operator=(const award_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const award_list& default_instance();

  void Swap(award_list* other);

  // implements Message ----------------------------------------------

  award_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const award_list& from);
  void MergeFrom(const award_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 refresh_time = 1;
  inline bool has_refresh_time() const;
  inline void clear_refresh_time();
  static const int kRefreshTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 refresh_time() const;
  inline void set_refresh_time(::google::protobuf::uint32 value);

  // repeated .com.suyin.proto.award_info list = 2;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 2;
  inline const ::com::suyin::proto::award_info& list(int index) const;
  inline ::com::suyin::proto::award_info* mutable_list(int index);
  inline ::com::suyin::proto::award_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::com::suyin::proto::award_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::suyin::proto::award_info >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:com.suyin.proto.award_list)
 private:
  inline void set_has_refresh_time();
  inline void clear_has_refresh_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::com::suyin::proto::award_info > list_;
  ::google::protobuf::uint32 refresh_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_struct_2eproto();
  friend void protobuf_AssignDesc_struct_2eproto();
  friend void protobuf_ShutdownFile_struct_2eproto();

  void InitAsDefaultInstance();
  static award_list* default_instance_;
};
// -------------------------------------------------------------------

class item_info : public ::google::protobuf::Message {
 public:
  item_info();
  virtual ~item_info();

  item_info(const item_info& from);

  inline item_info& operator=(const item_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const item_info& default_instance();

  void Swap(item_info* other);

  // implements Message ----------------------------------------------

  item_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const item_info& from);
  void MergeFrom(const item_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tpltid = 1;
  inline bool has_tpltid() const;
  inline void clear_tpltid();
  static const int kTpltidFieldNumber = 1;
  inline ::google::protobuf::uint32 tpltid() const;
  inline void set_tpltid(::google::protobuf::uint32 value);

  // optional uint32 stack = 3;
  inline bool has_stack() const;
  inline void clear_stack();
  static const int kStackFieldNumber = 3;
  inline ::google::protobuf::uint32 stack() const;
  inline void set_stack(::google::protobuf::uint32 value);

  // optional uint32 create_time = 4;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 create_time() const;
  inline void set_create_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.suyin.proto.item_info)
 private:
  inline void set_has_tpltid();
  inline void clear_has_tpltid();
  inline void set_has_stack();
  inline void clear_has_stack();
  inline void set_has_create_time();
  inline void clear_has_create_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 tpltid_;
  ::google::protobuf::uint32 stack_;
  ::google::protobuf::uint32 create_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_struct_2eproto();
  friend void protobuf_AssignDesc_struct_2eproto();
  friend void protobuf_ShutdownFile_struct_2eproto();

  void InitAsDefaultInstance();
  static item_info* default_instance_;
};
// -------------------------------------------------------------------

class item_list : public ::google::protobuf::Message {
 public:
  item_list();
  virtual ~item_list();

  item_list(const item_list& from);

  inline item_list& operator=(const item_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const item_list& default_instance();

  void Swap(item_list* other);

  // implements Message ----------------------------------------------

  item_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const item_list& from);
  void MergeFrom(const item_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.suyin.proto.item_info list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::com::suyin::proto::item_info& list(int index) const;
  inline ::com::suyin::proto::item_info* mutable_list(int index);
  inline ::com::suyin::proto::item_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::com::suyin::proto::item_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::suyin::proto::item_info >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:com.suyin.proto.item_list)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::com::suyin::proto::item_info > list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_struct_2eproto();
  friend void protobuf_AssignDesc_struct_2eproto();
  friend void protobuf_ShutdownFile_struct_2eproto();

  void InitAsDefaultInstance();
  static item_list* default_instance_;
};
// -------------------------------------------------------------------

class shop_item : public ::google::protobuf::Message {
 public:
  shop_item();
  virtual ~shop_item();

  shop_item(const shop_item& from);

  inline shop_item& operator=(const shop_item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const shop_item& default_instance();

  void Swap(shop_item* other);

  // implements Message ----------------------------------------------

  shop_item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const shop_item& from);
  void MergeFrom(const shop_item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tpltid = 1;
  inline bool has_tpltid() const;
  inline void clear_tpltid();
  static const int kTpltidFieldNumber = 1;
  inline ::google::protobuf::uint32 tpltid() const;
  inline void set_tpltid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.suyin.proto.shop_item)
 private:
  inline void set_has_tpltid();
  inline void clear_has_tpltid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 tpltid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_struct_2eproto();
  friend void protobuf_AssignDesc_struct_2eproto();
  friend void protobuf_ShutdownFile_struct_2eproto();

  void InitAsDefaultInstance();
  static shop_item* default_instance_;
};
// -------------------------------------------------------------------

class server_info : public ::google::protobuf::Message {
 public:
  server_info();
  virtual ~server_info();

  server_info(const server_info& from);

  inline server_info& operator=(const server_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const server_info& default_instance();

  void Swap(server_info* other);

  // implements Message ----------------------------------------------

  server_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const server_info& from);
  void MergeFrom(const server_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 serverid = 1;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 1;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // optional string serverip = 2;
  inline bool has_serverip() const;
  inline void clear_serverip();
  static const int kServeripFieldNumber = 2;
  inline const ::std::string& serverip() const;
  inline void set_serverip(const ::std::string& value);
  inline void set_serverip(const char* value);
  inline void set_serverip(const char* value, size_t size);
  inline ::std::string* mutable_serverip();
  inline ::std::string* release_serverip();
  inline void set_allocated_serverip(::std::string* serverip);

  // optional uint32 serverport = 3;
  inline bool has_serverport() const;
  inline void clear_serverport();
  static const int kServerportFieldNumber = 3;
  inline ::google::protobuf::uint32 serverport() const;
  inline void set_serverport(::google::protobuf::uint32 value);

  // optional string servername = 4;
  inline bool has_servername() const;
  inline void clear_servername();
  static const int kServernameFieldNumber = 4;
  inline const ::std::string& servername() const;
  inline void set_servername(const ::std::string& value);
  inline void set_servername(const char* value);
  inline void set_servername(const char* value, size_t size);
  inline ::std::string* mutable_servername();
  inline ::std::string* release_servername();
  inline void set_allocated_servername(::std::string* servername);

  // @@protoc_insertion_point(class_scope:com.suyin.proto.server_info)
 private:
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_serverip();
  inline void clear_has_serverip();
  inline void set_has_serverport();
  inline void clear_has_serverport();
  inline void set_has_servername();
  inline void clear_has_servername();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* serverip_;
  ::google::protobuf::uint32 serverid_;
  ::google::protobuf::uint32 serverport_;
  ::std::string* servername_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_struct_2eproto();
  friend void protobuf_AssignDesc_struct_2eproto();
  friend void protobuf_ShutdownFile_struct_2eproto();

  void InitAsDefaultInstance();
  static server_info* default_instance_;
};
// -------------------------------------------------------------------

class fans_info : public ::google::protobuf::Message {
 public:
  fans_info();
  virtual ~fans_info();

  fans_info(const fans_info& from);

  inline fans_info& operator=(const fans_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fans_info& default_instance();

  void Swap(fans_info* other);

  // implements Message ----------------------------------------------

  fans_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fans_info& from);
  void MergeFrom(const fans_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::uint32 roleid() const;
  inline void set_roleid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 icon = 3;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 3;
  inline ::google::protobuf::uint32 icon() const;
  inline void set_icon(::google::protobuf::uint32 value);

  // optional uint32 sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 count = 5;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 5;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.suyin.proto.fans_info)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 roleid_;
  ::google::protobuf::uint32 icon_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_struct_2eproto();
  friend void protobuf_AssignDesc_struct_2eproto();
  friend void protobuf_ShutdownFile_struct_2eproto();

  void InitAsDefaultInstance();
  static fans_info* default_instance_;
};
// -------------------------------------------------------------------

class rank_info : public ::google::protobuf::Message {
 public:
  rank_info();
  virtual ~rank_info();

  rank_info(const rank_info& from);

  inline rank_info& operator=(const rank_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rank_info& default_instance();

  void Swap(rank_info* other);

  // implements Message ----------------------------------------------

  rank_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rank_info& from);
  void MergeFrom(const rank_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::uint32 roleid() const;
  inline void set_roleid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 icon = 3;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 3;
  inline ::google::protobuf::uint32 icon() const;
  inline void set_icon(::google::protobuf::uint32 value);

  // optional uint32 sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 rank = 5;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 5;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint32 value1 = 6;
  inline bool has_value1() const;
  inline void clear_value1();
  static const int kValue1FieldNumber = 6;
  inline ::google::protobuf::uint32 value1() const;
  inline void set_value1(::google::protobuf::uint32 value);

  // optional uint32 value2 = 7;
  inline bool has_value2() const;
  inline void clear_value2();
  static const int kValue2FieldNumber = 7;
  inline ::google::protobuf::uint32 value2() const;
  inline void set_value2(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.suyin.proto.rank_info)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_value1();
  inline void clear_has_value1();
  inline void set_has_value2();
  inline void clear_has_value2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 roleid_;
  ::google::protobuf::uint32 icon_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 value1_;
  ::google::protobuf::uint32 value2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_struct_2eproto();
  friend void protobuf_AssignDesc_struct_2eproto();
  friend void protobuf_ShutdownFile_struct_2eproto();

  void InitAsDefaultInstance();
  static rank_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_info : public ::google::protobuf::Message {
 public:
  msg_info();
  virtual ~msg_info();

  msg_info(const msg_info& from);

  inline msg_info& operator=(const msg_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_info& default_instance();

  void Swap(msg_info* other);

  // implements Message ----------------------------------------------

  msg_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_info& from);
  void MergeFrom(const msg_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::uint32 roleid() const;
  inline void set_roleid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 icon = 3;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 3;
  inline ::google::protobuf::uint32 icon() const;
  inline void set_icon(::google::protobuf::uint32 value);

  // optional uint32 sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 id = 5;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 5;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 createtime = 6;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreatetimeFieldNumber = 6;
  inline ::google::protobuf::uint32 createtime() const;
  inline void set_createtime(::google::protobuf::uint32 value);

  // optional string content = 7;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 7;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional uint32 likecnt = 8;
  inline bool has_likecnt() const;
  inline void clear_likecnt();
  static const int kLikecntFieldNumber = 8;
  inline ::google::protobuf::uint32 likecnt() const;
  inline void set_likecnt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.suyin.proto.msg_info)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_likecnt();
  inline void clear_has_likecnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 roleid_;
  ::google::protobuf::uint32 icon_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 id_;
  ::std::string* content_;
  ::google::protobuf::uint32 createtime_;
  ::google::protobuf::uint32 likecnt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_struct_2eproto();
  friend void protobuf_AssignDesc_struct_2eproto();
  friend void protobuf_ShutdownFile_struct_2eproto();

  void InitAsDefaultInstance();
  static msg_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_base : public ::google::protobuf::Message {
 public:
  msg_base();
  virtual ~msg_base();

  msg_base(const msg_base& from);

  inline msg_base& operator=(const msg_base& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_base& default_instance();

  void Swap(msg_base* other);

  // implements Message ----------------------------------------------

  msg_base* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_base& from);
  void MergeFrom(const msg_base& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::uint32 roleid() const;
  inline void set_roleid(::google::protobuf::uint32 value);

  // optional uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 createtime = 3;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreatetimeFieldNumber = 3;
  inline ::google::protobuf::uint32 createtime() const;
  inline void set_createtime(::google::protobuf::uint32 value);

  // optional string content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:com.suyin.proto.msg_base)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 roleid_;
  ::google::protobuf::uint32 id_;
  ::std::string* content_;
  ::google::protobuf::uint32 createtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_struct_2eproto();
  friend void protobuf_AssignDesc_struct_2eproto();
  friend void protobuf_ShutdownFile_struct_2eproto();

  void InitAsDefaultInstance();
  static msg_base* default_instance_;
};
// -------------------------------------------------------------------

class friend_info : public ::google::protobuf::Message {
 public:
  friend_info();
  virtual ~friend_info();

  friend_info(const friend_info& from);

  inline friend_info& operator=(const friend_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const friend_info& default_instance();

  void Swap(friend_info* other);

  // implements Message ----------------------------------------------

  friend_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const friend_info& from);
  void MergeFrom(const friend_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::uint32 roleid() const;
  inline void set_roleid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 icon = 3;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 3;
  inline ::google::protobuf::uint32 icon() const;
  inline void set_icon(::google::protobuf::uint32 value);

  // optional uint32 sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.suyin.proto.friend_info)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_sex();
  inline void clear_has_sex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 roleid_;
  ::google::protobuf::uint32 icon_;
  ::google::protobuf::uint32 sex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_struct_2eproto();
  friend void protobuf_AssignDesc_struct_2eproto();
  friend void protobuf_ShutdownFile_struct_2eproto();

  void InitAsDefaultInstance();
  static friend_info* default_instance_;
};
// -------------------------------------------------------------------

class game_record : public ::google::protobuf::Message {
 public:
  game_record();
  virtual ~game_record();

  game_record(const game_record& from);

  inline game_record& operator=(const game_record& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_record& default_instance();

  void Swap(game_record* other);

  // implements Message ----------------------------------------------

  game_record* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_record& from);
  void MergeFrom(const game_record& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::uint32 roleid() const;
  inline void set_roleid(::google::protobuf::uint32 value);

  // optional string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional uint32 icon = 3;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 3;
  inline ::google::protobuf::uint32 icon() const;
  inline void set_icon(::google::protobuf::uint32 value);

  // optional uint32 sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint32 rank = 6;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 6;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint32 mass = 7;
  inline bool has_mass() const;
  inline void clear_mass();
  static const int kMassFieldNumber = 7;
  inline ::google::protobuf::uint32 mass() const;
  inline void set_mass(::google::protobuf::uint32 value);

  // optional uint32 eat = 8;
  inline bool has_eat() const;
  inline void clear_eat();
  static const int kEatFieldNumber = 8;
  inline ::google::protobuf::uint32 eat() const;
  inline void set_eat(::google::protobuf::uint32 value);

  // optional uint32 live = 9;
  inline bool has_live() const;
  inline void clear_live();
  static const int kLiveFieldNumber = 9;
  inline ::google::protobuf::uint32 live() const;
  inline void set_live(::google::protobuf::uint32 value);

  // optional uint32 copper = 10;
  inline bool has_copper() const;
  inline void clear_copper();
  static const int kCopperFieldNumber = 10;
  inline ::google::protobuf::uint32 copper() const;
  inline void set_copper(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.suyin.proto.game_record)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_mass();
  inline void clear_has_mass();
  inline void set_has_eat();
  inline void clear_has_eat();
  inline void set_has_live();
  inline void clear_has_live();
  inline void set_has_copper();
  inline void clear_has_copper();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nickname_;
  ::google::protobuf::uint32 roleid_;
  ::google::protobuf::uint32 icon_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 mass_;
  ::google::protobuf::uint32 eat_;
  ::google::protobuf::uint32 live_;
  ::google::protobuf::uint32 copper_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_struct_2eproto();
  friend void protobuf_AssignDesc_struct_2eproto();
  friend void protobuf_ShutdownFile_struct_2eproto();

  void InitAsDefaultInstance();
  static game_record* default_instance_;
};
// -------------------------------------------------------------------

class season_rank : public ::google::protobuf::Message {
 public:
  season_rank();
  virtual ~season_rank();

  season_rank(const season_rank& from);

  inline season_rank& operator=(const season_rank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const season_rank& default_instance();

  void Swap(season_rank* other);

  // implements Message ----------------------------------------------

  season_rank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const season_rank& from);
  void MergeFrom(const season_rank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint32 duanwei = 2;
  inline bool has_duanwei() const;
  inline void clear_duanwei();
  static const int kDuanweiFieldNumber = 2;
  inline ::google::protobuf::uint32 duanwei() const;
  inline void set_duanwei(::google::protobuf::uint32 value);

  // optional uint32 star = 3;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 3;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // optional uint32 season = 4;
  inline bool has_season() const;
  inline void clear_season();
  static const int kSeasonFieldNumber = 4;
  inline ::google::protobuf::uint32 season() const;
  inline void set_season(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.suyin.proto.season_rank)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_duanwei();
  inline void clear_has_duanwei();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_season();
  inline void clear_has_season();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 duanwei_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::uint32 season_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_struct_2eproto();
  friend void protobuf_AssignDesc_struct_2eproto();
  friend void protobuf_ShutdownFile_struct_2eproto();

  void InitAsDefaultInstance();
  static season_rank* default_instance_;
};
// -------------------------------------------------------------------

class photo_data : public ::google::protobuf::Message {
 public:
  photo_data();
  virtual ~photo_data();

  photo_data(const photo_data& from);

  inline photo_data& operator=(const photo_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const photo_data& default_instance();

  void Swap(photo_data* other);

  // implements Message ----------------------------------------------

  photo_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const photo_data& from);
  void MergeFrom(const photo_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 slot = 1;
  inline bool has_slot() const;
  inline void clear_slot();
  static const int kSlotFieldNumber = 1;
  inline ::google::protobuf::uint32 slot() const;
  inline void set_slot(::google::protobuf::uint32 value);

  // optional string data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:com.suyin.proto.photo_data)
 private:
  inline void set_has_slot();
  inline void clear_has_slot();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* data_;
  ::google::protobuf::uint32 slot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_struct_2eproto();
  friend void protobuf_AssignDesc_struct_2eproto();
  friend void protobuf_ShutdownFile_struct_2eproto();

  void InitAsDefaultInstance();
  static photo_data* default_instance_;
};
// -------------------------------------------------------------------

class icon_data : public ::google::protobuf::Message {
 public:
  icon_data();
  virtual ~icon_data();

  icon_data(const icon_data& from);

  inline icon_data& operator=(const icon_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const icon_data& default_instance();

  void Swap(icon_data* other);

  // implements Message ----------------------------------------------

  icon_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const icon_data& from);
  void MergeFrom(const icon_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::uint32 roleid() const;
  inline void set_roleid(::google::protobuf::uint32 value);

  // optional string data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:com.suyin.proto.icon_data)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* data_;
  ::google::protobuf::uint32 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_struct_2eproto();
  friend void protobuf_AssignDesc_struct_2eproto();
  friend void protobuf_ShutdownFile_struct_2eproto();

  void InitAsDefaultInstance();
  static icon_data* default_instance_;
};
// ===================================================================


// ===================================================================

// acc_info

// optional uint32 roleid = 1;
inline bool acc_info::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void acc_info::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void acc_info::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void acc_info::clear_roleid() {
  roleid_ = 0u;
  clear_has_roleid();
}
inline ::google::protobuf::uint32 acc_info::roleid() const {
  return roleid_;
}
inline void acc_info::set_roleid(::google::protobuf::uint32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional uint32 gmlevel = 2;
inline bool acc_info::has_gmlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void acc_info::set_has_gmlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void acc_info::clear_has_gmlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void acc_info::clear_gmlevel() {
  gmlevel_ = 0u;
  clear_has_gmlevel();
}
inline ::google::protobuf::uint32 acc_info::gmlevel() const {
  return gmlevel_;
}
inline void acc_info::set_gmlevel(::google::protobuf::uint32 value) {
  set_has_gmlevel();
  gmlevel_ = value;
}

// optional string passwd = 3;
inline bool acc_info::has_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void acc_info::set_has_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void acc_info::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void acc_info::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& acc_info::passwd() const {
  return *passwd_;
}
inline void acc_info::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void acc_info::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void acc_info::set_passwd(const char* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* acc_info::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  return passwd_;
}
inline ::std::string* acc_info::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void acc_info::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// role_info

// optional uint32 roleid = 1;
inline bool role_info::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_info::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_info::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_info::clear_roleid() {
  roleid_ = 0u;
  clear_has_roleid();
}
inline ::google::protobuf::uint32 role_info::roleid() const {
  return roleid_;
}
inline void role_info::set_roleid(::google::protobuf::uint32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional string name = 2;
inline bool role_info::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_info::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& role_info::name() const {
  return *name_;
}
inline void role_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void role_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void role_info::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* role_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 create_time = 3;
inline bool role_info::has_create_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_info::set_has_create_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_info::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_info::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
inline ::google::protobuf::uint32 role_info::create_time() const {
  return create_time_;
}
inline void role_info::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
}

// optional uint32 icon = 4;
inline bool role_info::has_icon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_info::set_has_icon() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_info::clear_has_icon() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_info::clear_icon() {
  icon_ = 0u;
  clear_has_icon();
}
inline ::google::protobuf::uint32 role_info::icon() const {
  return icon_;
}
inline void role_info::set_icon(::google::protobuf::uint32 value) {
  set_has_icon();
  icon_ = value;
}

// optional uint32 sex = 5;
inline bool role_info::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void role_info::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void role_info::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void role_info::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 role_info::sex() const {
  return sex_;
}
inline void role_info::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 level = 6;
inline bool role_info::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void role_info::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void role_info::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void role_info::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 role_info::level() const {
  return level_;
}
inline void role_info::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 copper = 7;
inline bool role_info::has_copper() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void role_info::set_has_copper() {
  _has_bits_[0] |= 0x00000040u;
}
inline void role_info::clear_has_copper() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void role_info::clear_copper() {
  copper_ = 0u;
  clear_has_copper();
}
inline ::google::protobuf::uint32 role_info::copper() const {
  return copper_;
}
inline void role_info::set_copper(::google::protobuf::uint32 value) {
  set_has_copper();
  copper_ = value;
}

// optional uint32 gold = 8;
inline bool role_info::has_gold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void role_info::set_has_gold() {
  _has_bits_[0] |= 0x00000080u;
}
inline void role_info::clear_has_gold() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void role_info::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
inline ::google::protobuf::uint32 role_info::gold() const {
  return gold_;
}
inline void role_info::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
}

// optional uint32 duanwei = 9;
inline bool role_info::has_duanwei() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void role_info::set_has_duanwei() {
  _has_bits_[0] |= 0x00000100u;
}
inline void role_info::clear_has_duanwei() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void role_info::clear_duanwei() {
  duanwei_ = 0u;
  clear_has_duanwei();
}
inline ::google::protobuf::uint32 role_info::duanwei() const {
  return duanwei_;
}
inline void role_info::set_duanwei(::google::protobuf::uint32 value) {
  set_has_duanwei();
  duanwei_ = value;
}

// optional uint32 star = 10;
inline bool role_info::has_star() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void role_info::set_has_star() {
  _has_bits_[0] |= 0x00000200u;
}
inline void role_info::clear_has_star() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void role_info::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 role_info::star() const {
  return star_;
}
inline void role_info::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// optional uint32 mvp_cnt = 11;
inline bool role_info::has_mvp_cnt() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void role_info::set_has_mvp_cnt() {
  _has_bits_[0] |= 0x00000400u;
}
inline void role_info::clear_has_mvp_cnt() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void role_info::clear_mvp_cnt() {
  mvp_cnt_ = 0u;
  clear_has_mvp_cnt();
}
inline ::google::protobuf::uint32 role_info::mvp_cnt() const {
  return mvp_cnt_;
}
inline void role_info::set_mvp_cnt(::google::protobuf::uint32 value) {
  set_has_mvp_cnt();
  mvp_cnt_ = value;
}

// optional uint32 champion_cnt = 12;
inline bool role_info::has_champion_cnt() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void role_info::set_has_champion_cnt() {
  _has_bits_[0] |= 0x00000800u;
}
inline void role_info::clear_has_champion_cnt() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void role_info::clear_champion_cnt() {
  champion_cnt_ = 0u;
  clear_has_champion_cnt();
}
inline ::google::protobuf::uint32 role_info::champion_cnt() const {
  return champion_cnt_;
}
inline void role_info::set_champion_cnt(::google::protobuf::uint32 value) {
  set_has_champion_cnt();
  champion_cnt_ = value;
}

// optional uint32 eat1_cnt = 13;
inline bool role_info::has_eat1_cnt() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void role_info::set_has_eat1_cnt() {
  _has_bits_[0] |= 0x00001000u;
}
inline void role_info::clear_has_eat1_cnt() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void role_info::clear_eat1_cnt() {
  eat1_cnt_ = 0u;
  clear_has_eat1_cnt();
}
inline ::google::protobuf::uint32 role_info::eat1_cnt() const {
  return eat1_cnt_;
}
inline void role_info::set_eat1_cnt(::google::protobuf::uint32 value) {
  set_has_eat1_cnt();
  eat1_cnt_ = value;
}

// optional uint32 eat2_cnt = 14;
inline bool role_info::has_eat2_cnt() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void role_info::set_has_eat2_cnt() {
  _has_bits_[0] |= 0x00002000u;
}
inline void role_info::clear_has_eat2_cnt() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void role_info::clear_eat2_cnt() {
  eat2_cnt_ = 0u;
  clear_has_eat2_cnt();
}
inline ::google::protobuf::uint32 role_info::eat2_cnt() const {
  return eat2_cnt_;
}
inline void role_info::set_eat2_cnt(::google::protobuf::uint32 value) {
  set_has_eat2_cnt();
  eat2_cnt_ = value;
}

// optional uint32 max_mass = 15;
inline bool role_info::has_max_mass() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void role_info::set_has_max_mass() {
  _has_bits_[0] |= 0x00004000u;
}
inline void role_info::clear_has_max_mass() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void role_info::clear_max_mass() {
  max_mass_ = 0u;
  clear_has_max_mass();
}
inline ::google::protobuf::uint32 role_info::max_mass() const {
  return max_mass_;
}
inline void role_info::set_max_mass(::google::protobuf::uint32 value) {
  set_has_max_mass();
  max_mass_ = value;
}

// optional uint32 province = 16;
inline bool role_info::has_province() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void role_info::set_has_province() {
  _has_bits_[0] |= 0x00008000u;
}
inline void role_info::clear_has_province() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void role_info::clear_province() {
  province_ = 0u;
  clear_has_province();
}
inline ::google::protobuf::uint32 role_info::province() const {
  return province_;
}
inline void role_info::set_province(::google::protobuf::uint32 value) {
  set_has_province();
  province_ = value;
}

// optional uint32 city = 17;
inline bool role_info::has_city() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void role_info::set_has_city() {
  _has_bits_[0] |= 0x00010000u;
}
inline void role_info::clear_has_city() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void role_info::clear_city() {
  city_ = 0u;
  clear_has_city();
}
inline ::google::protobuf::uint32 role_info::city() const {
  return city_;
}
inline void role_info::set_city(::google::protobuf::uint32 value) {
  set_has_city();
  city_ = value;
}

// optional string describe = 18;
inline bool role_info::has_describe() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void role_info::set_has_describe() {
  _has_bits_[0] |= 0x00020000u;
}
inline void role_info::clear_has_describe() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void role_info::clear_describe() {
  if (describe_ != &::google::protobuf::internal::kEmptyString) {
    describe_->clear();
  }
  clear_has_describe();
}
inline const ::std::string& role_info::describe() const {
  return *describe_;
}
inline void role_info::set_describe(const ::std::string& value) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
}
inline void role_info::set_describe(const char* value) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
}
inline void role_info::set_describe(const char* value, size_t size) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  describe_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_info::mutable_describe() {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  return describe_;
}
inline ::std::string* role_info::release_describe() {
  clear_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = describe_;
    describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_info::set_allocated_describe(::std::string* describe) {
  if (describe_ != &::google::protobuf::internal::kEmptyString) {
    delete describe_;
  }
  if (describe) {
    set_has_describe();
    describe_ = describe;
  } else {
    clear_has_describe();
    describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 heroid = 19;
inline bool role_info::has_heroid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void role_info::set_has_heroid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void role_info::clear_has_heroid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void role_info::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 role_info::heroid() const {
  return heroid_;
}
inline void role_info::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional uint32 herolevel = 20;
inline bool role_info::has_herolevel() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void role_info::set_has_herolevel() {
  _has_bits_[0] |= 0x00080000u;
}
inline void role_info::clear_has_herolevel() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void role_info::clear_herolevel() {
  herolevel_ = 0u;
  clear_has_herolevel();
}
inline ::google::protobuf::uint32 role_info::herolevel() const {
  return herolevel_;
}
inline void role_info::set_herolevel(::google::protobuf::uint32 value) {
  set_has_herolevel();
  herolevel_ = value;
}

// optional uint32 exp = 21;
inline bool role_info::has_exp() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void role_info::set_has_exp() {
  _has_bits_[0] |= 0x00100000u;
}
inline void role_info::clear_has_exp() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void role_info::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 role_info::exp() const {
  return exp_;
}
inline void role_info::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// repeated .com.suyin.proto.item_info equips = 22;
inline int role_info::equips_size() const {
  return equips_.size();
}
inline void role_info::clear_equips() {
  equips_.Clear();
}
inline const ::com::suyin::proto::item_info& role_info::equips(int index) const {
  return equips_.Get(index);
}
inline ::com::suyin::proto::item_info* role_info::mutable_equips(int index) {
  return equips_.Mutable(index);
}
inline ::com::suyin::proto::item_info* role_info::add_equips() {
  return equips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::suyin::proto::item_info >&
role_info::equips() const {
  return equips_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::suyin::proto::item_info >*
role_info::mutable_equips() {
  return &equips_;
}

// optional uint32 free_ticket = 23;
inline bool role_info::has_free_ticket() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void role_info::set_has_free_ticket() {
  _has_bits_[0] |= 0x00400000u;
}
inline void role_info::clear_has_free_ticket() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void role_info::clear_free_ticket() {
  free_ticket_ = 0u;
  clear_has_free_ticket();
}
inline ::google::protobuf::uint32 role_info::free_ticket() const {
  return free_ticket_;
}
inline void role_info::set_free_ticket(::google::protobuf::uint32 value) {
  set_has_free_ticket();
  free_ticket_ = value;
}

// optional uint32 refresh_time = 24;
inline bool role_info::has_refresh_time() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void role_info::set_has_refresh_time() {
  _has_bits_[0] |= 0x00800000u;
}
inline void role_info::clear_has_refresh_time() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void role_info::clear_refresh_time() {
  refresh_time_ = 0u;
  clear_has_refresh_time();
}
inline ::google::protobuf::uint32 role_info::refresh_time() const {
  return refresh_time_;
}
inline void role_info::set_refresh_time(::google::protobuf::uint32 value) {
  set_has_refresh_time();
  refresh_time_ = value;
}

// optional bool sign = 25;
inline bool role_info::has_sign() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void role_info::set_has_sign() {
  _has_bits_[0] |= 0x01000000u;
}
inline void role_info::clear_has_sign() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void role_info::clear_sign() {
  sign_ = false;
  clear_has_sign();
}
inline bool role_info::sign() const {
  return sign_;
}
inline void role_info::set_sign(bool value) {
  set_has_sign();
  sign_ = value;
}

// optional uint32 last_sign_time = 29;
inline bool role_info::has_last_sign_time() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void role_info::set_has_last_sign_time() {
  _has_bits_[0] |= 0x02000000u;
}
inline void role_info::clear_has_last_sign_time() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void role_info::clear_last_sign_time() {
  last_sign_time_ = 0u;
  clear_has_last_sign_time();
}
inline ::google::protobuf::uint32 role_info::last_sign_time() const {
  return last_sign_time_;
}
inline void role_info::set_last_sign_time(::google::protobuf::uint32 value) {
  set_has_last_sign_time();
  last_sign_time_ = value;
}

// optional uint32 sign_tags = 30;
inline bool role_info::has_sign_tags() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void role_info::set_has_sign_tags() {
  _has_bits_[0] |= 0x04000000u;
}
inline void role_info::clear_has_sign_tags() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void role_info::clear_sign_tags() {
  sign_tags_ = 0u;
  clear_has_sign_tags();
}
inline ::google::protobuf::uint32 role_info::sign_tags() const {
  return sign_tags_;
}
inline void role_info::set_sign_tags(::google::protobuf::uint32 value) {
  set_has_sign_tags();
  sign_tags_ = value;
}

// optional uint32 award_refresh_time = 31;
inline bool role_info::has_award_refresh_time() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void role_info::set_has_award_refresh_time() {
  _has_bits_[0] |= 0x08000000u;
}
inline void role_info::clear_has_award_refresh_time() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void role_info::clear_award_refresh_time() {
  award_refresh_time_ = 0u;
  clear_has_award_refresh_time();
}
inline ::google::protobuf::uint32 role_info::award_refresh_time() const {
  return award_refresh_time_;
}
inline void role_info::set_award_refresh_time(::google::protobuf::uint32 value) {
  set_has_award_refresh_time();
  award_refresh_time_ = value;
}

// repeated bool award_gots = 32;
inline int role_info::award_gots_size() const {
  return award_gots_.size();
}
inline void role_info::clear_award_gots() {
  award_gots_.Clear();
}
inline bool role_info::award_gots(int index) const {
  return award_gots_.Get(index);
}
inline void role_info::set_award_gots(int index, bool value) {
  award_gots_.Set(index, value);
}
inline void role_info::add_award_gots(bool value) {
  award_gots_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
role_info::award_gots() const {
  return award_gots_;
}
inline ::google::protobuf::RepeatedField< bool >*
role_info::mutable_award_gots() {
  return &award_gots_;
}

// -------------------------------------------------------------------

// award_info

// optional uint32 type = 1;
inline bool award_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void award_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void award_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void award_info::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 award_info::type() const {
  return type_;
}
inline void award_info::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 day = 2;
inline bool award_info::has_day() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void award_info::set_has_day() {
  _has_bits_[0] |= 0x00000002u;
}
inline void award_info::clear_has_day() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void award_info::clear_day() {
  day_ = 0u;
  clear_has_day();
}
inline ::google::protobuf::uint32 award_info::day() const {
  return day_;
}
inline void award_info::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
}

// -------------------------------------------------------------------

// award_list

// optional uint32 refresh_time = 1;
inline bool award_list::has_refresh_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void award_list::set_has_refresh_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void award_list::clear_has_refresh_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void award_list::clear_refresh_time() {
  refresh_time_ = 0u;
  clear_has_refresh_time();
}
inline ::google::protobuf::uint32 award_list::refresh_time() const {
  return refresh_time_;
}
inline void award_list::set_refresh_time(::google::protobuf::uint32 value) {
  set_has_refresh_time();
  refresh_time_ = value;
}

// repeated .com.suyin.proto.award_info list = 2;
inline int award_list::list_size() const {
  return list_.size();
}
inline void award_list::clear_list() {
  list_.Clear();
}
inline const ::com::suyin::proto::award_info& award_list::list(int index) const {
  return list_.Get(index);
}
inline ::com::suyin::proto::award_info* award_list::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::com::suyin::proto::award_info* award_list::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::suyin::proto::award_info >&
award_list::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::suyin::proto::award_info >*
award_list::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// item_info

// optional uint32 tpltid = 1;
inline bool item_info::has_tpltid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void item_info::set_has_tpltid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void item_info::clear_has_tpltid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void item_info::clear_tpltid() {
  tpltid_ = 0u;
  clear_has_tpltid();
}
inline ::google::protobuf::uint32 item_info::tpltid() const {
  return tpltid_;
}
inline void item_info::set_tpltid(::google::protobuf::uint32 value) {
  set_has_tpltid();
  tpltid_ = value;
}

// optional uint32 stack = 3;
inline bool item_info::has_stack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void item_info::set_has_stack() {
  _has_bits_[0] |= 0x00000002u;
}
inline void item_info::clear_has_stack() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void item_info::clear_stack() {
  stack_ = 0u;
  clear_has_stack();
}
inline ::google::protobuf::uint32 item_info::stack() const {
  return stack_;
}
inline void item_info::set_stack(::google::protobuf::uint32 value) {
  set_has_stack();
  stack_ = value;
}

// optional uint32 create_time = 4;
inline bool item_info::has_create_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void item_info::set_has_create_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void item_info::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void item_info::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
inline ::google::protobuf::uint32 item_info::create_time() const {
  return create_time_;
}
inline void item_info::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
}

// -------------------------------------------------------------------

// item_list

// repeated .com.suyin.proto.item_info list = 1;
inline int item_list::list_size() const {
  return list_.size();
}
inline void item_list::clear_list() {
  list_.Clear();
}
inline const ::com::suyin::proto::item_info& item_list::list(int index) const {
  return list_.Get(index);
}
inline ::com::suyin::proto::item_info* item_list::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::com::suyin::proto::item_info* item_list::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::suyin::proto::item_info >&
item_list::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::suyin::proto::item_info >*
item_list::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// shop_item

// optional uint32 tpltid = 1;
inline bool shop_item::has_tpltid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void shop_item::set_has_tpltid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void shop_item::clear_has_tpltid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void shop_item::clear_tpltid() {
  tpltid_ = 0u;
  clear_has_tpltid();
}
inline ::google::protobuf::uint32 shop_item::tpltid() const {
  return tpltid_;
}
inline void shop_item::set_tpltid(::google::protobuf::uint32 value) {
  set_has_tpltid();
  tpltid_ = value;
}

// -------------------------------------------------------------------

// server_info

// optional uint32 serverid = 1;
inline bool server_info::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void server_info::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void server_info::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void server_info::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 server_info::serverid() const {
  return serverid_;
}
inline void server_info::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// optional string serverip = 2;
inline bool server_info::has_serverip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void server_info::set_has_serverip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void server_info::clear_has_serverip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void server_info::clear_serverip() {
  if (serverip_ != &::google::protobuf::internal::kEmptyString) {
    serverip_->clear();
  }
  clear_has_serverip();
}
inline const ::std::string& server_info::serverip() const {
  return *serverip_;
}
inline void server_info::set_serverip(const ::std::string& value) {
  set_has_serverip();
  if (serverip_ == &::google::protobuf::internal::kEmptyString) {
    serverip_ = new ::std::string;
  }
  serverip_->assign(value);
}
inline void server_info::set_serverip(const char* value) {
  set_has_serverip();
  if (serverip_ == &::google::protobuf::internal::kEmptyString) {
    serverip_ = new ::std::string;
  }
  serverip_->assign(value);
}
inline void server_info::set_serverip(const char* value, size_t size) {
  set_has_serverip();
  if (serverip_ == &::google::protobuf::internal::kEmptyString) {
    serverip_ = new ::std::string;
  }
  serverip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* server_info::mutable_serverip() {
  set_has_serverip();
  if (serverip_ == &::google::protobuf::internal::kEmptyString) {
    serverip_ = new ::std::string;
  }
  return serverip_;
}
inline ::std::string* server_info::release_serverip() {
  clear_has_serverip();
  if (serverip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serverip_;
    serverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void server_info::set_allocated_serverip(::std::string* serverip) {
  if (serverip_ != &::google::protobuf::internal::kEmptyString) {
    delete serverip_;
  }
  if (serverip) {
    set_has_serverip();
    serverip_ = serverip;
  } else {
    clear_has_serverip();
    serverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 serverport = 3;
inline bool server_info::has_serverport() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void server_info::set_has_serverport() {
  _has_bits_[0] |= 0x00000004u;
}
inline void server_info::clear_has_serverport() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void server_info::clear_serverport() {
  serverport_ = 0u;
  clear_has_serverport();
}
inline ::google::protobuf::uint32 server_info::serverport() const {
  return serverport_;
}
inline void server_info::set_serverport(::google::protobuf::uint32 value) {
  set_has_serverport();
  serverport_ = value;
}

// optional string servername = 4;
inline bool server_info::has_servername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void server_info::set_has_servername() {
  _has_bits_[0] |= 0x00000008u;
}
inline void server_info::clear_has_servername() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void server_info::clear_servername() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    servername_->clear();
  }
  clear_has_servername();
}
inline const ::std::string& server_info::servername() const {
  return *servername_;
}
inline void server_info::set_servername(const ::std::string& value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void server_info::set_servername(const char* value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void server_info::set_servername(const char* value, size_t size) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* server_info::mutable_servername() {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  return servername_;
}
inline ::std::string* server_info::release_servername() {
  clear_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = servername_;
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void server_info::set_allocated_servername(::std::string* servername) {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (servername) {
    set_has_servername();
    servername_ = servername;
  } else {
    clear_has_servername();
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// fans_info

// optional uint32 roleid = 1;
inline bool fans_info::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fans_info::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fans_info::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fans_info::clear_roleid() {
  roleid_ = 0u;
  clear_has_roleid();
}
inline ::google::protobuf::uint32 fans_info::roleid() const {
  return roleid_;
}
inline void fans_info::set_roleid(::google::protobuf::uint32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional string name = 2;
inline bool fans_info::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fans_info::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fans_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fans_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& fans_info::name() const {
  return *name_;
}
inline void fans_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void fans_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void fans_info::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fans_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* fans_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void fans_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 icon = 3;
inline bool fans_info::has_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void fans_info::set_has_icon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void fans_info::clear_has_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void fans_info::clear_icon() {
  icon_ = 0u;
  clear_has_icon();
}
inline ::google::protobuf::uint32 fans_info::icon() const {
  return icon_;
}
inline void fans_info::set_icon(::google::protobuf::uint32 value) {
  set_has_icon();
  icon_ = value;
}

// optional uint32 sex = 4;
inline bool fans_info::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void fans_info::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void fans_info::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void fans_info::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 fans_info::sex() const {
  return sex_;
}
inline void fans_info::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 count = 5;
inline bool fans_info::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void fans_info::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void fans_info::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void fans_info::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 fans_info::count() const {
  return count_;
}
inline void fans_info::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// rank_info

// optional uint32 roleid = 1;
inline bool rank_info::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rank_info::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rank_info::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rank_info::clear_roleid() {
  roleid_ = 0u;
  clear_has_roleid();
}
inline ::google::protobuf::uint32 rank_info::roleid() const {
  return roleid_;
}
inline void rank_info::set_roleid(::google::protobuf::uint32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional string name = 2;
inline bool rank_info::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rank_info::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rank_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rank_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& rank_info::name() const {
  return *name_;
}
inline void rank_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void rank_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void rank_info::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* rank_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* rank_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void rank_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 icon = 3;
inline bool rank_info::has_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rank_info::set_has_icon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void rank_info::clear_has_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void rank_info::clear_icon() {
  icon_ = 0u;
  clear_has_icon();
}
inline ::google::protobuf::uint32 rank_info::icon() const {
  return icon_;
}
inline void rank_info::set_icon(::google::protobuf::uint32 value) {
  set_has_icon();
  icon_ = value;
}

// optional uint32 sex = 4;
inline bool rank_info::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void rank_info::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void rank_info::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void rank_info::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 rank_info::sex() const {
  return sex_;
}
inline void rank_info::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 rank = 5;
inline bool rank_info::has_rank() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void rank_info::set_has_rank() {
  _has_bits_[0] |= 0x00000010u;
}
inline void rank_info::clear_has_rank() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void rank_info::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 rank_info::rank() const {
  return rank_;
}
inline void rank_info::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint32 value1 = 6;
inline bool rank_info::has_value1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void rank_info::set_has_value1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void rank_info::clear_has_value1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void rank_info::clear_value1() {
  value1_ = 0u;
  clear_has_value1();
}
inline ::google::protobuf::uint32 rank_info::value1() const {
  return value1_;
}
inline void rank_info::set_value1(::google::protobuf::uint32 value) {
  set_has_value1();
  value1_ = value;
}

// optional uint32 value2 = 7;
inline bool rank_info::has_value2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void rank_info::set_has_value2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void rank_info::clear_has_value2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void rank_info::clear_value2() {
  value2_ = 0u;
  clear_has_value2();
}
inline ::google::protobuf::uint32 rank_info::value2() const {
  return value2_;
}
inline void rank_info::set_value2(::google::protobuf::uint32 value) {
  set_has_value2();
  value2_ = value;
}

// -------------------------------------------------------------------

// msg_info

// optional uint32 roleid = 1;
inline bool msg_info::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_info::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_info::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_info::clear_roleid() {
  roleid_ = 0u;
  clear_has_roleid();
}
inline ::google::protobuf::uint32 msg_info::roleid() const {
  return roleid_;
}
inline void msg_info::set_roleid(::google::protobuf::uint32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional string name = 2;
inline bool msg_info::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_info::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& msg_info::name() const {
  return *name_;
}
inline void msg_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void msg_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void msg_info::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* msg_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 icon = 3;
inline bool msg_info::has_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_info::set_has_icon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_info::clear_has_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_info::clear_icon() {
  icon_ = 0u;
  clear_has_icon();
}
inline ::google::protobuf::uint32 msg_info::icon() const {
  return icon_;
}
inline void msg_info::set_icon(::google::protobuf::uint32 value) {
  set_has_icon();
  icon_ = value;
}

// optional uint32 sex = 4;
inline bool msg_info::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_info::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_info::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_info::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 msg_info::sex() const {
  return sex_;
}
inline void msg_info::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 id = 5;
inline bool msg_info::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_info::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_info::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_info::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 msg_info::id() const {
  return id_;
}
inline void msg_info::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 createtime = 6;
inline bool msg_info::has_createtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_info::set_has_createtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_info::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_info::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
inline ::google::protobuf::uint32 msg_info::createtime() const {
  return createtime_;
}
inline void msg_info::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
}

// optional string content = 7;
inline bool msg_info::has_content() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_info::set_has_content() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_info::clear_has_content() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_info::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& msg_info::content() const {
  return *content_;
}
inline void msg_info::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void msg_info::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void msg_info::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_info::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* msg_info::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_info::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 likecnt = 8;
inline bool msg_info::has_likecnt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void msg_info::set_has_likecnt() {
  _has_bits_[0] |= 0x00000080u;
}
inline void msg_info::clear_has_likecnt() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void msg_info::clear_likecnt() {
  likecnt_ = 0u;
  clear_has_likecnt();
}
inline ::google::protobuf::uint32 msg_info::likecnt() const {
  return likecnt_;
}
inline void msg_info::set_likecnt(::google::protobuf::uint32 value) {
  set_has_likecnt();
  likecnt_ = value;
}

// -------------------------------------------------------------------

// msg_base

// optional uint32 roleid = 1;
inline bool msg_base::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_base::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_base::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_base::clear_roleid() {
  roleid_ = 0u;
  clear_has_roleid();
}
inline ::google::protobuf::uint32 msg_base::roleid() const {
  return roleid_;
}
inline void msg_base::set_roleid(::google::protobuf::uint32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional uint32 id = 2;
inline bool msg_base::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_base::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_base::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_base::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 msg_base::id() const {
  return id_;
}
inline void msg_base::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 createtime = 3;
inline bool msg_base::has_createtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_base::set_has_createtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_base::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_base::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
inline ::google::protobuf::uint32 msg_base::createtime() const {
  return createtime_;
}
inline void msg_base::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
}

// optional string content = 4;
inline bool msg_base::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_base::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_base::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_base::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& msg_base::content() const {
  return *content_;
}
inline void msg_base::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void msg_base::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void msg_base::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_base::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* msg_base::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_base::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// friend_info

// optional uint32 roleid = 1;
inline bool friend_info::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void friend_info::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void friend_info::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void friend_info::clear_roleid() {
  roleid_ = 0u;
  clear_has_roleid();
}
inline ::google::protobuf::uint32 friend_info::roleid() const {
  return roleid_;
}
inline void friend_info::set_roleid(::google::protobuf::uint32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional string name = 2;
inline bool friend_info::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void friend_info::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void friend_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void friend_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& friend_info::name() const {
  return *name_;
}
inline void friend_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void friend_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void friend_info::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* friend_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* friend_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void friend_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 icon = 3;
inline bool friend_info::has_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void friend_info::set_has_icon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void friend_info::clear_has_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void friend_info::clear_icon() {
  icon_ = 0u;
  clear_has_icon();
}
inline ::google::protobuf::uint32 friend_info::icon() const {
  return icon_;
}
inline void friend_info::set_icon(::google::protobuf::uint32 value) {
  set_has_icon();
  icon_ = value;
}

// optional uint32 sex = 4;
inline bool friend_info::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void friend_info::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void friend_info::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void friend_info::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 friend_info::sex() const {
  return sex_;
}
inline void friend_info::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// -------------------------------------------------------------------

// game_record

// optional uint32 roleid = 1;
inline bool game_record::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_record::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_record::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_record::clear_roleid() {
  roleid_ = 0u;
  clear_has_roleid();
}
inline ::google::protobuf::uint32 game_record::roleid() const {
  return roleid_;
}
inline void game_record::set_roleid(::google::protobuf::uint32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional string nickname = 2;
inline bool game_record::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_record::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_record::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_record::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& game_record::nickname() const {
  return *nickname_;
}
inline void game_record::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void game_record::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void game_record::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* game_record::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* game_record::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void game_record::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 icon = 3;
inline bool game_record::has_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_record::set_has_icon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_record::clear_has_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_record::clear_icon() {
  icon_ = 0u;
  clear_has_icon();
}
inline ::google::protobuf::uint32 game_record::icon() const {
  return icon_;
}
inline void game_record::set_icon(::google::protobuf::uint32 value) {
  set_has_icon();
  icon_ = value;
}

// optional uint32 sex = 4;
inline bool game_record::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_record::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_record::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_record::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 game_record::sex() const {
  return sex_;
}
inline void game_record::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 time = 5;
inline bool game_record::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void game_record::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void game_record::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void game_record::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 game_record::time() const {
  return time_;
}
inline void game_record::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// optional uint32 rank = 6;
inline bool game_record::has_rank() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void game_record::set_has_rank() {
  _has_bits_[0] |= 0x00000020u;
}
inline void game_record::clear_has_rank() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void game_record::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 game_record::rank() const {
  return rank_;
}
inline void game_record::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint32 mass = 7;
inline bool game_record::has_mass() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void game_record::set_has_mass() {
  _has_bits_[0] |= 0x00000040u;
}
inline void game_record::clear_has_mass() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void game_record::clear_mass() {
  mass_ = 0u;
  clear_has_mass();
}
inline ::google::protobuf::uint32 game_record::mass() const {
  return mass_;
}
inline void game_record::set_mass(::google::protobuf::uint32 value) {
  set_has_mass();
  mass_ = value;
}

// optional uint32 eat = 8;
inline bool game_record::has_eat() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void game_record::set_has_eat() {
  _has_bits_[0] |= 0x00000080u;
}
inline void game_record::clear_has_eat() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void game_record::clear_eat() {
  eat_ = 0u;
  clear_has_eat();
}
inline ::google::protobuf::uint32 game_record::eat() const {
  return eat_;
}
inline void game_record::set_eat(::google::protobuf::uint32 value) {
  set_has_eat();
  eat_ = value;
}

// optional uint32 live = 9;
inline bool game_record::has_live() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void game_record::set_has_live() {
  _has_bits_[0] |= 0x00000100u;
}
inline void game_record::clear_has_live() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void game_record::clear_live() {
  live_ = 0u;
  clear_has_live();
}
inline ::google::protobuf::uint32 game_record::live() const {
  return live_;
}
inline void game_record::set_live(::google::protobuf::uint32 value) {
  set_has_live();
  live_ = value;
}

// optional uint32 copper = 10;
inline bool game_record::has_copper() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void game_record::set_has_copper() {
  _has_bits_[0] |= 0x00000200u;
}
inline void game_record::clear_has_copper() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void game_record::clear_copper() {
  copper_ = 0u;
  clear_has_copper();
}
inline ::google::protobuf::uint32 game_record::copper() const {
  return copper_;
}
inline void game_record::set_copper(::google::protobuf::uint32 value) {
  set_has_copper();
  copper_ = value;
}

// -------------------------------------------------------------------

// season_rank

// optional uint32 rank = 1;
inline bool season_rank::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void season_rank::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void season_rank::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void season_rank::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 season_rank::rank() const {
  return rank_;
}
inline void season_rank::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint32 duanwei = 2;
inline bool season_rank::has_duanwei() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void season_rank::set_has_duanwei() {
  _has_bits_[0] |= 0x00000002u;
}
inline void season_rank::clear_has_duanwei() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void season_rank::clear_duanwei() {
  duanwei_ = 0u;
  clear_has_duanwei();
}
inline ::google::protobuf::uint32 season_rank::duanwei() const {
  return duanwei_;
}
inline void season_rank::set_duanwei(::google::protobuf::uint32 value) {
  set_has_duanwei();
  duanwei_ = value;
}

// optional uint32 star = 3;
inline bool season_rank::has_star() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void season_rank::set_has_star() {
  _has_bits_[0] |= 0x00000004u;
}
inline void season_rank::clear_has_star() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void season_rank::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 season_rank::star() const {
  return star_;
}
inline void season_rank::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// optional uint32 season = 4;
inline bool season_rank::has_season() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void season_rank::set_has_season() {
  _has_bits_[0] |= 0x00000008u;
}
inline void season_rank::clear_has_season() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void season_rank::clear_season() {
  season_ = 0u;
  clear_has_season();
}
inline ::google::protobuf::uint32 season_rank::season() const {
  return season_;
}
inline void season_rank::set_season(::google::protobuf::uint32 value) {
  set_has_season();
  season_ = value;
}

// -------------------------------------------------------------------

// photo_data

// optional uint32 slot = 1;
inline bool photo_data::has_slot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void photo_data::set_has_slot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void photo_data::clear_has_slot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void photo_data::clear_slot() {
  slot_ = 0u;
  clear_has_slot();
}
inline ::google::protobuf::uint32 photo_data::slot() const {
  return slot_;
}
inline void photo_data::set_slot(::google::protobuf::uint32 value) {
  set_has_slot();
  slot_ = value;
}

// optional string data = 2;
inline bool photo_data::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void photo_data::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void photo_data::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void photo_data::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& photo_data::data() const {
  return *data_;
}
inline void photo_data::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void photo_data::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void photo_data::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* photo_data::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* photo_data::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void photo_data::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// icon_data

// optional uint32 roleid = 1;
inline bool icon_data::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void icon_data::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void icon_data::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void icon_data::clear_roleid() {
  roleid_ = 0u;
  clear_has_roleid();
}
inline ::google::protobuf::uint32 icon_data::roleid() const {
  return roleid_;
}
inline void icon_data::set_roleid(::google::protobuf::uint32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional string data = 2;
inline bool icon_data::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void icon_data::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void icon_data::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void icon_data::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& icon_data::data() const {
  return *data_;
}
inline void icon_data::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void icon_data::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void icon_data::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* icon_data::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* icon_data::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void icon_data::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace suyin
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_struct_2eproto__INCLUDED
